// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

class Bindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Bindings(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Bindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void show1() {
    return _show1();
  }

  late final _show1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('show');
  late final _show1 = _show1Ptr.asFunction<void Function()>();

  void implements1(
    int if1,
    int abstract1,
    int in1,
  ) {
    return _implements1(
      if1,
      abstract1,
      in1,
    );
  }

  late final _implements1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Int, ffi.Int)>>(
          'implements');
  late final _implements1 =
      _implements1Ptr.asFunction<void Function(int, int, int)>();
}

final class abstract1 extends ffi.Opaque {}

final class abstract2 extends ffi.Opaque {}

final class if1 extends ffi.Opaque {}

abstract class return1 {}

abstract class export1 {}

const int else1 = 0;

typedef var1 = ffi.Void;
typedef Dartvar = void;
