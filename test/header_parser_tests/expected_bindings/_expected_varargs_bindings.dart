// ignore_for_file: camel_case_types

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// VarArgs Test
class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int myfunc(
    int a,
    int va,
  ) {
    return _myfunc(
      a,
      va,
    );
  }

  late final _myfuncPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.VarArgs<(ffi.Int ,)>)>>('myfunc');
  late final _myfunc = _myfuncPtr.asFunction<int Function(int, int)>();

  int myfunc1(
    int a,
    double va,
    int va1,
  ) {
    return _myfunc1(
      a,
      va,
      va1,
    );
  }

  late final _myfunc1Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.VarArgs<(ffi.Float , ffi.Char ,)>)>>(
      'myfunc');
  late final _myfunc1 =
      _myfunc1Ptr.asFunction<int Function(int, double, int)>();
}
