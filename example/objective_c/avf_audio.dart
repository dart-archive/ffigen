// ignore_for_file: camel_case_types, non_constant_identifier_names, unused_element, unused_field

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;
import 'package:ffi/ffi.dart' as pkg_ffi;

/// Bindings for AVFAudio.
class AVFAudio {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  AVFAudio(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  AVFAudio.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ObjCSel> _registerName1(String name) {
    final cstr = name.toNativeUtf8();
    final sel = _sel_registerName(cstr.cast());
    pkg_ffi.calloc.free(cstr);
    return sel;
  }

  ffi.Pointer<ObjCSel> _sel_registerName(
    ffi.Pointer<ffi.Char> str,
  ) {
    return __sel_registerName(
      str,
    );
  }

  late final __sel_registerNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCSel> Function(
              ffi.Pointer<ffi.Char>)>>('sel_registerName');
  late final __sel_registerName = __sel_registerNamePtr
      .asFunction<ffi.Pointer<ObjCSel> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ObjCObject> _getClass1(String name) {
    final cstr = name.toNativeUtf8();
    final clazz = _objc_getClass(cstr.cast());
    pkg_ffi.calloc.free(cstr);
    return clazz;
  }

  ffi.Pointer<ObjCObject> _objc_getClass(
    ffi.Pointer<ffi.Char> str,
  ) {
    return __objc_getClass(
      str,
    );
  }

  late final __objc_getClassPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ffi.Char>)>>('objc_getClass');
  late final __objc_getClass = __objc_getClassPtr
      .asFunction<ffi.Pointer<ObjCObject> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ObjCObject> _objc_retain(
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_retain(
      value,
    );
  }

  late final __objc_retainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('objc_retain');
  late final __objc_retain = __objc_retainPtr
      .asFunction<ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  void _objc_release(
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_release(
      value,
    );
  }

  late final __objc_releasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'objc_release');
  late final __objc_release =
      __objc_releasePtr.asFunction<void Function(ffi.Pointer<ObjCObject>)>();

  late final _objc_releaseFinalizer1 =
      ffi.NativeFinalizer(__objc_releasePtr.cast());
  late final _class_NSObject1 = _getClass1("NSObject");
  late final _sel_load1 = _registerName1("load");
  void _objc_msgSend_1(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_1(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_1 = __objc_msgSend_1Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_initialize1 = _registerName1("initialize");
  late final _sel_init1 = _registerName1("init");
  instancetype _objc_msgSend_2(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_2(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_2Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_2 = __objc_msgSend_2Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_new1 = _registerName1("new");
  late final _sel_allocWithZone_1 = _registerName1("allocWithZone:");
  instancetype _objc_msgSend_3(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_NSZone> zone,
  ) {
    return __objc_msgSend_3(
      obj,
      sel,
      zone,
    );
  }

  late final __objc_msgSend_3Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<_NSZone>)>>('objc_msgSend');
  late final __objc_msgSend_3 = __objc_msgSend_3Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<_NSZone>)>();

  late final _sel_alloc1 = _registerName1("alloc");
  late final _sel_dealloc1 = _registerName1("dealloc");
  late final _sel_finalize1 = _registerName1("finalize");
  late final _sel_copy1 = _registerName1("copy");
  late final _sel_mutableCopy1 = _registerName1("mutableCopy");
  late final _sel_copyWithZone_1 = _registerName1("copyWithZone:");
  late final _sel_mutableCopyWithZone_1 =
      _registerName1("mutableCopyWithZone:");
  late final _sel_instancesRespondToSelector_1 =
      _registerName1("instancesRespondToSelector:");
  bool _objc_msgSend_4(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return __objc_msgSend_4(
      obj,
      sel,
      aSelector,
    );
  }

  late final __objc_msgSend_4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_4 = __objc_msgSend_4Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCSel>)>();

  late final _sel_conformsToProtocol_1 = _registerName1("conformsToProtocol:");
  bool _objc_msgSend_0(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> clazz,
  ) {
    return __objc_msgSend_0(
      obj,
      sel,
      clazz,
    );
  }

  late final __objc_msgSend_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_0 = __objc_msgSend_0Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_methodForSelector_1 = _registerName1("methodForSelector:");
  IMP _objc_msgSend_5(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return __objc_msgSend_5(
      obj,
      sel,
      aSelector,
    );
  }

  late final __objc_msgSend_5Ptr = _lookup<
      ffi.NativeFunction<
          IMP Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_5 = __objc_msgSend_5Ptr.asFunction<
      IMP Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCSel>)>();

  late final _sel_instanceMethodForSelector_1 =
      _registerName1("instanceMethodForSelector:");
  late final _sel_doesNotRecognizeSelector_1 =
      _registerName1("doesNotRecognizeSelector:");
  void _objc_msgSend_6(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return __objc_msgSend_6(
      obj,
      sel,
      aSelector,
    );
  }

  late final __objc_msgSend_6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_6 = __objc_msgSend_6Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCSel>)>();

  late final _sel_forwardingTargetForSelector_1 =
      _registerName1("forwardingTargetForSelector:");
  ffi.Pointer<ObjCObject> _objc_msgSend_7(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return __objc_msgSend_7(
      obj,
      sel,
      aSelector,
    );
  }

  late final __objc_msgSend_7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_7 = __objc_msgSend_7Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCSel>)>();

  late final _sel_forwardInvocation_1 = _registerName1("forwardInvocation:");
  void _objc_msgSend_8(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> anInvocation,
  ) {
    return __objc_msgSend_8(
      obj,
      sel,
      anInvocation,
    );
  }

  late final __objc_msgSend_8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_8 = __objc_msgSend_8Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_methodSignatureForSelector_1 =
      _registerName1("methodSignatureForSelector:");
  late final _sel_instanceMethodSignatureForSelector_1 =
      _registerName1("instanceMethodSignatureForSelector:");
  late final _sel_allowsWeakReference1 = _registerName1("allowsWeakReference");
  bool _objc_msgSend_9(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_9(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_9 = __objc_msgSend_9Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_retainWeakReference1 = _registerName1("retainWeakReference");
  late final _sel_isSubclassOfClass_1 = _registerName1("isSubclassOfClass:");
  late final _sel_resolveClassMethod_1 = _registerName1("resolveClassMethod:");
  late final _sel_resolveInstanceMethod_1 =
      _registerName1("resolveInstanceMethod:");
  late final _sel_hash1 = _registerName1("hash");
  int _objc_msgSend_10(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_10(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_10Ptr = _lookup<
      ffi.NativeFunction<
          NSUInteger Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_10 = __objc_msgSend_10Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_superclass1 = _registerName1("superclass");
  late final _sel_class1 = _registerName1("class");
  late final _sel_description1 = _registerName1("description");
  late final _sel_debugDescription1 = _registerName1("debugDescription");
  late final _sel_version1 = _registerName1("version");
  int _objc_msgSend_11(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_11(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_11Ptr = _lookup<
      ffi.NativeFunction<
          NSInteger Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_11 = __objc_msgSend_11Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setVersion_1 = _registerName1("setVersion:");
  void _objc_msgSend_12(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int aVersion,
  ) {
    return __objc_msgSend_12(
      obj,
      sel,
      aVersion,
    );
  }

  late final __objc_msgSend_12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSInteger)>>('objc_msgSend');
  late final __objc_msgSend_12 = __objc_msgSend_12Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_classForCoder1 = _registerName1("classForCoder");
  late final _sel_replacementObjectForCoder_1 =
      _registerName1("replacementObjectForCoder:");
  ffi.Pointer<ObjCObject> _objc_msgSend_13(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> coder,
  ) {
    return __objc_msgSend_13(
      obj,
      sel,
      coder,
    );
  }

  late final __objc_msgSend_13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_13 = __objc_msgSend_13Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_awakeAfterUsingCoder_1 =
      _registerName1("awakeAfterUsingCoder:");
  late final _sel_poseAsClass_1 = _registerName1("poseAsClass:");
  late final _sel_autoContentAccessingProxy1 =
      _registerName1("autoContentAccessingProxy");
  late final _sel_attemptRecoveryFromError_optionIndex_delegate_didRecoverSelector_contextInfo_1 =
      _registerName1(
          "attemptRecoveryFromError:optionIndex:delegate:didRecoverSelector:contextInfo:");
  void _objc_msgSend_14(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> error,
    int recoveryOptionIndex,
    ffi.Pointer<ObjCObject> delegate,
    ffi.Pointer<ObjCSel> didRecoverSelector,
    ffi.Pointer<ffi.Void> contextInfo,
  ) {
    return __objc_msgSend_14(
      obj,
      sel,
      error,
      recoveryOptionIndex,
      delegate,
      didRecoverSelector,
      contextInfo,
    );
  }

  late final __objc_msgSend_14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              NSUInteger,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Void>)>>('objc_msgSend');
  late final __objc_msgSend_14 = __objc_msgSend_14Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          int,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Void>)>();

  late final _sel_attemptRecoveryFromError_optionIndex_1 =
      _registerName1("attemptRecoveryFromError:optionIndex:");
  bool _objc_msgSend_15(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> error,
    int recoveryOptionIndex,
  ) {
    return __objc_msgSend_15(
      obj,
      sel,
      error,
      recoveryOptionIndex,
    );
  }

  late final __objc_msgSend_15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_15 = __objc_msgSend_15Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int)>();

  late final _sel_performSelector_withObject_afterDelay_inModes_1 =
      _registerName1("performSelector:withObject:afterDelay:inModes:");
  void _objc_msgSend_16(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> aSelector,
    ffi.Pointer<ObjCObject> anArgument,
    double delay,
    ffi.Pointer<ObjCObject> modes,
  ) {
    return __objc_msgSend_16(
      obj,
      sel,
      aSelector,
      anArgument,
      delay,
      modes,
    );
  }

  late final __objc_msgSend_16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              NSTimeInterval,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_16 = __objc_msgSend_16Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          double,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_performSelector_withObject_afterDelay_1 =
      _registerName1("performSelector:withObject:afterDelay:");
  void _objc_msgSend_17(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> aSelector,
    ffi.Pointer<ObjCObject> anArgument,
    double delay,
  ) {
    return __objc_msgSend_17(
      obj,
      sel,
      aSelector,
      anArgument,
      delay,
    );
  }

  late final __objc_msgSend_17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              NSTimeInterval)>>('objc_msgSend');
  late final __objc_msgSend_17 = __objc_msgSend_17Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>, double)>();

  late final _sel_cancelPreviousPerformRequestsWithTarget_selector_object_1 =
      _registerName1(
          "cancelPreviousPerformRequestsWithTarget:selector:object:");
  void _objc_msgSend_18(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> aTarget,
    ffi.Pointer<ObjCSel> aSelector,
    ffi.Pointer<ObjCObject> anArgument,
  ) {
    return __objc_msgSend_18(
      obj,
      sel,
      aTarget,
      aSelector,
      anArgument,
    );
  }

  late final __objc_msgSend_18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_18 = __objc_msgSend_18Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_cancelPreviousPerformRequestsWithTarget_1 =
      _registerName1("cancelPreviousPerformRequestsWithTarget:");
  late final _sel_URL_resourceDataDidBecomeAvailable_1 =
      _registerName1("URL:resourceDataDidBecomeAvailable:");
  void _objc_msgSend_19(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> sender,
    ffi.Pointer<ObjCObject> newBytes,
  ) {
    return __objc_msgSend_19(
      obj,
      sel,
      sender,
      newBytes,
    );
  }

  late final __objc_msgSend_19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_19 = __objc_msgSend_19Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  late final _sel_URLResourceDidFinishLoading_1 =
      _registerName1("URLResourceDidFinishLoading:");
  late final _sel_URLResourceDidCancelLoading_1 =
      _registerName1("URLResourceDidCancelLoading:");
  late final _sel_URL_resourceDidFailLoadingWithReason_1 =
      _registerName1("URL:resourceDidFailLoadingWithReason:");
  late final _sel_fileManager_shouldProceedAfterError_1 =
      _registerName1("fileManager:shouldProceedAfterError:");
  bool _objc_msgSend_20(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> fm,
    ffi.Pointer<ObjCObject> errorInfo,
  ) {
    return __objc_msgSend_20(
      obj,
      sel,
      fm,
      errorInfo,
    );
  }

  late final __objc_msgSend_20Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_20 = __objc_msgSend_20Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  late final _sel_fileManager_willProcessPath_1 =
      _registerName1("fileManager:willProcessPath:");
  late final _sel_accessInstanceVariablesDirectly1 =
      _registerName1("accessInstanceVariablesDirectly");
  late final _sel_valueForKey_1 = _registerName1("valueForKey:");
  late final _sel_setValue_forKey_1 = _registerName1("setValue:forKey:");
  late final _sel_validateValue_forKey_error_1 =
      _registerName1("validateValue:forKey:error:");
  bool _objc_msgSend_21(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Pointer<ObjCObject>> ioValue,
    ffi.Pointer<ObjCObject> inKey,
    ffi.Pointer<ffi.Pointer<ObjCObject>> outError,
  ) {
    return __objc_msgSend_21(
      obj,
      sel,
      ioValue,
      inKey,
      outError,
    );
  }

  late final __objc_msgSend_21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_21 = __objc_msgSend_21Ptr.asFunction<
      bool Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_mutableArrayValueForKey_1 =
      _registerName1("mutableArrayValueForKey:");
  late final _sel_mutableOrderedSetValueForKey_1 =
      _registerName1("mutableOrderedSetValueForKey:");
  late final _sel_mutableSetValueForKey_1 =
      _registerName1("mutableSetValueForKey:");
  late final _sel_valueForKeyPath_1 = _registerName1("valueForKeyPath:");
  late final _sel_setValue_forKeyPath_1 =
      _registerName1("setValue:forKeyPath:");
  late final _sel_validateValue_forKeyPath_error_1 =
      _registerName1("validateValue:forKeyPath:error:");
  late final _sel_mutableArrayValueForKeyPath_1 =
      _registerName1("mutableArrayValueForKeyPath:");
  late final _sel_mutableOrderedSetValueForKeyPath_1 =
      _registerName1("mutableOrderedSetValueForKeyPath:");
  late final _sel_mutableSetValueForKeyPath_1 =
      _registerName1("mutableSetValueForKeyPath:");
  late final _sel_valueForUndefinedKey_1 =
      _registerName1("valueForUndefinedKey:");
  late final _sel_setValue_forUndefinedKey_1 =
      _registerName1("setValue:forUndefinedKey:");
  late final _sel_setNilValueForKey_1 = _registerName1("setNilValueForKey:");
  late final _sel_dictionaryWithValuesForKeys_1 =
      _registerName1("dictionaryWithValuesForKeys:");
  late final _sel_setValuesForKeysWithDictionary_1 =
      _registerName1("setValuesForKeysWithDictionary:");
  late final _sel_useStoredAccessor1 = _registerName1("useStoredAccessor");
  late final _sel_storedValueForKey_1 = _registerName1("storedValueForKey:");
  late final _sel_takeStoredValue_forKey_1 =
      _registerName1("takeStoredValue:forKey:");
  late final _sel_takeValue_forKey_1 = _registerName1("takeValue:forKey:");
  late final _sel_takeValue_forKeyPath_1 =
      _registerName1("takeValue:forKeyPath:");
  late final _sel_handleQueryWithUnboundKey_1 =
      _registerName1("handleQueryWithUnboundKey:");
  late final _sel_handleTakeValue_forUnboundKey_1 =
      _registerName1("handleTakeValue:forUnboundKey:");
  late final _sel_unableToSetNilForKey_1 =
      _registerName1("unableToSetNilForKey:");
  late final _sel_valuesForKeys_1 = _registerName1("valuesForKeys:");
  late final _sel_takeValuesFromDictionary_1 =
      _registerName1("takeValuesFromDictionary:");
  late final _sel_observeValueForKeyPath_ofObject_change_context_1 =
      _registerName1("observeValueForKeyPath:ofObject:change:context:");
  void _objc_msgSend_22(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> keyPath,
    ffi.Pointer<ObjCObject> object,
    ffi.Pointer<ObjCObject> change,
    ffi.Pointer<ffi.Void> context,
  ) {
    return __objc_msgSend_22(
      obj,
      sel,
      keyPath,
      object,
      change,
      context,
    );
  }

  late final __objc_msgSend_22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Void>)>>('objc_msgSend');
  late final __objc_msgSend_22 = __objc_msgSend_22Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ffi.Void>)>();

  late final _sel_addObserver_forKeyPath_options_context_1 =
      _registerName1("addObserver:forKeyPath:options:context:");
  void _objc_msgSend_23(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> observer,
    ffi.Pointer<ObjCObject> keyPath,
    int options,
    ffi.Pointer<ffi.Void> context,
  ) {
    return __objc_msgSend_23(
      obj,
      sel,
      observer,
      keyPath,
      options,
      context,
    );
  }

  late final __objc_msgSend_23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>)>>('objc_msgSend');
  late final __objc_msgSend_23 = __objc_msgSend_23Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          int,
          ffi.Pointer<ffi.Void>)>();

  late final _sel_removeObserver_forKeyPath_context_1 =
      _registerName1("removeObserver:forKeyPath:context:");
  void _objc_msgSend_24(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> observer,
    ffi.Pointer<ObjCObject> keyPath,
    ffi.Pointer<ffi.Void> context,
  ) {
    return __objc_msgSend_24(
      obj,
      sel,
      observer,
      keyPath,
      context,
    );
  }

  late final __objc_msgSend_24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Void>)>>('objc_msgSend');
  late final __objc_msgSend_24 = __objc_msgSend_24Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ffi.Void>)>();

  late final _sel_removeObserver_forKeyPath_1 =
      _registerName1("removeObserver:forKeyPath:");
  late final _sel_willChangeValueForKey_1 =
      _registerName1("willChangeValueForKey:");
  late final _sel_didChangeValueForKey_1 =
      _registerName1("didChangeValueForKey:");
  late final _sel_willChange_valuesAtIndexes_forKey_1 =
      _registerName1("willChange:valuesAtIndexes:forKey:");
  void _objc_msgSend_25(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int changeKind,
    ffi.Pointer<ObjCObject> indexes,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_25(
      obj,
      sel,
      changeKind,
      indexes,
      key,
    );
  }

  late final __objc_msgSend_25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Int32,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_25 = __objc_msgSend_25Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  late final _sel_didChange_valuesAtIndexes_forKey_1 =
      _registerName1("didChange:valuesAtIndexes:forKey:");
  late final _sel_willChangeValueForKey_withSetMutation_usingObjects_1 =
      _registerName1("willChangeValueForKey:withSetMutation:usingObjects:");
  void _objc_msgSend_26(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> key,
    int mutationKind,
    ffi.Pointer<ObjCObject> objects,
  ) {
    return __objc_msgSend_26(
      obj,
      sel,
      key,
      mutationKind,
      objects,
    );
  }

  late final __objc_msgSend_26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_26 = __objc_msgSend_26Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int, ffi.Pointer<ObjCObject>)>();

  late final _sel_didChangeValueForKey_withSetMutation_usingObjects_1 =
      _registerName1("didChangeValueForKey:withSetMutation:usingObjects:");
  late final _sel_keyPathsForValuesAffectingValueForKey_1 =
      _registerName1("keyPathsForValuesAffectingValueForKey:");
  late final _sel_automaticallyNotifiesObserversForKey_1 =
      _registerName1("automaticallyNotifiesObserversForKey:");
  late final _sel_observationInfo1 = _registerName1("observationInfo");
  ffi.Pointer<ffi.Void> _objc_msgSend_27(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_27(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_27 = __objc_msgSend_27Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setObservationInfo_1 = _registerName1("setObservationInfo:");
  void _objc_msgSend_28(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Void> value,
  ) {
    return __objc_msgSend_28(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Void>)>>('objc_msgSend');
  late final __objc_msgSend_28 = __objc_msgSend_28Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Void>)>();

  late final _sel_setKeys_triggerChangeNotificationsForDependentKey_1 =
      _registerName1("setKeys:triggerChangeNotificationsForDependentKey:");
  late final _sel_classForKeyedArchiver1 =
      _registerName1("classForKeyedArchiver");
  late final _sel_replacementObjectForKeyedArchiver_1 =
      _registerName1("replacementObjectForKeyedArchiver:");
  late final _sel_classFallbacksForKeyedArchiver1 =
      _registerName1("classFallbacksForKeyedArchiver");
  late final _sel_classForKeyedUnarchiver1 =
      _registerName1("classForKeyedUnarchiver");
  late final _sel_performSelectorOnMainThread_withObject_waitUntilDone_modes_1 =
      _registerName1(
          "performSelectorOnMainThread:withObject:waitUntilDone:modes:");
  void _objc_msgSend_29(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> aSelector,
    ffi.Pointer<ObjCObject> arg,
    bool wait,
    ffi.Pointer<ObjCObject> array,
  ) {
    return __objc_msgSend_29(
      obj,
      sel,
      aSelector,
      arg,
      wait,
      array,
    );
  }

  late final __objc_msgSend_29Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Bool,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_29 = __objc_msgSend_29Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          bool,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_performSelectorOnMainThread_withObject_waitUntilDone_1 =
      _registerName1("performSelectorOnMainThread:withObject:waitUntilDone:");
  void _objc_msgSend_30(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> aSelector,
    ffi.Pointer<ObjCObject> arg,
    bool wait,
  ) {
    return __objc_msgSend_30(
      obj,
      sel,
      aSelector,
      arg,
      wait,
    );
  }

  late final __objc_msgSend_30Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_30 = __objc_msgSend_30Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>, bool)>();

  late final _sel_performSelector_onThread_withObject_waitUntilDone_modes_1 =
      _registerName1(
          "performSelector:onThread:withObject:waitUntilDone:modes:");
  void _objc_msgSend_31(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> aSelector,
    ffi.Pointer<ObjCObject> thr,
    ffi.Pointer<ObjCObject> arg,
    bool wait,
    ffi.Pointer<ObjCObject> array,
  ) {
    return __objc_msgSend_31(
      obj,
      sel,
      aSelector,
      thr,
      arg,
      wait,
      array,
    );
  }

  late final __objc_msgSend_31Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Bool,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_31 = __objc_msgSend_31Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          bool,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_performSelector_onThread_withObject_waitUntilDone_1 =
      _registerName1("performSelector:onThread:withObject:waitUntilDone:");
  void _objc_msgSend_32(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> aSelector,
    ffi.Pointer<ObjCObject> thr,
    ffi.Pointer<ObjCObject> arg,
    bool wait,
  ) {
    return __objc_msgSend_32(
      obj,
      sel,
      aSelector,
      thr,
      arg,
      wait,
    );
  }

  late final __objc_msgSend_32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_32 = __objc_msgSend_32Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          bool)>();

  late final _sel_performSelectorInBackground_withObject_1 =
      _registerName1("performSelectorInBackground:withObject:");
  void _objc_msgSend_33(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> aSelector,
    ffi.Pointer<ObjCObject> arg,
  ) {
    return __objc_msgSend_33(
      obj,
      sel,
      aSelector,
      arg,
    );
  }

  late final __objc_msgSend_33Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_33 = __objc_msgSend_33Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_classForArchiver1 = _registerName1("classForArchiver");
  late final _sel_replacementObjectForArchiver_1 =
      _registerName1("replacementObjectForArchiver:");
  late final _sel_classForPortCoder1 = _registerName1("classForPortCoder");
  late final _sel_replacementObjectForPortCoder_1 =
      _registerName1("replacementObjectForPortCoder:");
  late final _sel_classDescription1 = _registerName1("classDescription");
  late final _sel_attributeKeys1 = _registerName1("attributeKeys");
  late final _sel_toOneRelationshipKeys1 =
      _registerName1("toOneRelationshipKeys");
  late final _sel_toManyRelationshipKeys1 =
      _registerName1("toManyRelationshipKeys");
  late final _sel_inverseForRelationshipKey_1 =
      _registerName1("inverseForRelationshipKey:");
  late final _sel_scriptingValueForSpecifier_1 =
      _registerName1("scriptingValueForSpecifier:");
  late final _sel_scriptingProperties1 = _registerName1("scriptingProperties");
  late final _sel_setScriptingProperties_1 =
      _registerName1("setScriptingProperties:");
  void _objc_msgSend_34(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_34(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_34Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_34 = __objc_msgSend_34Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_copyScriptingValue_forKey_withProperties_1 =
      _registerName1("copyScriptingValue:forKey:withProperties:");
  ffi.Pointer<ObjCObject> _objc_msgSend_35(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
    ffi.Pointer<ObjCObject> key,
    ffi.Pointer<ObjCObject> properties,
  ) {
    return __objc_msgSend_35(
      obj,
      sel,
      value,
      key,
      properties,
    );
  }

  late final __objc_msgSend_35Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_35 = __objc_msgSend_35Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_newScriptingObjectOfClass_forValueForKey_withContentsValue_properties_1 =
      _registerName1(
          "newScriptingObjectOfClass:forValueForKey:withContentsValue:properties:");
  ffi.Pointer<ObjCObject> _objc_msgSend_36(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> objectClass,
    ffi.Pointer<ObjCObject> key,
    ffi.Pointer<ObjCObject> contentsValue,
    ffi.Pointer<ObjCObject> properties,
  ) {
    return __objc_msgSend_36(
      obj,
      sel,
      objectClass,
      key,
      contentsValue,
      properties,
    );
  }

  late final __objc_msgSend_36Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_36 = __objc_msgSend_36Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_classCode1 = _registerName1("classCode");
  int _objc_msgSend_37(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_37(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_37Ptr = _lookup<
      ffi.NativeFunction<
          FourCharCode Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_37 = __objc_msgSend_37Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_className1 = _registerName1("className");
  late final _sel_valueAtIndex_inPropertyWithKey_1 =
      _registerName1("valueAtIndex:inPropertyWithKey:");
  ffi.Pointer<ObjCObject> _objc_msgSend_38(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int index,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_38(
      obj,
      sel,
      index,
      key,
    );
  }

  late final __objc_msgSend_38Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              NSUInteger,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_38 = __objc_msgSend_38Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, int, ffi.Pointer<ObjCObject>)>();

  late final _sel_valueWithName_inPropertyWithKey_1 =
      _registerName1("valueWithName:inPropertyWithKey:");
  ffi.Pointer<ObjCObject> _objc_msgSend_39(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> name,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_39(
      obj,
      sel,
      name,
      key,
    );
  }

  late final __objc_msgSend_39Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_39 = __objc_msgSend_39Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_valueWithUniqueID_inPropertyWithKey_1 =
      _registerName1("valueWithUniqueID:inPropertyWithKey:");
  late final _sel_insertValue_atIndex_inPropertyWithKey_1 =
      _registerName1("insertValue:atIndex:inPropertyWithKey:");
  void _objc_msgSend_40(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
    int index,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_40(
      obj,
      sel,
      value,
      index,
      key,
    );
  }

  late final __objc_msgSend_40Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              NSUInteger,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_40 = __objc_msgSend_40Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int, ffi.Pointer<ObjCObject>)>();

  late final _sel_removeValueAtIndex_fromPropertyWithKey_1 =
      _registerName1("removeValueAtIndex:fromPropertyWithKey:");
  void _objc_msgSend_41(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int index,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_41(
      obj,
      sel,
      index,
      key,
    );
  }

  late final __objc_msgSend_41Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSUInteger, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_41 = __objc_msgSend_41Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_replaceValueAtIndex_inPropertyWithKey_withValue_1 =
      _registerName1("replaceValueAtIndex:inPropertyWithKey:withValue:");
  void _objc_msgSend_42(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int index,
    ffi.Pointer<ObjCObject> key,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_42(
      obj,
      sel,
      index,
      key,
      value,
    );
  }

  late final __objc_msgSend_42Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              NSUInteger,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_42 = __objc_msgSend_42Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  late final _sel_insertValue_inPropertyWithKey_1 =
      _registerName1("insertValue:inPropertyWithKey:");
  late final _sel_coerceValue_forKey_1 = _registerName1("coerceValue:forKey:");
  late final _sel_objectSpecifier1 = _registerName1("objectSpecifier");
  late final _sel_indicesOfObjectsByEvaluatingObjectSpecifier_1 =
      _registerName1("indicesOfObjectsByEvaluatingObjectSpecifier:");
  late final _sel_isEqualTo_1 = _registerName1("isEqualTo:");
  late final _sel_isLessThanOrEqualTo_1 =
      _registerName1("isLessThanOrEqualTo:");
  late final _sel_isLessThan_1 = _registerName1("isLessThan:");
  late final _sel_isGreaterThanOrEqualTo_1 =
      _registerName1("isGreaterThanOrEqualTo:");
  late final _sel_isGreaterThan_1 = _registerName1("isGreaterThan:");
  late final _sel_isNotEqualTo_1 = _registerName1("isNotEqualTo:");
  late final _sel_doesContain_1 = _registerName1("doesContain:");
  late final _sel_isLike_1 = _registerName1("isLike:");
  late final _sel_isCaseInsensitiveLike_1 =
      _registerName1("isCaseInsensitiveLike:");
  late final _sel_scriptingIsEqualTo_1 = _registerName1("scriptingIsEqualTo:");
  late final _sel_scriptingIsLessThanOrEqualTo_1 =
      _registerName1("scriptingIsLessThanOrEqualTo:");
  late final _sel_scriptingIsLessThan_1 =
      _registerName1("scriptingIsLessThan:");
  late final _sel_scriptingIsGreaterThanOrEqualTo_1 =
      _registerName1("scriptingIsGreaterThanOrEqualTo:");
  late final _sel_scriptingIsGreaterThan_1 =
      _registerName1("scriptingIsGreaterThan:");
  late final _sel_scriptingBeginsWith_1 =
      _registerName1("scriptingBeginsWith:");
  late final _sel_scriptingEndsWith_1 = _registerName1("scriptingEndsWith:");
  late final _sel_scriptingContains_1 = _registerName1("scriptingContains:");
  late final _sel_isKindOfClass_1 = _registerName1("isKindOfClass:");
  late final _class_NSEnumerator1 = _getClass1("NSEnumerator");
  late final _sel_nextObject1 = _registerName1("nextObject");
  late final _sel_allObjects1 = _registerName1("allObjects");
  late final _class_NSValue1 = _getClass1("NSValue");
  late final _sel_getValue_size_1 = _registerName1("getValue:size:");
  void _objc_msgSend_43(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Void> value,
    int size,
  ) {
    return __objc_msgSend_43(
      obj,
      sel,
      value,
      size,
    );
  }

  late final __objc_msgSend_43Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Void>, NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_43 = __objc_msgSend_43Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Void>, int)>();

  late final _sel_objCType1 = _registerName1("objCType");
  ffi.Pointer<ffi.Char> _objc_msgSend_44(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_44(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_44Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_44 = __objc_msgSend_44Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_initWithBytes_objCType_1 =
      _registerName1("initWithBytes:objCType:");
  instancetype _objc_msgSend_45(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Void> value,
    ffi.Pointer<ffi.Char> type,
  ) {
    return __objc_msgSend_45(
      obj,
      sel,
      value,
      type,
    );
  }

  late final __objc_msgSend_45Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>>('objc_msgSend');
  late final __objc_msgSend_45 = __objc_msgSend_45Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  late final _sel_initWithCoder_1 = _registerName1("initWithCoder:");
  late final _sel_valueWithBytes_objCType_1 =
      _registerName1("valueWithBytes:objCType:");
  late final _sel_value_withObjCType_1 = _registerName1("value:withObjCType:");
  late final _sel_valueWithNonretainedObject_1 =
      _registerName1("valueWithNonretainedObject:");
  late final _sel_nonretainedObjectValue1 =
      _registerName1("nonretainedObjectValue");
  late final _sel_valueWithPointer_1 = _registerName1("valueWithPointer:");
  ffi.Pointer<ObjCObject> _objc_msgSend_46(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Void> pointer,
  ) {
    return __objc_msgSend_46(
      obj,
      sel,
      pointer,
    );
  }

  late final __objc_msgSend_46Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ffi.Void>)>>('objc_msgSend');
  late final __objc_msgSend_46 = __objc_msgSend_46Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ffi.Void>)>();

  late final _sel_pointerValue1 = _registerName1("pointerValue");
  late final _sel_isEqualToValue_1 = _registerName1("isEqualToValue:");
  late final _sel_getValue_1 = _registerName1("getValue:");
  void _objc_msgSend_47(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Void> value,
  ) {
    return __objc_msgSend_47(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_47Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Void>)>>('objc_msgSend');
  late final __objc_msgSend_47 = __objc_msgSend_47Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Void>)>();

  late final _sel_valueWithRange_1 = _registerName1("valueWithRange:");
  ffi.Pointer<ObjCObject> _objc_msgSend_48(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange range,
  ) {
    return __objc_msgSend_48(
      obj,
      sel,
      range,
    );
  }

  late final __objc_msgSend_48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, NSRange)>>('objc_msgSend');
  late final __objc_msgSend_48 = __objc_msgSend_48Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSRange)>();

  late final _sel_rangeValue1 = _registerName1("rangeValue");
  NSRange _objc_msgSend_49(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_49(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_49Ptr = _lookup<
      ffi.NativeFunction<
          NSRange Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_49 = __objc_msgSend_49Ptr.asFunction<
      NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_valueWithPoint_1 = _registerName1("valueWithPoint:");
  ffi.Pointer<ObjCObject> _objc_msgSend_50(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSPoint point,
  ) {
    return __objc_msgSend_50(
      obj,
      sel,
      point,
    );
  }

  late final __objc_msgSend_50Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, NSPoint)>>('objc_msgSend');
  late final __objc_msgSend_50 = __objc_msgSend_50Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSPoint)>();

  late final _sel_valueWithSize_1 = _registerName1("valueWithSize:");
  ffi.Pointer<ObjCObject> _objc_msgSend_51(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSSize size,
  ) {
    return __objc_msgSend_51(
      obj,
      sel,
      size,
    );
  }

  late final __objc_msgSend_51Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, NSSize)>>('objc_msgSend');
  late final __objc_msgSend_51 = __objc_msgSend_51Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSSize)>();

  late final _sel_valueWithRect_1 = _registerName1("valueWithRect:");
  ffi.Pointer<ObjCObject> _objc_msgSend_52(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRect rect,
  ) {
    return __objc_msgSend_52(
      obj,
      sel,
      rect,
    );
  }

  late final __objc_msgSend_52Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, NSRect)>>('objc_msgSend');
  late final __objc_msgSend_52 = __objc_msgSend_52Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSRect)>();

  late final _sel_valueWithEdgeInsets_1 =
      _registerName1("valueWithEdgeInsets:");
  ffi.Pointer<ObjCObject> _objc_msgSend_53(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSEdgeInsets insets,
  ) {
    return __objc_msgSend_53(
      obj,
      sel,
      insets,
    );
  }

  late final __objc_msgSend_53Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, NSEdgeInsets)>>('objc_msgSend');
  late final __objc_msgSend_53 = __objc_msgSend_53Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSEdgeInsets)>();

  late final _sel_pointValue1 = _registerName1("pointValue");
  NSPoint _objc_msgSend_54(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_54(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_54Ptr = _lookup<
      ffi.NativeFunction<
          NSPoint Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_54 = __objc_msgSend_54Ptr.asFunction<
      NSPoint Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_sizeValue1 = _registerName1("sizeValue");
  NSSize _objc_msgSend_55(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_55(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_55Ptr = _lookup<
      ffi.NativeFunction<
          NSSize Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_55 = __objc_msgSend_55Ptr.asFunction<
      NSSize Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_rectValue1 = _registerName1("rectValue");
  NSRect _objc_msgSend_56(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_56(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_56Ptr = _lookup<
      ffi.NativeFunction<
          NSRect Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_56 = __objc_msgSend_56Ptr.asFunction<
      NSRect Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_edgeInsetsValue1 = _registerName1("edgeInsetsValue");
  NSEdgeInsets _objc_msgSend_57(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_57(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_57Ptr = _lookup<
      ffi.NativeFunction<
          NSEdgeInsets Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_57 = __objc_msgSend_57Ptr.asFunction<
      NSEdgeInsets Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _class_NSNumber1 = _getClass1("NSNumber");
  late final _sel_initWithChar_1 = _registerName1("initWithChar:");
  ffi.Pointer<ObjCObject> _objc_msgSend_58(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_58(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_58Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Char)>>('objc_msgSend');
  late final __objc_msgSend_58 = __objc_msgSend_58Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithUnsignedChar_1 =
      _registerName1("initWithUnsignedChar:");
  ffi.Pointer<ObjCObject> _objc_msgSend_59(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_59(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_59Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.UnsignedChar)>>('objc_msgSend');
  late final __objc_msgSend_59 = __objc_msgSend_59Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithShort_1 = _registerName1("initWithShort:");
  ffi.Pointer<ObjCObject> _objc_msgSend_60(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_60(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_60Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Short)>>('objc_msgSend');
  late final __objc_msgSend_60 = __objc_msgSend_60Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithUnsignedShort_1 =
      _registerName1("initWithUnsignedShort:");
  ffi.Pointer<ObjCObject> _objc_msgSend_61(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_61(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_61Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.UnsignedShort)>>('objc_msgSend');
  late final __objc_msgSend_61 = __objc_msgSend_61Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithInt_1 = _registerName1("initWithInt:");
  ffi.Pointer<ObjCObject> _objc_msgSend_62(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_62(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_62Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Int)>>('objc_msgSend');
  late final __objc_msgSend_62 = __objc_msgSend_62Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithUnsignedInt_1 =
      _registerName1("initWithUnsignedInt:");
  ffi.Pointer<ObjCObject> _objc_msgSend_63(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_63(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_63Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.UnsignedInt)>>('objc_msgSend');
  late final __objc_msgSend_63 = __objc_msgSend_63Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithLong_1 = _registerName1("initWithLong:");
  ffi.Pointer<ObjCObject> _objc_msgSend_64(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_64(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Long)>>('objc_msgSend');
  late final __objc_msgSend_64 = __objc_msgSend_64Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithUnsignedLong_1 =
      _registerName1("initWithUnsignedLong:");
  ffi.Pointer<ObjCObject> _objc_msgSend_65(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_65(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_65Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_65 = __objc_msgSend_65Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithLongLong_1 = _registerName1("initWithLongLong:");
  ffi.Pointer<ObjCObject> _objc_msgSend_66(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_66(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_66Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.LongLong)>>('objc_msgSend');
  late final __objc_msgSend_66 = __objc_msgSend_66Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithUnsignedLongLong_1 =
      _registerName1("initWithUnsignedLongLong:");
  ffi.Pointer<ObjCObject> _objc_msgSend_67(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_67(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_67Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.UnsignedLongLong)>>('objc_msgSend');
  late final __objc_msgSend_67 = __objc_msgSend_67Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithFloat_1 = _registerName1("initWithFloat:");
  ffi.Pointer<ObjCObject> _objc_msgSend_68(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    double value,
  ) {
    return __objc_msgSend_68(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_68Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Float)>>('objc_msgSend');
  late final __objc_msgSend_68 = __objc_msgSend_68Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, double)>();

  late final _sel_initWithDouble_1 = _registerName1("initWithDouble:");
  ffi.Pointer<ObjCObject> _objc_msgSend_69(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    double value,
  ) {
    return __objc_msgSend_69(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_69Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Double)>>('objc_msgSend');
  late final __objc_msgSend_69 = __objc_msgSend_69Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, double)>();

  late final _sel_initWithBool_1 = _registerName1("initWithBool:");
  ffi.Pointer<ObjCObject> _objc_msgSend_70(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    bool value,
  ) {
    return __objc_msgSend_70(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_70Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_70 = __objc_msgSend_70Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, bool)>();

  late final _sel_initWithInteger_1 = _registerName1("initWithInteger:");
  late final _sel_initWithUnsignedInteger_1 =
      _registerName1("initWithUnsignedInteger:");
  late final _sel_charValue1 = _registerName1("charValue");
  int _objc_msgSend_71(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_71(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_71Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Char Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_71 = __objc_msgSend_71Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_unsignedCharValue1 = _registerName1("unsignedCharValue");
  int _objc_msgSend_72(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_72(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_72Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedChar Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_72 = __objc_msgSend_72Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_shortValue1 = _registerName1("shortValue");
  int _objc_msgSend_73(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_73(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_73Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Short Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_73 = __objc_msgSend_73Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_unsignedShortValue1 = _registerName1("unsignedShortValue");
  int _objc_msgSend_74(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_74(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_74Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedShort Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_74 = __objc_msgSend_74Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_intValue1 = _registerName1("intValue");
  int _objc_msgSend_75(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_75(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_75Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_75 = __objc_msgSend_75Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_unsignedIntValue1 = _registerName1("unsignedIntValue");
  late final _sel_longValue1 = _registerName1("longValue");
  late final _sel_unsignedLongValue1 = _registerName1("unsignedLongValue");
  late final _sel_longLongValue1 = _registerName1("longLongValue");
  int _objc_msgSend_76(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_76(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_76Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_76 = __objc_msgSend_76Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_unsignedLongLongValue1 =
      _registerName1("unsignedLongLongValue");
  int _objc_msgSend_77(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_77(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_77Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_77 = __objc_msgSend_77Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_floatValue1 = _registerName1("floatValue");
  double _objc_msgSend_78(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_78(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_78Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_78 = __objc_msgSend_78Ptr.asFunction<
      double Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_doubleValue1 = _registerName1("doubleValue");
  double _objc_msgSend_79(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_79(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_79Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_79 = __objc_msgSend_79Ptr.asFunction<
      double Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_boolValue1 = _registerName1("boolValue");
  late final _sel_integerValue1 = _registerName1("integerValue");
  late final _sel_unsignedIntegerValue1 =
      _registerName1("unsignedIntegerValue");
  late final _sel_stringValue1 = _registerName1("stringValue");
  late final _sel_compare_1 = _registerName1("compare:");
  int _objc_msgSend_80(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> otherNumber,
  ) {
    return __objc_msgSend_80(
      obj,
      sel,
      otherNumber,
    );
  }

  late final __objc_msgSend_80Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_80 = __objc_msgSend_80Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_isEqualToNumber_1 = _registerName1("isEqualToNumber:");
  late final _sel_descriptionWithLocale_1 =
      _registerName1("descriptionWithLocale:");
  late final _sel_numberWithChar_1 = _registerName1("numberWithChar:");
  late final _sel_numberWithUnsignedChar_1 =
      _registerName1("numberWithUnsignedChar:");
  late final _sel_numberWithShort_1 = _registerName1("numberWithShort:");
  late final _sel_numberWithUnsignedShort_1 =
      _registerName1("numberWithUnsignedShort:");
  late final _sel_numberWithInt_1 = _registerName1("numberWithInt:");
  late final _sel_numberWithUnsignedInt_1 =
      _registerName1("numberWithUnsignedInt:");
  late final _sel_numberWithLong_1 = _registerName1("numberWithLong:");
  late final _sel_numberWithUnsignedLong_1 =
      _registerName1("numberWithUnsignedLong:");
  late final _sel_numberWithLongLong_1 = _registerName1("numberWithLongLong:");
  late final _sel_numberWithUnsignedLongLong_1 =
      _registerName1("numberWithUnsignedLongLong:");
  late final _sel_numberWithFloat_1 = _registerName1("numberWithFloat:");
  late final _sel_numberWithDouble_1 = _registerName1("numberWithDouble:");
  late final _sel_numberWithBool_1 = _registerName1("numberWithBool:");
  late final _sel_numberWithInteger_1 = _registerName1("numberWithInteger:");
  late final _sel_numberWithUnsignedInteger_1 =
      _registerName1("numberWithUnsignedInteger:");
  late final _sel_decimalValue1 = _registerName1("decimalValue");
  NSDecimal _objc_msgSend_81(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_81(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_81Ptr = _lookup<
      ffi.NativeFunction<
          NSDecimal Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_81 = __objc_msgSend_81Ptr.asFunction<
      NSDecimal Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _class_NSArray1 = _getClass1("NSArray");
  late final _sel_count1 = _registerName1("count");
  late final _sel_objectAtIndex_1 = _registerName1("objectAtIndex:");
  late final _sel_initWithObjects_count_1 =
      _registerName1("initWithObjects:count:");
  instancetype _objc_msgSend_82(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
    int cnt,
  ) {
    return __objc_msgSend_82(
      obj,
      sel,
      objects,
      cnt,
    );
  }

  late final __objc_msgSend_82Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>,
              NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_82 = __objc_msgSend_82Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>, int)>();

  late final _sel_arrayByAddingObject_1 =
      _registerName1("arrayByAddingObject:");
  late final _sel_arrayByAddingObjectsFromArray_1 =
      _registerName1("arrayByAddingObjectsFromArray:");
  late final _sel_componentsJoinedByString_1 =
      _registerName1("componentsJoinedByString:");
  late final _sel_containsObject_1 = _registerName1("containsObject:");
  late final _sel_descriptionWithLocale_indent_1 =
      _registerName1("descriptionWithLocale:indent:");
  ffi.Pointer<ObjCObject> _objc_msgSend_83(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> locale,
    int level,
  ) {
    return __objc_msgSend_83(
      obj,
      sel,
      locale,
      level,
    );
  }

  late final __objc_msgSend_83Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_83 = __objc_msgSend_83Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>, int)>();

  late final _sel_firstObjectCommonWithArray_1 =
      _registerName1("firstObjectCommonWithArray:");
  late final _sel_getObjects_range_1 = _registerName1("getObjects:range:");
  void _objc_msgSend_84(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
    NSRange range,
  ) {
    return __objc_msgSend_84(
      obj,
      sel,
      objects,
      range,
    );
  }

  late final __objc_msgSend_84Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>, NSRange)>>('objc_msgSend');
  late final __objc_msgSend_84 = __objc_msgSend_84Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>, NSRange)>();

  late final _sel_indexOfObject_1 = _registerName1("indexOfObject:");
  int _objc_msgSend_85(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> anObject,
  ) {
    return __objc_msgSend_85(
      obj,
      sel,
      anObject,
    );
  }

  late final __objc_msgSend_85Ptr = _lookup<
      ffi.NativeFunction<
          NSUInteger Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_85 = __objc_msgSend_85Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_indexOfObject_inRange_1 =
      _registerName1("indexOfObject:inRange:");
  int _objc_msgSend_86(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> anObject,
    NSRange range,
  ) {
    return __objc_msgSend_86(
      obj,
      sel,
      anObject,
      range,
    );
  }

  late final __objc_msgSend_86Ptr = _lookup<
      ffi.NativeFunction<
          NSUInteger Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, NSRange)>>('objc_msgSend');
  late final __objc_msgSend_86 = __objc_msgSend_86Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, NSRange)>();

  late final _sel_indexOfObjectIdenticalTo_1 =
      _registerName1("indexOfObjectIdenticalTo:");
  late final _sel_indexOfObjectIdenticalTo_inRange_1 =
      _registerName1("indexOfObjectIdenticalTo:inRange:");
  late final _sel_isEqualToArray_1 = _registerName1("isEqualToArray:");
  late final _sel_firstObject1 = _registerName1("firstObject");
  late final _sel_lastObject1 = _registerName1("lastObject");
  late final _sel_objectEnumerator1 = _registerName1("objectEnumerator");
  late final _sel_reverseObjectEnumerator1 =
      _registerName1("reverseObjectEnumerator");
  late final _sel_sortedArrayHint1 = _registerName1("sortedArrayHint");
  late final _sel_sortedArrayUsingFunction_context_1 =
      _registerName1("sortedArrayUsingFunction:context:");
  ffi.Pointer<ObjCObject> _objc_msgSend_87(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<
            ffi.NativeFunction<
                NSInteger Function(ffi.Pointer<ObjCObject>,
                    ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Void>)>>
        comparator,
    ffi.Pointer<ffi.Void> context,
  ) {
    return __objc_msgSend_87(
      obj,
      sel,
      comparator,
      context,
    );
  }

  late final __objc_msgSend_87Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      NSInteger Function(ffi.Pointer<ObjCObject>,
                          ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('objc_msgSend');
  late final __objc_msgSend_87 = __objc_msgSend_87Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<
              ffi.NativeFunction<
                  NSInteger Function(ffi.Pointer<ObjCObject>,
                      ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  late final _sel_sortedArrayUsingFunction_context_hint_1 =
      _registerName1("sortedArrayUsingFunction:context:hint:");
  ffi.Pointer<ObjCObject> _objc_msgSend_88(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<
            ffi.NativeFunction<
                NSInteger Function(ffi.Pointer<ObjCObject>,
                    ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Void>)>>
        comparator,
    ffi.Pointer<ffi.Void> context,
    ffi.Pointer<ObjCObject> hint,
  ) {
    return __objc_msgSend_88(
      obj,
      sel,
      comparator,
      context,
      hint,
    );
  }

  late final __objc_msgSend_88Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      NSInteger Function(ffi.Pointer<ObjCObject>,
                          ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_88 = __objc_msgSend_88Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<
              ffi.NativeFunction<
                  NSInteger Function(ffi.Pointer<ObjCObject>,
                      ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_sortedArrayUsingSelector_1 =
      _registerName1("sortedArrayUsingSelector:");
  late final _sel_subarrayWithRange_1 = _registerName1("subarrayWithRange:");
  late final _sel_writeToURL_error_1 = _registerName1("writeToURL:error:");
  bool _objc_msgSend_89(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_89(
      obj,
      sel,
      url,
      error,
    );
  }

  late final __objc_msgSend_89Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_89 = __objc_msgSend_89Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_makeObjectsPerformSelector_1 =
      _registerName1("makeObjectsPerformSelector:");
  late final _sel_makeObjectsPerformSelector_withObject_1 =
      _registerName1("makeObjectsPerformSelector:withObject:");
  late final _sel_objectsAtIndexes_1 = _registerName1("objectsAtIndexes:");
  late final _sel_objectAtIndexedSubscript_1 =
      _registerName1("objectAtIndexedSubscript:");
  ffi.Pointer<_ObjCBlockDesc> _newBlockDesc1() {
    final d =
        pkg_ffi.calloc.allocate<_ObjCBlockDesc>(ffi.sizeOf<_ObjCBlockDesc>());
    d.ref.size = ffi.sizeOf<_ObjCBlock>();
    return d;
  }

  late final _objc_block_desc1 = _newBlockDesc1();
  late final _objc_concrete_global_block1 =
      _lookup<ffi.Void>('_NSConcreteGlobalBlock');
  ffi.Pointer<_ObjCBlock> _newBlock1(
      ffi.Pointer<ffi.Void> invoke, ffi.Pointer<ffi.Void> target) {
    final b = pkg_ffi.calloc.allocate<_ObjCBlock>(ffi.sizeOf<_ObjCBlock>());
    b.ref.isa = _objc_concrete_global_block1;
    b.ref.invoke = invoke;
    b.ref.target = target;
    b.ref.descriptor = _objc_block_desc1;
    return b;
  }

  late final _sel_enumerateObjectsUsingBlock_1 =
      _registerName1("enumerateObjectsUsingBlock:");
  void _objc_msgSend_90(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_90(
      obj,
      sel,
      block,
    );
  }

  late final __objc_msgSend_90Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_90 = __objc_msgSend_90Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_enumerateObjectsWithOptions_usingBlock_1 =
      _registerName1("enumerateObjectsWithOptions:usingBlock:");
  void _objc_msgSend_91(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int opts,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_91(
      obj,
      sel,
      opts,
      block,
    );
  }

  late final __objc_msgSend_91Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_91 = __objc_msgSend_91Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_enumerateObjectsAtIndexes_options_usingBlock_1 =
      _registerName1("enumerateObjectsAtIndexes:options:usingBlock:");
  void _objc_msgSend_92(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> s,
    int opts,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_92(
      obj,
      sel,
      s,
      opts,
      block,
    );
  }

  late final __objc_msgSend_92Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_92 = __objc_msgSend_92Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_indexOfObjectPassingTest_1 =
      _registerName1("indexOfObjectPassingTest:");
  int _objc_msgSend_93(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_93(
      obj,
      sel,
      predicate,
    );
  }

  late final __objc_msgSend_93Ptr = _lookup<
      ffi.NativeFunction<
          NSUInteger Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_93 = __objc_msgSend_93Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_indexOfObjectWithOptions_passingTest_1 =
      _registerName1("indexOfObjectWithOptions:passingTest:");
  int _objc_msgSend_94(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int opts,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_94(
      obj,
      sel,
      opts,
      predicate,
    );
  }

  late final __objc_msgSend_94Ptr = _lookup<
      ffi.NativeFunction<
          NSUInteger Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_94 = __objc_msgSend_94Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_indexOfObjectAtIndexes_options_passingTest_1 =
      _registerName1("indexOfObjectAtIndexes:options:passingTest:");
  int _objc_msgSend_95(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> s,
    int opts,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_95(
      obj,
      sel,
      s,
      opts,
      predicate,
    );
  }

  late final __objc_msgSend_95Ptr = _lookup<
      ffi.NativeFunction<
          NSUInteger Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_95 = __objc_msgSend_95Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_indexesOfObjectsPassingTest_1 =
      _registerName1("indexesOfObjectsPassingTest:");
  ffi.Pointer<ObjCObject> _objc_msgSend_96(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_96(
      obj,
      sel,
      predicate,
    );
  }

  late final __objc_msgSend_96Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_96 = __objc_msgSend_96Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_indexesOfObjectsWithOptions_passingTest_1 =
      _registerName1("indexesOfObjectsWithOptions:passingTest:");
  ffi.Pointer<ObjCObject> _objc_msgSend_97(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int opts,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_97(
      obj,
      sel,
      opts,
      predicate,
    );
  }

  late final __objc_msgSend_97Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_97 = __objc_msgSend_97Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, int, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_indexesOfObjectsAtIndexes_options_passingTest_1 =
      _registerName1("indexesOfObjectsAtIndexes:options:passingTest:");
  ffi.Pointer<ObjCObject> _objc_msgSend_98(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> s,
    int opts,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_98(
      obj,
      sel,
      s,
      opts,
      predicate,
    );
  }

  late final __objc_msgSend_98Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_98 = __objc_msgSend_98Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          int,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_sortedArrayUsingComparator_1 =
      _registerName1("sortedArrayUsingComparator:");
  ffi.Pointer<ObjCObject> _objc_msgSend_99(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSComparator cmptr,
  ) {
    return __objc_msgSend_99(
      obj,
      sel,
      cmptr,
    );
  }

  late final __objc_msgSend_99Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, NSComparator)>>('objc_msgSend');
  late final __objc_msgSend_99 = __objc_msgSend_99Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSComparator)>();

  late final _sel_sortedArrayWithOptions_usingComparator_1 =
      _registerName1("sortedArrayWithOptions:usingComparator:");
  ffi.Pointer<ObjCObject> _objc_msgSend_100(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int opts,
    NSComparator cmptr,
  ) {
    return __objc_msgSend_100(
      obj,
      sel,
      opts,
      cmptr,
    );
  }

  late final __objc_msgSend_100Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Int32, NSComparator)>>('objc_msgSend');
  late final __objc_msgSend_100 = __objc_msgSend_100Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int, NSComparator)>();

  late final _sel_indexOfObject_inSortedRange_options_usingComparator_1 =
      _registerName1("indexOfObject:inSortedRange:options:usingComparator:");
  int _objc_msgSend_101(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> obj1,
    NSRange r,
    int opts,
    NSComparator cmp,
  ) {
    return __objc_msgSend_101(
      obj,
      sel,
      obj1,
      r,
      opts,
      cmp,
    );
  }

  late final __objc_msgSend_101Ptr = _lookup<
      ffi.NativeFunction<
          NSUInteger Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              NSRange,
              ffi.Int32,
              NSComparator)>>('objc_msgSend');
  late final __objc_msgSend_101 = __objc_msgSend_101Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, NSRange, int, NSComparator)>();

  late final _sel_array1 = _registerName1("array");
  late final _sel_arrayWithObject_1 = _registerName1("arrayWithObject:");
  late final _sel_arrayWithObjects_count_1 =
      _registerName1("arrayWithObjects:count:");
  late final _sel_arrayWithObjects_1 = _registerName1("arrayWithObjects:");
  late final _sel_arrayWithArray_1 = _registerName1("arrayWithArray:");
  late final _sel_initWithObjects_1 = _registerName1("initWithObjects:");
  late final _sel_initWithArray_1 = _registerName1("initWithArray:");
  late final _sel_initWithArray_copyItems_1 =
      _registerName1("initWithArray:copyItems:");
  instancetype _objc_msgSend_102(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> array,
    bool flag,
  ) {
    return __objc_msgSend_102(
      obj,
      sel,
      array,
      flag,
    );
  }

  late final __objc_msgSend_102Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_102 = __objc_msgSend_102Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, bool)>();

  late final _sel_initWithContentsOfURL_error_1 =
      _registerName1("initWithContentsOfURL:error:");
  ffi.Pointer<ObjCObject> _objc_msgSend_103(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_103(
      obj,
      sel,
      url,
      error,
    );
  }

  late final __objc_msgSend_103Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_103 = __objc_msgSend_103Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_arrayWithContentsOfURL_error_1 =
      _registerName1("arrayWithContentsOfURL:error:");
  late final _sel_differenceFromArray_withOptions_usingEquivalenceTest_1 =
      _registerName1("differenceFromArray:withOptions:usingEquivalenceTest:");
  ffi.Pointer<ObjCObject> _objc_msgSend_104(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> other,
    int options,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_104(
      obj,
      sel,
      other,
      options,
      block,
    );
  }

  late final __objc_msgSend_104Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_104 = __objc_msgSend_104Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          int,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_differenceFromArray_withOptions_1 =
      _registerName1("differenceFromArray:withOptions:");
  ffi.Pointer<ObjCObject> _objc_msgSend_105(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> other,
    int options,
  ) {
    return __objc_msgSend_105(
      obj,
      sel,
      other,
      options,
    );
  }

  late final __objc_msgSend_105Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_105 = __objc_msgSend_105Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>, int)>();

  late final _sel_differenceFromArray_1 =
      _registerName1("differenceFromArray:");
  late final _sel_arrayByApplyingDifference_1 =
      _registerName1("arrayByApplyingDifference:");
  late final _sel_getObjects_1 = _registerName1("getObjects:");
  void _objc_msgSend_106(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
  ) {
    return __objc_msgSend_106(
      obj,
      sel,
      objects,
    );
  }

  late final __objc_msgSend_106Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_106 = __objc_msgSend_106Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_arrayWithContentsOfFile_1 =
      _registerName1("arrayWithContentsOfFile:");
  late final _sel_arrayWithContentsOfURL_1 =
      _registerName1("arrayWithContentsOfURL:");
  late final _sel_initWithContentsOfFile_1 =
      _registerName1("initWithContentsOfFile:");
  late final _sel_initWithContentsOfURL_1 =
      _registerName1("initWithContentsOfURL:");
  late final _sel_writeToFile_atomically_1 =
      _registerName1("writeToFile:atomically:");
  bool _objc_msgSend_107(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> path,
    bool useAuxiliaryFile,
  ) {
    return __objc_msgSend_107(
      obj,
      sel,
      path,
      useAuxiliaryFile,
    );
  }

  late final __objc_msgSend_107Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_107 = __objc_msgSend_107Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, bool)>();

  late final _sel_writeToURL_atomically_1 =
      _registerName1("writeToURL:atomically:");
  late final _sel_pathsMatchingExtensions_1 =
      _registerName1("pathsMatchingExtensions:");
  late final _sel_addObserver_toObjectsAtIndexes_forKeyPath_options_context_1 =
      _registerName1(
          "addObserver:toObjectsAtIndexes:forKeyPath:options:context:");
  void _objc_msgSend_108(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> observer,
    ffi.Pointer<ObjCObject> indexes,
    ffi.Pointer<ObjCObject> keyPath,
    int options,
    ffi.Pointer<ffi.Void> context,
  ) {
    return __objc_msgSend_108(
      obj,
      sel,
      observer,
      indexes,
      keyPath,
      options,
      context,
    );
  }

  late final __objc_msgSend_108Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>)>>('objc_msgSend');
  late final __objc_msgSend_108 = __objc_msgSend_108Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          int,
          ffi.Pointer<ffi.Void>)>();

  late final _sel_removeObserver_fromObjectsAtIndexes_forKeyPath_context_1 =
      _registerName1("removeObserver:fromObjectsAtIndexes:forKeyPath:context:");
  late final _sel_removeObserver_fromObjectsAtIndexes_forKeyPath_1 =
      _registerName1("removeObserver:fromObjectsAtIndexes:forKeyPath:");
  void _objc_msgSend_109(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> observer,
    ffi.Pointer<ObjCObject> indexes,
    ffi.Pointer<ObjCObject> keyPath,
  ) {
    return __objc_msgSend_109(
      obj,
      sel,
      observer,
      indexes,
      keyPath,
    );
  }

  late final __objc_msgSend_109Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_109 = __objc_msgSend_109Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_sortedArrayUsingDescriptors_1 =
      _registerName1("sortedArrayUsingDescriptors:");
  late final _sel_filteredArrayUsingPredicate_1 =
      _registerName1("filteredArrayUsingPredicate:");
  late final _class_NSMutableArray1 = _getClass1("NSMutableArray");
  late final _sel_addObject_1 = _registerName1("addObject:");
  late final _sel_insertObject_atIndex_1 =
      _registerName1("insertObject:atIndex:");
  void _objc_msgSend_110(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> anObject,
    int index,
  ) {
    return __objc_msgSend_110(
      obj,
      sel,
      anObject,
      index,
    );
  }

  late final __objc_msgSend_110Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_110 = __objc_msgSend_110Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int)>();

  late final _sel_removeLastObject1 = _registerName1("removeLastObject");
  late final _sel_removeObjectAtIndex_1 =
      _registerName1("removeObjectAtIndex:");
  void _objc_msgSend_111(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int index,
  ) {
    return __objc_msgSend_111(
      obj,
      sel,
      index,
    );
  }

  late final __objc_msgSend_111Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_111 = __objc_msgSend_111Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_replaceObjectAtIndex_withObject_1 =
      _registerName1("replaceObjectAtIndex:withObject:");
  late final _sel_initWithCapacity_1 = _registerName1("initWithCapacity:");
  late final _sel_addObjectsFromArray_1 =
      _registerName1("addObjectsFromArray:");
  late final _sel_exchangeObjectAtIndex_withObjectAtIndex_1 =
      _registerName1("exchangeObjectAtIndex:withObjectAtIndex:");
  void _objc_msgSend_112(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int idx1,
    int idx2,
  ) {
    return __objc_msgSend_112(
      obj,
      sel,
      idx1,
      idx2,
    );
  }

  late final __objc_msgSend_112Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSUInteger, NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_112 = __objc_msgSend_112Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int, int)>();

  late final _sel_removeAllObjects1 = _registerName1("removeAllObjects");
  late final _sel_removeObject_inRange_1 =
      _registerName1("removeObject:inRange:");
  void _objc_msgSend_113(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> anObject,
    NSRange range,
  ) {
    return __objc_msgSend_113(
      obj,
      sel,
      anObject,
      range,
    );
  }

  late final __objc_msgSend_113Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, NSRange)>>('objc_msgSend');
  late final __objc_msgSend_113 = __objc_msgSend_113Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, NSRange)>();

  late final _sel_removeObject_1 = _registerName1("removeObject:");
  late final _sel_removeObjectIdenticalTo_inRange_1 =
      _registerName1("removeObjectIdenticalTo:inRange:");
  late final _sel_removeObjectIdenticalTo_1 =
      _registerName1("removeObjectIdenticalTo:");
  late final _sel_removeObjectsFromIndices_numIndices_1 =
      _registerName1("removeObjectsFromIndices:numIndices:");
  void _objc_msgSend_114(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<NSUInteger> indices,
    int cnt,
  ) {
    return __objc_msgSend_114(
      obj,
      sel,
      indices,
      cnt,
    );
  }

  late final __objc_msgSend_114Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<NSUInteger>, NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_114 = __objc_msgSend_114Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<NSUInteger>, int)>();

  late final _sel_removeObjectsInArray_1 =
      _registerName1("removeObjectsInArray:");
  late final _sel_removeObjectsInRange_1 =
      _registerName1("removeObjectsInRange:");
  void _objc_msgSend_115(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange range,
  ) {
    return __objc_msgSend_115(
      obj,
      sel,
      range,
    );
  }

  late final __objc_msgSend_115Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSRange)>>('objc_msgSend');
  late final __objc_msgSend_115 = __objc_msgSend_115Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSRange)>();

  late final _sel_replaceObjectsInRange_withObjectsFromArray_range_1 =
      _registerName1("replaceObjectsInRange:withObjectsFromArray:range:");
  void _objc_msgSend_116(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange range,
    ffi.Pointer<ObjCObject> otherArray,
    NSRange otherRange,
  ) {
    return __objc_msgSend_116(
      obj,
      sel,
      range,
      otherArray,
      otherRange,
    );
  }

  late final __objc_msgSend_116Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSRange, ffi.Pointer<ObjCObject>, NSRange)>>('objc_msgSend');
  late final __objc_msgSend_116 = __objc_msgSend_116Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSRange,
          ffi.Pointer<ObjCObject>, NSRange)>();

  late final _sel_replaceObjectsInRange_withObjectsFromArray_1 =
      _registerName1("replaceObjectsInRange:withObjectsFromArray:");
  void _objc_msgSend_117(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange range,
    ffi.Pointer<ObjCObject> otherArray,
  ) {
    return __objc_msgSend_117(
      obj,
      sel,
      range,
      otherArray,
    );
  }

  late final __objc_msgSend_117Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSRange, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_117 = __objc_msgSend_117Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSRange,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_setArray_1 = _registerName1("setArray:");
  late final _sel_sortUsingFunction_context_1 =
      _registerName1("sortUsingFunction:context:");
  void _objc_msgSend_118(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<
            ffi.NativeFunction<
                NSInteger Function(ffi.Pointer<ObjCObject>,
                    ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Void>)>>
        compare,
    ffi.Pointer<ffi.Void> context,
  ) {
    return __objc_msgSend_118(
      obj,
      sel,
      compare,
      context,
    );
  }

  late final __objc_msgSend_118Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      NSInteger Function(ffi.Pointer<ObjCObject>,
                          ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('objc_msgSend');
  late final __objc_msgSend_118 = __objc_msgSend_118Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<
              ffi.NativeFunction<
                  NSInteger Function(ffi.Pointer<ObjCObject>,
                      ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  late final _sel_sortUsingSelector_1 = _registerName1("sortUsingSelector:");
  late final _sel_insertObjects_atIndexes_1 =
      _registerName1("insertObjects:atIndexes:");
  late final _sel_removeObjectsAtIndexes_1 =
      _registerName1("removeObjectsAtIndexes:");
  late final _sel_replaceObjectsAtIndexes_withObjects_1 =
      _registerName1("replaceObjectsAtIndexes:withObjects:");
  late final _sel_setObject_atIndexedSubscript_1 =
      _registerName1("setObject:atIndexedSubscript:");
  late final _sel_sortUsingComparator_1 =
      _registerName1("sortUsingComparator:");
  void _objc_msgSend_119(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSComparator cmptr,
  ) {
    return __objc_msgSend_119(
      obj,
      sel,
      cmptr,
    );
  }

  late final __objc_msgSend_119Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSComparator)>>('objc_msgSend');
  late final __objc_msgSend_119 = __objc_msgSend_119Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSComparator)>();

  late final _sel_sortWithOptions_usingComparator_1 =
      _registerName1("sortWithOptions:usingComparator:");
  void _objc_msgSend_120(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int opts,
    NSComparator cmptr,
  ) {
    return __objc_msgSend_120(
      obj,
      sel,
      opts,
      cmptr,
    );
  }

  late final __objc_msgSend_120Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32, NSComparator)>>('objc_msgSend');
  late final __objc_msgSend_120 = __objc_msgSend_120Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int, NSComparator)>();

  late final _sel_arrayWithCapacity_1 = _registerName1("arrayWithCapacity:");
  late final _sel_applyDifference_1 = _registerName1("applyDifference:");
  late final _sel_sortUsingDescriptors_1 =
      _registerName1("sortUsingDescriptors:");
  late final _sel_filterUsingPredicate_1 =
      _registerName1("filterUsingPredicate:");
  late final _class_NSItemProvider1 = _getClass1("NSItemProvider");
  late final _sel_registerDataRepresentationForTypeIdentifier_visibility_loadHandler_1 =
      _registerName1(
          "registerDataRepresentationForTypeIdentifier:visibility:loadHandler:");
  void _objc_msgSend_121(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> typeIdentifier,
    int visibility,
    ffi.Pointer<_ObjCBlock> loadHandler,
  ) {
    return __objc_msgSend_121(
      obj,
      sel,
      typeIdentifier,
      visibility,
      loadHandler,
    );
  }

  late final __objc_msgSend_121Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_121 = __objc_msgSend_121Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_registerFileRepresentationForTypeIdentifier_fileOptions_visibility_loadHandler_1 =
      _registerName1(
          "registerFileRepresentationForTypeIdentifier:fileOptions:visibility:loadHandler:");
  void _objc_msgSend_122(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> typeIdentifier,
    int fileOptions,
    int visibility,
    ffi.Pointer<_ObjCBlock> loadHandler,
  ) {
    return __objc_msgSend_122(
      obj,
      sel,
      typeIdentifier,
      fileOptions,
      visibility,
      loadHandler,
    );
  }

  late final __objc_msgSend_122Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_122 = __objc_msgSend_122Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int, int, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_registeredTypeIdentifiers1 =
      _registerName1("registeredTypeIdentifiers");
  late final _sel_registeredTypeIdentifiersWithFileOptions_1 =
      _registerName1("registeredTypeIdentifiersWithFileOptions:");
  ffi.Pointer<ObjCObject> _objc_msgSend_123(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int fileOptions,
  ) {
    return __objc_msgSend_123(
      obj,
      sel,
      fileOptions,
    );
  }

  late final __objc_msgSend_123Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_123 = __objc_msgSend_123Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_hasItemConformingToTypeIdentifier_1 =
      _registerName1("hasItemConformingToTypeIdentifier:");
  late final _sel_hasRepresentationConformingToTypeIdentifier_fileOptions_1 =
      _registerName1(
          "hasRepresentationConformingToTypeIdentifier:fileOptions:");
  bool _objc_msgSend_124(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> typeIdentifier,
    int fileOptions,
  ) {
    return __objc_msgSend_124(
      obj,
      sel,
      typeIdentifier,
      fileOptions,
    );
  }

  late final __objc_msgSend_124Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_124 = __objc_msgSend_124Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int)>();

  late final _sel_loadDataRepresentationForTypeIdentifier_completionHandler_1 =
      _registerName1(
          "loadDataRepresentationForTypeIdentifier:completionHandler:");
  ffi.Pointer<ObjCObject> _objc_msgSend_125(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> typeIdentifier,
    ffi.Pointer<_ObjCBlock> completionHandler,
  ) {
    return __objc_msgSend_125(
      obj,
      sel,
      typeIdentifier,
      completionHandler,
    );
  }

  late final __objc_msgSend_125Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_125 = __objc_msgSend_125Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_loadFileRepresentationForTypeIdentifier_completionHandler_1 =
      _registerName1(
          "loadFileRepresentationForTypeIdentifier:completionHandler:");
  late final _sel_loadInPlaceFileRepresentationForTypeIdentifier_completionHandler_1 =
      _registerName1(
          "loadInPlaceFileRepresentationForTypeIdentifier:completionHandler:");
  ffi.Pointer<ObjCObject> _objc_msgSend_126(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> typeIdentifier,
    ffi.Pointer<_ObjCBlock> completionHandler,
  ) {
    return __objc_msgSend_126(
      obj,
      sel,
      typeIdentifier,
      completionHandler,
    );
  }

  late final __objc_msgSend_126Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_126 = __objc_msgSend_126Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_suggestedName1 = _registerName1("suggestedName");
  late final _sel_setSuggestedName_1 = _registerName1("setSuggestedName:");
  late final _sel_initWithObject_1 = _registerName1("initWithObject:");
  late final _sel_registerObject_visibility_1 =
      _registerName1("registerObject:visibility:");
  void _objc_msgSend_127(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> object,
    int visibility,
  ) {
    return __objc_msgSend_127(
      obj,
      sel,
      object,
      visibility,
    );
  }

  late final __objc_msgSend_127Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_127 = __objc_msgSend_127Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int)>();

  late final _sel_registerObjectOfClass_visibility_loadHandler_1 =
      _registerName1("registerObjectOfClass:visibility:loadHandler:");
  late final _sel_canLoadObjectOfClass_1 =
      _registerName1("canLoadObjectOfClass:");
  late final _sel_loadObjectOfClass_completionHandler_1 =
      _registerName1("loadObjectOfClass:completionHandler:");
  late final _sel_initWithItem_typeIdentifier_1 =
      _registerName1("initWithItem:typeIdentifier:");
  late final _sel_registerItemForTypeIdentifier_loadHandler_1 =
      _registerName1("registerItemForTypeIdentifier:loadHandler:");
  void _objc_msgSend_128(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> typeIdentifier,
    NSItemProviderLoadHandler loadHandler,
  ) {
    return __objc_msgSend_128(
      obj,
      sel,
      typeIdentifier,
      loadHandler,
    );
  }

  late final __objc_msgSend_128Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              NSItemProviderLoadHandler)>>('objc_msgSend');
  late final __objc_msgSend_128 = __objc_msgSend_128Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, NSItemProviderLoadHandler)>();

  late final _sel_loadItemForTypeIdentifier_options_completionHandler_1 =
      _registerName1("loadItemForTypeIdentifier:options:completionHandler:");
  void _objc_msgSend_129(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> typeIdentifier,
    ffi.Pointer<ObjCObject> options,
    NSItemProviderCompletionHandler completionHandler,
  ) {
    return __objc_msgSend_129(
      obj,
      sel,
      typeIdentifier,
      options,
      completionHandler,
    );
  }

  late final __objc_msgSend_129Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              NSItemProviderCompletionHandler)>>('objc_msgSend');
  late final __objc_msgSend_129 = __objc_msgSend_129Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          NSItemProviderCompletionHandler)>();

  late final _sel_previewImageHandler1 = _registerName1("previewImageHandler");
  NSItemProviderLoadHandler _objc_msgSend_130(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_130(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_130Ptr = _lookup<
      ffi.NativeFunction<
          NSItemProviderLoadHandler Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_130 = __objc_msgSend_130Ptr.asFunction<
      NSItemProviderLoadHandler Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setPreviewImageHandler_1 =
      _registerName1("setPreviewImageHandler:");
  void _objc_msgSend_131(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSItemProviderLoadHandler value,
  ) {
    return __objc_msgSend_131(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_131Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSItemProviderLoadHandler)>>('objc_msgSend');
  late final __objc_msgSend_131 = __objc_msgSend_131Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          NSItemProviderLoadHandler)>();

  late final _sel_loadPreviewImageWithOptions_completionHandler_1 =
      _registerName1("loadPreviewImageWithOptions:completionHandler:");
  void _objc_msgSend_132(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> options,
    NSItemProviderCompletionHandler completionHandler,
  ) {
    return __objc_msgSend_132(
      obj,
      sel,
      options,
      completionHandler,
    );
  }

  late final __objc_msgSend_132Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              NSItemProviderCompletionHandler)>>('objc_msgSend');
  late final __objc_msgSend_132 = __objc_msgSend_132Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, NSItemProviderCompletionHandler)>();

  late final _class_NSString1 = _getClass1("NSString");
  late final _sel_length1 = _registerName1("length");
  late final _sel_characterAtIndex_1 = _registerName1("characterAtIndex:");
  int _objc_msgSend_133(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int index,
  ) {
    return __objc_msgSend_133(
      obj,
      sel,
      index,
    );
  }

  late final __objc_msgSend_133Ptr = _lookup<
      ffi.NativeFunction<
          unichar Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_133 = __objc_msgSend_133Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_substringFromIndex_1 = _registerName1("substringFromIndex:");
  late final _sel_substringToIndex_1 = _registerName1("substringToIndex:");
  late final _sel_substringWithRange_1 = _registerName1("substringWithRange:");
  late final _sel_getCharacters_range_1 =
      _registerName1("getCharacters:range:");
  void _objc_msgSend_134(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<unichar> buffer,
    NSRange range,
  ) {
    return __objc_msgSend_134(
      obj,
      sel,
      buffer,
      range,
    );
  }

  late final __objc_msgSend_134Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<unichar>, NSRange)>>('objc_msgSend');
  late final __objc_msgSend_134 = __objc_msgSend_134Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<unichar>, NSRange)>();

  late final _sel_compare_options_1 = _registerName1("compare:options:");
  int _objc_msgSend_135(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> string,
    int mask,
  ) {
    return __objc_msgSend_135(
      obj,
      sel,
      string,
      mask,
    );
  }

  late final __objc_msgSend_135Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_135 = __objc_msgSend_135Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int)>();

  late final _sel_compare_options_range_1 =
      _registerName1("compare:options:range:");
  int _objc_msgSend_136(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> string,
    int mask,
    NSRange rangeOfReceiverToCompare,
  ) {
    return __objc_msgSend_136(
      obj,
      sel,
      string,
      mask,
      rangeOfReceiverToCompare,
    );
  }

  late final __objc_msgSend_136Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Int32, NSRange)>>('objc_msgSend');
  late final __objc_msgSend_136 = __objc_msgSend_136Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int, NSRange)>();

  late final _sel_compare_options_range_locale_1 =
      _registerName1("compare:options:range:locale:");
  int _objc_msgSend_137(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> string,
    int mask,
    NSRange rangeOfReceiverToCompare,
    ffi.Pointer<ObjCObject> locale,
  ) {
    return __objc_msgSend_137(
      obj,
      sel,
      string,
      mask,
      rangeOfReceiverToCompare,
      locale,
    );
  }

  late final __objc_msgSend_137Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              NSRange,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_137 = __objc_msgSend_137Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int, NSRange, ffi.Pointer<ObjCObject>)>();

  late final _sel_caseInsensitiveCompare_1 =
      _registerName1("caseInsensitiveCompare:");
  late final _sel_localizedCompare_1 = _registerName1("localizedCompare:");
  late final _sel_localizedCaseInsensitiveCompare_1 =
      _registerName1("localizedCaseInsensitiveCompare:");
  late final _sel_localizedStandardCompare_1 =
      _registerName1("localizedStandardCompare:");
  late final _sel_isEqualToString_1 = _registerName1("isEqualToString:");
  late final _sel_hasPrefix_1 = _registerName1("hasPrefix:");
  late final _sel_hasSuffix_1 = _registerName1("hasSuffix:");
  late final _sel_commonPrefixWithString_options_1 =
      _registerName1("commonPrefixWithString:options:");
  ffi.Pointer<ObjCObject> _objc_msgSend_138(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> str,
    int mask,
  ) {
    return __objc_msgSend_138(
      obj,
      sel,
      str,
      mask,
    );
  }

  late final __objc_msgSend_138Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_138 = __objc_msgSend_138Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>, int)>();

  late final _sel_containsString_1 = _registerName1("containsString:");
  late final _sel_localizedCaseInsensitiveContainsString_1 =
      _registerName1("localizedCaseInsensitiveContainsString:");
  late final _sel_localizedStandardContainsString_1 =
      _registerName1("localizedStandardContainsString:");
  late final _sel_localizedStandardRangeOfString_1 =
      _registerName1("localizedStandardRangeOfString:");
  NSRange _objc_msgSend_139(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> str,
  ) {
    return __objc_msgSend_139(
      obj,
      sel,
      str,
    );
  }

  late final __objc_msgSend_139Ptr = _lookup<
      ffi.NativeFunction<
          NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_139 = __objc_msgSend_139Ptr.asFunction<
      NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_rangeOfString_1 = _registerName1("rangeOfString:");
  late final _sel_rangeOfString_options_1 =
      _registerName1("rangeOfString:options:");
  NSRange _objc_msgSend_140(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> searchString,
    int mask,
  ) {
    return __objc_msgSend_140(
      obj,
      sel,
      searchString,
      mask,
    );
  }

  late final __objc_msgSend_140Ptr = _lookup<
      ffi.NativeFunction<
          NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_140 = __objc_msgSend_140Ptr.asFunction<
      NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int)>();

  late final _sel_rangeOfString_options_range_1 =
      _registerName1("rangeOfString:options:range:");
  NSRange _objc_msgSend_141(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> searchString,
    int mask,
    NSRange rangeOfReceiverToSearch,
  ) {
    return __objc_msgSend_141(
      obj,
      sel,
      searchString,
      mask,
      rangeOfReceiverToSearch,
    );
  }

  late final __objc_msgSend_141Ptr = _lookup<
      ffi.NativeFunction<
          NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Int32, NSRange)>>('objc_msgSend');
  late final __objc_msgSend_141 = __objc_msgSend_141Ptr.asFunction<
      NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int, NSRange)>();

  late final _sel_rangeOfString_options_range_locale_1 =
      _registerName1("rangeOfString:options:range:locale:");
  NSRange _objc_msgSend_142(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> searchString,
    int mask,
    NSRange rangeOfReceiverToSearch,
    ffi.Pointer<ObjCObject> locale,
  ) {
    return __objc_msgSend_142(
      obj,
      sel,
      searchString,
      mask,
      rangeOfReceiverToSearch,
      locale,
    );
  }

  late final __objc_msgSend_142Ptr = _lookup<
      ffi.NativeFunction<
          NSRange Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              NSRange,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_142 = __objc_msgSend_142Ptr.asFunction<
      NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int, NSRange, ffi.Pointer<ObjCObject>)>();

  late final _sel_rangeOfCharacterFromSet_1 =
      _registerName1("rangeOfCharacterFromSet:");
  late final _sel_rangeOfCharacterFromSet_options_1 =
      _registerName1("rangeOfCharacterFromSet:options:");
  late final _sel_rangeOfCharacterFromSet_options_range_1 =
      _registerName1("rangeOfCharacterFromSet:options:range:");
  late final _sel_rangeOfComposedCharacterSequenceAtIndex_1 =
      _registerName1("rangeOfComposedCharacterSequenceAtIndex:");
  NSRange _objc_msgSend_143(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int index,
  ) {
    return __objc_msgSend_143(
      obj,
      sel,
      index,
    );
  }

  late final __objc_msgSend_143Ptr = _lookup<
      ffi.NativeFunction<
          NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_143 = __objc_msgSend_143Ptr.asFunction<
      NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_rangeOfComposedCharacterSequencesForRange_1 =
      _registerName1("rangeOfComposedCharacterSequencesForRange:");
  NSRange _objc_msgSend_144(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange range,
  ) {
    return __objc_msgSend_144(
      obj,
      sel,
      range,
    );
  }

  late final __objc_msgSend_144Ptr = _lookup<
      ffi.NativeFunction<
          NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSRange)>>('objc_msgSend');
  late final __objc_msgSend_144 = __objc_msgSend_144Ptr.asFunction<
      NSRange Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSRange)>();

  late final _sel_stringByAppendingString_1 =
      _registerName1("stringByAppendingString:");
  late final _sel_stringByAppendingFormat_1 =
      _registerName1("stringByAppendingFormat:");
  late final _sel_uppercaseString1 = _registerName1("uppercaseString");
  late final _sel_lowercaseString1 = _registerName1("lowercaseString");
  late final _sel_capitalizedString1 = _registerName1("capitalizedString");
  late final _sel_localizedUppercaseString1 =
      _registerName1("localizedUppercaseString");
  late final _sel_localizedLowercaseString1 =
      _registerName1("localizedLowercaseString");
  late final _sel_localizedCapitalizedString1 =
      _registerName1("localizedCapitalizedString");
  late final _sel_uppercaseStringWithLocale_1 =
      _registerName1("uppercaseStringWithLocale:");
  late final _sel_lowercaseStringWithLocale_1 =
      _registerName1("lowercaseStringWithLocale:");
  late final _sel_capitalizedStringWithLocale_1 =
      _registerName1("capitalizedStringWithLocale:");
  late final _sel_getLineStart_end_contentsEnd_forRange_1 =
      _registerName1("getLineStart:end:contentsEnd:forRange:");
  void _objc_msgSend_145(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<NSUInteger> startPtr,
    ffi.Pointer<NSUInteger> lineEndPtr,
    ffi.Pointer<NSUInteger> contentsEndPtr,
    NSRange range,
  ) {
    return __objc_msgSend_145(
      obj,
      sel,
      startPtr,
      lineEndPtr,
      contentsEndPtr,
      range,
    );
  }

  late final __objc_msgSend_145Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<NSUInteger>,
              ffi.Pointer<NSUInteger>,
              ffi.Pointer<NSUInteger>,
              NSRange)>>('objc_msgSend');
  late final __objc_msgSend_145 = __objc_msgSend_145Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<NSUInteger>,
          ffi.Pointer<NSUInteger>,
          ffi.Pointer<NSUInteger>,
          NSRange)>();

  late final _sel_lineRangeForRange_1 = _registerName1("lineRangeForRange:");
  late final _sel_getParagraphStart_end_contentsEnd_forRange_1 =
      _registerName1("getParagraphStart:end:contentsEnd:forRange:");
  late final _sel_paragraphRangeForRange_1 =
      _registerName1("paragraphRangeForRange:");
  late final _sel_enumerateSubstringsInRange_options_usingBlock_1 =
      _registerName1("enumerateSubstringsInRange:options:usingBlock:");
  void _objc_msgSend_146(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange range,
    int opts,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_146(
      obj,
      sel,
      range,
      opts,
      block,
    );
  }

  late final __objc_msgSend_146Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSRange, ffi.Int32, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_146 = __objc_msgSend_146Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSRange, int,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_enumerateLinesUsingBlock_1 =
      _registerName1("enumerateLinesUsingBlock:");
  void _objc_msgSend_147(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_147(
      obj,
      sel,
      block,
    );
  }

  late final __objc_msgSend_147Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_147 = __objc_msgSend_147Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_UTF8String1 = _registerName1("UTF8String");
  late final _sel_fastestEncoding1 = _registerName1("fastestEncoding");
  late final _sel_smallestEncoding1 = _registerName1("smallestEncoding");
  late final _sel_dataUsingEncoding_allowLossyConversion_1 =
      _registerName1("dataUsingEncoding:allowLossyConversion:");
  ffi.Pointer<ObjCObject> _objc_msgSend_148(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int encoding,
    bool lossy,
  ) {
    return __objc_msgSend_148(
      obj,
      sel,
      encoding,
      lossy,
    );
  }

  late final __objc_msgSend_148Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              NSStringEncoding,
              ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_148 = __objc_msgSend_148Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int, bool)>();

  late final _sel_dataUsingEncoding_1 = _registerName1("dataUsingEncoding:");
  late final _sel_canBeConvertedToEncoding_1 =
      _registerName1("canBeConvertedToEncoding:");
  bool _objc_msgSend_149(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int encoding,
  ) {
    return __objc_msgSend_149(
      obj,
      sel,
      encoding,
    );
  }

  late final __objc_msgSend_149Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSStringEncoding)>>('objc_msgSend');
  late final __objc_msgSend_149 = __objc_msgSend_149Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_cStringUsingEncoding_1 =
      _registerName1("cStringUsingEncoding:");
  ffi.Pointer<ffi.Char> _objc_msgSend_150(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int encoding,
  ) {
    return __objc_msgSend_150(
      obj,
      sel,
      encoding,
    );
  }

  late final __objc_msgSend_150Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, NSStringEncoding)>>('objc_msgSend');
  late final __objc_msgSend_150 = __objc_msgSend_150Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_getCString_maxLength_encoding_1 =
      _registerName1("getCString:maxLength:encoding:");
  bool _objc_msgSend_151(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Char> buffer,
    int maxBufferCount,
    int encoding,
  ) {
    return __objc_msgSend_151(
      obj,
      sel,
      buffer,
      maxBufferCount,
      encoding,
    );
  }

  late final __objc_msgSend_151Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Char>,
              NSUInteger,
              NSStringEncoding)>>('objc_msgSend');
  late final __objc_msgSend_151 = __objc_msgSend_151Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Char>, int, int)>();

  late final _sel_getBytes_maxLength_usedLength_encoding_options_range_remainingRange_1 =
      _registerName1(
          "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:");
  bool _objc_msgSend_152(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Void> buffer,
    int maxBufferCount,
    ffi.Pointer<NSUInteger> usedBufferCount,
    int encoding,
    int options,
    NSRange range,
    NSRangePointer leftover,
  ) {
    return __objc_msgSend_152(
      obj,
      sel,
      buffer,
      maxBufferCount,
      usedBufferCount,
      encoding,
      options,
      range,
      leftover,
    );
  }

  late final __objc_msgSend_152Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Void>,
              NSUInteger,
              ffi.Pointer<NSUInteger>,
              NSStringEncoding,
              ffi.Int32,
              NSRange,
              NSRangePointer)>>('objc_msgSend');
  late final __objc_msgSend_152 = __objc_msgSend_152Ptr.asFunction<
      bool Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<NSUInteger>,
          int,
          int,
          NSRange,
          NSRangePointer)>();

  late final _sel_maximumLengthOfBytesUsingEncoding_1 =
      _registerName1("maximumLengthOfBytesUsingEncoding:");
  int _objc_msgSend_153(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int enc,
  ) {
    return __objc_msgSend_153(
      obj,
      sel,
      enc,
    );
  }

  late final __objc_msgSend_153Ptr = _lookup<
      ffi.NativeFunction<
          NSUInteger Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSStringEncoding)>>('objc_msgSend');
  late final __objc_msgSend_153 = __objc_msgSend_153Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_lengthOfBytesUsingEncoding_1 =
      _registerName1("lengthOfBytesUsingEncoding:");
  late final _sel_availableStringEncodings1 =
      _registerName1("availableStringEncodings");
  ffi.Pointer<NSStringEncoding> _objc_msgSend_154(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_154(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_154Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NSStringEncoding> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_154 = __objc_msgSend_154Ptr.asFunction<
      ffi.Pointer<NSStringEncoding> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_localizedNameOfStringEncoding_1 =
      _registerName1("localizedNameOfStringEncoding:");
  late final _sel_defaultCStringEncoding1 =
      _registerName1("defaultCStringEncoding");
  late final _sel_decomposedStringWithCanonicalMapping1 =
      _registerName1("decomposedStringWithCanonicalMapping");
  late final _sel_precomposedStringWithCanonicalMapping1 =
      _registerName1("precomposedStringWithCanonicalMapping");
  late final _sel_decomposedStringWithCompatibilityMapping1 =
      _registerName1("decomposedStringWithCompatibilityMapping");
  late final _sel_precomposedStringWithCompatibilityMapping1 =
      _registerName1("precomposedStringWithCompatibilityMapping");
  late final _sel_componentsSeparatedByString_1 =
      _registerName1("componentsSeparatedByString:");
  late final _sel_componentsSeparatedByCharactersInSet_1 =
      _registerName1("componentsSeparatedByCharactersInSet:");
  late final _sel_stringByTrimmingCharactersInSet_1 =
      _registerName1("stringByTrimmingCharactersInSet:");
  late final _sel_stringByPaddingToLength_withString_startingAtIndex_1 =
      _registerName1("stringByPaddingToLength:withString:startingAtIndex:");
  ffi.Pointer<ObjCObject> _objc_msgSend_155(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int newLength,
    ffi.Pointer<ObjCObject> padString,
    int padIndex,
  ) {
    return __objc_msgSend_155(
      obj,
      sel,
      newLength,
      padString,
      padIndex,
    );
  }

  late final __objc_msgSend_155Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              NSUInteger,
              ffi.Pointer<ObjCObject>,
              NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_155 = __objc_msgSend_155Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, int, ffi.Pointer<ObjCObject>, int)>();

  late final _sel_stringByFoldingWithOptions_locale_1 =
      _registerName1("stringByFoldingWithOptions:locale:");
  ffi.Pointer<ObjCObject> _objc_msgSend_156(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int options,
    ffi.Pointer<ObjCObject> locale,
  ) {
    return __objc_msgSend_156(
      obj,
      sel,
      options,
      locale,
    );
  }

  late final __objc_msgSend_156Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Int32,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_156 = __objc_msgSend_156Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, int, ffi.Pointer<ObjCObject>)>();

  late final _sel_stringByReplacingOccurrencesOfString_withString_options_range_1 =
      _registerName1(
          "stringByReplacingOccurrencesOfString:withString:options:range:");
  ffi.Pointer<ObjCObject> _objc_msgSend_157(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> target,
    ffi.Pointer<ObjCObject> replacement,
    int options,
    NSRange searchRange,
  ) {
    return __objc_msgSend_157(
      obj,
      sel,
      target,
      replacement,
      options,
      searchRange,
    );
  }

  late final __objc_msgSend_157Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              NSRange)>>('objc_msgSend');
  late final __objc_msgSend_157 = __objc_msgSend_157Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          int,
          NSRange)>();

  late final _sel_stringByReplacingOccurrencesOfString_withString_1 =
      _registerName1("stringByReplacingOccurrencesOfString:withString:");
  late final _sel_stringByReplacingCharactersInRange_withString_1 =
      _registerName1("stringByReplacingCharactersInRange:withString:");
  ffi.Pointer<ObjCObject> _objc_msgSend_158(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange range,
    ffi.Pointer<ObjCObject> replacement,
  ) {
    return __objc_msgSend_158(
      obj,
      sel,
      range,
      replacement,
    );
  }

  late final __objc_msgSend_158Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              NSRange,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_158 = __objc_msgSend_158Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, NSRange, ffi.Pointer<ObjCObject>)>();

  late final _sel_stringByApplyingTransform_reverse_1 =
      _registerName1("stringByApplyingTransform:reverse:");
  late final _sel_writeToURL_atomically_encoding_error_1 =
      _registerName1("writeToURL:atomically:encoding:error:");
  bool _objc_msgSend_159(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
    bool useAuxiliaryFile,
    int enc,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_159(
      obj,
      sel,
      url,
      useAuxiliaryFile,
      enc,
      error,
    );
  }

  late final __objc_msgSend_159Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Bool,
              NSStringEncoding,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_159 = __objc_msgSend_159Ptr.asFunction<
      bool Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          bool,
          int,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_writeToFile_atomically_encoding_error_1 =
      _registerName1("writeToFile:atomically:encoding:error:");
  late final _sel_initWithCharactersNoCopy_length_freeWhenDone_1 =
      _registerName1("initWithCharactersNoCopy:length:freeWhenDone:");
  instancetype _objc_msgSend_160(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<unichar> characters,
    int length,
    bool freeBuffer,
  ) {
    return __objc_msgSend_160(
      obj,
      sel,
      characters,
      length,
      freeBuffer,
    );
  }

  late final __objc_msgSend_160Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<unichar>, NSUInteger, ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_160 = __objc_msgSend_160Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<unichar>, int, bool)>();

  late final _sel_initWithCharactersNoCopy_length_deallocator_1 =
      _registerName1("initWithCharactersNoCopy:length:deallocator:");
  instancetype _objc_msgSend_161(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<unichar> chars,
    int len,
    ffi.Pointer<_ObjCBlock> deallocator,
  ) {
    return __objc_msgSend_161(
      obj,
      sel,
      chars,
      len,
      deallocator,
    );
  }

  late final __objc_msgSend_161Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<unichar>,
              NSUInteger,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_161 = __objc_msgSend_161Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<unichar>, int, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_initWithCharacters_length_1 =
      _registerName1("initWithCharacters:length:");
  instancetype _objc_msgSend_162(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<unichar> characters,
    int length,
  ) {
    return __objc_msgSend_162(
      obj,
      sel,
      characters,
      length,
    );
  }

  late final __objc_msgSend_162Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<unichar>, NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_162 = __objc_msgSend_162Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<unichar>, int)>();

  late final _sel_initWithUTF8String_1 = _registerName1("initWithUTF8String:");
  instancetype _objc_msgSend_163(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Char> nullTerminatedCString,
  ) {
    return __objc_msgSend_163(
      obj,
      sel,
      nullTerminatedCString,
    );
  }

  late final __objc_msgSend_163Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Char>)>>('objc_msgSend');
  late final __objc_msgSend_163 = __objc_msgSend_163Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Char>)>();

  late final _sel_initWithString_1 = _registerName1("initWithString:");
  late final _sel_initWithFormat_1 = _registerName1("initWithFormat:");
  late final _sel_initWithFormat_arguments_1 =
      _registerName1("initWithFormat:arguments:");
  instancetype _objc_msgSend_164(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> format,
    ffi.Pointer<__va_list_tag> argList,
  ) {
    return __objc_msgSend_164(
      obj,
      sel,
      format,
      argList,
    );
  }

  late final __objc_msgSend_164Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<__va_list_tag>)>>('objc_msgSend');
  late final __objc_msgSend_164 = __objc_msgSend_164Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<__va_list_tag>)>();

  late final _sel_initWithFormat_locale_1 =
      _registerName1("initWithFormat:locale:");
  late final _sel_initWithFormat_locale_arguments_1 =
      _registerName1("initWithFormat:locale:arguments:");
  instancetype _objc_msgSend_165(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> format,
    ffi.Pointer<ObjCObject> locale,
    ffi.Pointer<__va_list_tag> argList,
  ) {
    return __objc_msgSend_165(
      obj,
      sel,
      format,
      locale,
      argList,
    );
  }

  late final __objc_msgSend_165Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<__va_list_tag>)>>('objc_msgSend');
  late final __objc_msgSend_165 = __objc_msgSend_165Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<__va_list_tag>)>();

  late final _sel_initWithData_encoding_1 =
      _registerName1("initWithData:encoding:");
  late final _sel_initWithBytes_length_encoding_1 =
      _registerName1("initWithBytes:length:encoding:");
  instancetype _objc_msgSend_166(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Void> bytes,
    int len,
    int encoding,
  ) {
    return __objc_msgSend_166(
      obj,
      sel,
      bytes,
      len,
      encoding,
    );
  }

  late final __objc_msgSend_166Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Void>,
              NSUInteger,
              NSStringEncoding)>>('objc_msgSend');
  late final __objc_msgSend_166 = __objc_msgSend_166Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Void>, int, int)>();

  late final _sel_initWithBytesNoCopy_length_encoding_freeWhenDone_1 =
      _registerName1("initWithBytesNoCopy:length:encoding:freeWhenDone:");
  instancetype _objc_msgSend_167(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Void> bytes,
    int len,
    int encoding,
    bool freeBuffer,
  ) {
    return __objc_msgSend_167(
      obj,
      sel,
      bytes,
      len,
      encoding,
      freeBuffer,
    );
  }

  late final __objc_msgSend_167Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Void>,
              NSUInteger,
              NSStringEncoding,
              ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_167 = __objc_msgSend_167Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Void>, int, int, bool)>();

  late final _sel_initWithBytesNoCopy_length_encoding_deallocator_1 =
      _registerName1("initWithBytesNoCopy:length:encoding:deallocator:");
  instancetype _objc_msgSend_168(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Void> bytes,
    int len,
    int encoding,
    ffi.Pointer<_ObjCBlock> deallocator,
  ) {
    return __objc_msgSend_168(
      obj,
      sel,
      bytes,
      len,
      encoding,
      deallocator,
    );
  }

  late final __objc_msgSend_168Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Void>,
              NSUInteger,
              NSStringEncoding,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_168 = __objc_msgSend_168Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_string1 = _registerName1("string");
  late final _sel_stringWithString_1 = _registerName1("stringWithString:");
  late final _sel_stringWithCharacters_length_1 =
      _registerName1("stringWithCharacters:length:");
  late final _sel_stringWithUTF8String_1 =
      _registerName1("stringWithUTF8String:");
  late final _sel_stringWithFormat_1 = _registerName1("stringWithFormat:");
  late final _sel_localizedStringWithFormat_1 =
      _registerName1("localizedStringWithFormat:");
  late final _sel_initWithCString_encoding_1 =
      _registerName1("initWithCString:encoding:");
  instancetype _objc_msgSend_169(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Char> nullTerminatedCString,
    int encoding,
  ) {
    return __objc_msgSend_169(
      obj,
      sel,
      nullTerminatedCString,
      encoding,
    );
  }

  late final __objc_msgSend_169Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Char>, NSStringEncoding)>>('objc_msgSend');
  late final __objc_msgSend_169 = __objc_msgSend_169Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Char>, int)>();

  late final _sel_stringWithCString_encoding_1 =
      _registerName1("stringWithCString:encoding:");
  late final _sel_initWithContentsOfURL_encoding_error_1 =
      _registerName1("initWithContentsOfURL:encoding:error:");
  instancetype _objc_msgSend_170(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
    int enc,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_170(
      obj,
      sel,
      url,
      enc,
      error,
    );
  }

  late final __objc_msgSend_170Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              NSStringEncoding,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_170 = __objc_msgSend_170Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          int,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_initWithContentsOfFile_encoding_error_1 =
      _registerName1("initWithContentsOfFile:encoding:error:");
  late final _sel_stringWithContentsOfURL_encoding_error_1 =
      _registerName1("stringWithContentsOfURL:encoding:error:");
  late final _sel_stringWithContentsOfFile_encoding_error_1 =
      _registerName1("stringWithContentsOfFile:encoding:error:");
  late final _sel_initWithContentsOfURL_usedEncoding_error_1 =
      _registerName1("initWithContentsOfURL:usedEncoding:error:");
  instancetype _objc_msgSend_171(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
    ffi.Pointer<NSStringEncoding> enc,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_171(
      obj,
      sel,
      url,
      enc,
      error,
    );
  }

  late final __objc_msgSend_171Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<NSStringEncoding>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_171 = __objc_msgSend_171Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<NSStringEncoding>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_initWithContentsOfFile_usedEncoding_error_1 =
      _registerName1("initWithContentsOfFile:usedEncoding:error:");
  late final _sel_stringWithContentsOfURL_usedEncoding_error_1 =
      _registerName1("stringWithContentsOfURL:usedEncoding:error:");
  late final _sel_stringWithContentsOfFile_usedEncoding_error_1 =
      _registerName1("stringWithContentsOfFile:usedEncoding:error:");
  late final _sel_stringEncodingForData_encodingOptions_convertedString_usedLossyConversion_1 =
      _registerName1(
          "stringEncodingForData:encodingOptions:convertedString:usedLossyConversion:");
  int _objc_msgSend_172(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> data,
    ffi.Pointer<ObjCObject> opts,
    ffi.Pointer<ffi.Pointer<ObjCObject>> string,
    ffi.Pointer<ffi.Bool> usedLossyConversion,
  ) {
    return __objc_msgSend_172(
      obj,
      sel,
      data,
      opts,
      string,
      usedLossyConversion,
    );
  }

  late final __objc_msgSend_172Ptr = _lookup<
      ffi.NativeFunction<
          NSStringEncoding Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>,
              ffi.Pointer<ffi.Bool>)>>('objc_msgSend');
  late final __objc_msgSend_172 = __objc_msgSend_172Ptr.asFunction<
      int Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>,
          ffi.Pointer<ffi.Bool>)>();

  late final _sel_propertyList1 = _registerName1("propertyList");
  late final _sel_propertyListFromStringsFileFormat1 =
      _registerName1("propertyListFromStringsFileFormat");
  late final _sel_cString1 = _registerName1("cString");
  late final _sel_lossyCString1 = _registerName1("lossyCString");
  late final _sel_cStringLength1 = _registerName1("cStringLength");
  late final _sel_getCString_1 = _registerName1("getCString:");
  void _objc_msgSend_173(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Char> bytes,
  ) {
    return __objc_msgSend_173(
      obj,
      sel,
      bytes,
    );
  }

  late final __objc_msgSend_173Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Char>)>>('objc_msgSend');
  late final __objc_msgSend_173 = __objc_msgSend_173Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Char>)>();

  late final _sel_getCString_maxLength_1 =
      _registerName1("getCString:maxLength:");
  void _objc_msgSend_174(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Char> bytes,
    int maxLength,
  ) {
    return __objc_msgSend_174(
      obj,
      sel,
      bytes,
      maxLength,
    );
  }

  late final __objc_msgSend_174Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Char>, NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_174 = __objc_msgSend_174Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Char>, int)>();

  late final _sel_getCString_maxLength_range_remainingRange_1 =
      _registerName1("getCString:maxLength:range:remainingRange:");
  void _objc_msgSend_175(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Char> bytes,
    int maxLength,
    NSRange aRange,
    NSRangePointer leftoverRange,
  ) {
    return __objc_msgSend_175(
      obj,
      sel,
      bytes,
      maxLength,
      aRange,
      leftoverRange,
    );
  }

  late final __objc_msgSend_175Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Char>,
              NSUInteger,
              NSRange,
              NSRangePointer)>>('objc_msgSend');
  late final __objc_msgSend_175 = __objc_msgSend_175Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Char>, int, NSRange, NSRangePointer)>();

  late final _sel_stringWithContentsOfFile_1 =
      _registerName1("stringWithContentsOfFile:");
  late final _sel_stringWithContentsOfURL_1 =
      _registerName1("stringWithContentsOfURL:");
  late final _sel_initWithCStringNoCopy_length_freeWhenDone_1 =
      _registerName1("initWithCStringNoCopy:length:freeWhenDone:");
  ffi.Pointer<ObjCObject> _objc_msgSend_176(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Char> bytes,
    int length,
    bool freeBuffer,
  ) {
    return __objc_msgSend_176(
      obj,
      sel,
      bytes,
      length,
      freeBuffer,
    );
  }

  late final __objc_msgSend_176Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Char>,
              NSUInteger,
              ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_176 = __objc_msgSend_176Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ffi.Char>, int, bool)>();

  late final _sel_initWithCString_length_1 =
      _registerName1("initWithCString:length:");
  late final _sel_initWithCString_1 = _registerName1("initWithCString:");
  late final _sel_stringWithCString_length_1 =
      _registerName1("stringWithCString:length:");
  late final _sel_stringWithCString_1 = _registerName1("stringWithCString:");
  late final _sel_getCharacters_1 = _registerName1("getCharacters:");
  void _objc_msgSend_177(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<unichar> buffer,
  ) {
    return __objc_msgSend_177(
      obj,
      sel,
      buffer,
    );
  }

  late final __objc_msgSend_177Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<unichar>)>>('objc_msgSend');
  late final __objc_msgSend_177 = __objc_msgSend_177Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<unichar>)>();

  late final _sel_variantFittingPresentationWidth_1 =
      _registerName1("variantFittingPresentationWidth:");
  late final _sel_pathWithComponents_1 = _registerName1("pathWithComponents:");
  late final _sel_pathComponents1 = _registerName1("pathComponents");
  late final _sel_isAbsolutePath1 = _registerName1("isAbsolutePath");
  late final _sel_lastPathComponent1 = _registerName1("lastPathComponent");
  late final _sel_stringByDeletingLastPathComponent1 =
      _registerName1("stringByDeletingLastPathComponent");
  late final _sel_stringByAppendingPathComponent_1 =
      _registerName1("stringByAppendingPathComponent:");
  late final _sel_pathExtension1 = _registerName1("pathExtension");
  late final _sel_stringByDeletingPathExtension1 =
      _registerName1("stringByDeletingPathExtension");
  late final _sel_stringByAppendingPathExtension_1 =
      _registerName1("stringByAppendingPathExtension:");
  late final _sel_stringByAbbreviatingWithTildeInPath1 =
      _registerName1("stringByAbbreviatingWithTildeInPath");
  late final _sel_stringByExpandingTildeInPath1 =
      _registerName1("stringByExpandingTildeInPath");
  late final _sel_stringByStandardizingPath1 =
      _registerName1("stringByStandardizingPath");
  late final _sel_stringByResolvingSymlinksInPath1 =
      _registerName1("stringByResolvingSymlinksInPath");
  late final _sel_stringsByAppendingPaths_1 =
      _registerName1("stringsByAppendingPaths:");
  late final _sel_completePathIntoString_caseSensitive_matchesIntoArray_filterTypes_1 =
      _registerName1(
          "completePathIntoString:caseSensitive:matchesIntoArray:filterTypes:");
  int _objc_msgSend_178(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Pointer<ObjCObject>> outputName,
    bool flag,
    ffi.Pointer<ffi.Pointer<ObjCObject>> outputArray,
    ffi.Pointer<ObjCObject> filterTypes,
  ) {
    return __objc_msgSend_178(
      obj,
      sel,
      outputName,
      flag,
      outputArray,
      filterTypes,
    );
  }

  late final __objc_msgSend_178Ptr = _lookup<
      ffi.NativeFunction<
          NSUInteger Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>,
              ffi.Bool,
              ffi.Pointer<ffi.Pointer<ObjCObject>>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_178 = __objc_msgSend_178Ptr.asFunction<
      int Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>,
          bool,
          ffi.Pointer<ffi.Pointer<ObjCObject>>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_fileSystemRepresentation1 =
      _registerName1("fileSystemRepresentation");
  late final _sel_getFileSystemRepresentation_maxLength_1 =
      _registerName1("getFileSystemRepresentation:maxLength:");
  bool _objc_msgSend_179(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Char> cname,
    int max,
  ) {
    return __objc_msgSend_179(
      obj,
      sel,
      cname,
      max,
    );
  }

  late final __objc_msgSend_179Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Char>, NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_179 = __objc_msgSend_179Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Char>, int)>();

  late final _sel_stringByAddingPercentEncodingWithAllowedCharacters_1 =
      _registerName1("stringByAddingPercentEncodingWithAllowedCharacters:");
  late final _sel_stringByRemovingPercentEncoding1 =
      _registerName1("stringByRemovingPercentEncoding");
  late final _sel_stringByAddingPercentEscapesUsingEncoding_1 =
      _registerName1("stringByAddingPercentEscapesUsingEncoding:");
  late final _sel_stringByReplacingPercentEscapesUsingEncoding_1 =
      _registerName1("stringByReplacingPercentEscapesUsingEncoding:");
  late final _sel_linguisticTagsInRange_scheme_options_orthography_tokenRanges_1 =
      _registerName1(
          "linguisticTagsInRange:scheme:options:orthography:tokenRanges:");
  ffi.Pointer<ObjCObject> _objc_msgSend_180(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange range,
    NSLinguisticTagScheme scheme,
    int options,
    ffi.Pointer<ObjCObject> orthography,
    ffi.Pointer<ffi.Pointer<ObjCObject>> tokenRanges,
  ) {
    return __objc_msgSend_180(
      obj,
      sel,
      range,
      scheme,
      options,
      orthography,
      tokenRanges,
    );
  }

  late final __objc_msgSend_180Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              NSRange,
              NSLinguisticTagScheme,
              ffi.Int32,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_180 = __objc_msgSend_180Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          NSRange,
          NSLinguisticTagScheme,
          int,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_enumerateLinguisticTagsInRange_scheme_options_orthography_usingBlock_1 =
      _registerName1(
          "enumerateLinguisticTagsInRange:scheme:options:orthography:usingBlock:");
  void _objc_msgSend_181(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange range,
    NSLinguisticTagScheme scheme,
    int options,
    ffi.Pointer<ObjCObject> orthography,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_181(
      obj,
      sel,
      range,
      scheme,
      options,
      orthography,
      block,
    );
  }

  late final __objc_msgSend_181Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              NSRange,
              NSLinguisticTagScheme,
              ffi.Int32,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_181 = __objc_msgSend_181Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          NSRange,
          NSLinguisticTagScheme,
          int,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<_ObjCBlock>)>();

  late final _class_NSMutableString1 = _getClass1("NSMutableString");
  late final _sel_replaceCharactersInRange_withString_1 =
      _registerName1("replaceCharactersInRange:withString:");
  late final _sel_insertString_atIndex_1 =
      _registerName1("insertString:atIndex:");
  late final _sel_deleteCharactersInRange_1 =
      _registerName1("deleteCharactersInRange:");
  late final _sel_appendString_1 = _registerName1("appendString:");
  late final _sel_appendFormat_1 = _registerName1("appendFormat:");
  late final _sel_setString_1 = _registerName1("setString:");
  late final _sel_replaceOccurrencesOfString_withString_options_range_1 =
      _registerName1("replaceOccurrencesOfString:withString:options:range:");
  int _objc_msgSend_182(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> target,
    ffi.Pointer<ObjCObject> replacement,
    int options,
    NSRange searchRange,
  ) {
    return __objc_msgSend_182(
      obj,
      sel,
      target,
      replacement,
      options,
      searchRange,
    );
  }

  late final __objc_msgSend_182Ptr = _lookup<
      ffi.NativeFunction<
          NSUInteger Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              NSRange)>>('objc_msgSend');
  late final __objc_msgSend_182 = __objc_msgSend_182Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>, int, NSRange)>();

  late final _sel_applyTransform_reverse_range_updatedRange_1 =
      _registerName1("applyTransform:reverse:range:updatedRange:");
  bool _objc_msgSend_183(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSStringTransform transform,
    bool reverse,
    NSRange range,
    NSRangePointer resultingRange,
  ) {
    return __objc_msgSend_183(
      obj,
      sel,
      transform,
      reverse,
      range,
      resultingRange,
    );
  }

  late final __objc_msgSend_183Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              NSStringTransform,
              ffi.Bool,
              NSRange,
              NSRangePointer)>>('objc_msgSend');
  late final __objc_msgSend_183 = __objc_msgSend_183Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          NSStringTransform, bool, NSRange, NSRangePointer)>();

  late final _sel_stringWithCapacity_1 = _registerName1("stringWithCapacity:");
  late final _class_NSDictionary1 = _getClass1("NSDictionary");
  late final _sel_objectForKey_1 = _registerName1("objectForKey:");
  late final _sel_keyEnumerator1 = _registerName1("keyEnumerator");
  late final _sel_initWithObjects_forKeys_count_1 =
      _registerName1("initWithObjects:forKeys:count:");
  instancetype _objc_msgSend_184(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
    ffi.Pointer<ffi.Pointer<ObjCObject>> keys,
    int cnt,
  ) {
    return __objc_msgSend_184(
      obj,
      sel,
      objects,
      keys,
      cnt,
    );
  }

  late final __objc_msgSend_184Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>,
              NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_184 = __objc_msgSend_184Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>,
          int)>();

  late final _sel_allKeys1 = _registerName1("allKeys");
  late final _sel_allKeysForObject_1 = _registerName1("allKeysForObject:");
  late final _sel_allValues1 = _registerName1("allValues");
  late final _sel_descriptionInStringsFileFormat1 =
      _registerName1("descriptionInStringsFileFormat");
  late final _sel_isEqualToDictionary_1 =
      _registerName1("isEqualToDictionary:");
  late final _sel_objectsForKeys_notFoundMarker_1 =
      _registerName1("objectsForKeys:notFoundMarker:");
  late final _sel_keysSortedByValueUsingSelector_1 =
      _registerName1("keysSortedByValueUsingSelector:");
  late final _sel_getObjects_andKeys_count_1 =
      _registerName1("getObjects:andKeys:count:");
  void _objc_msgSend_185(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
    ffi.Pointer<ffi.Pointer<ObjCObject>> keys,
    int count,
  ) {
    return __objc_msgSend_185(
      obj,
      sel,
      objects,
      keys,
      count,
    );
  }

  late final __objc_msgSend_185Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>,
              NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_185 = __objc_msgSend_185Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>,
          int)>();

  late final _sel_objectForKeyedSubscript_1 =
      _registerName1("objectForKeyedSubscript:");
  late final _sel_enumerateKeysAndObjectsUsingBlock_1 =
      _registerName1("enumerateKeysAndObjectsUsingBlock:");
  void _objc_msgSend_186(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_186(
      obj,
      sel,
      block,
    );
  }

  late final __objc_msgSend_186Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_186 = __objc_msgSend_186Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_enumerateKeysAndObjectsWithOptions_usingBlock_1 =
      _registerName1("enumerateKeysAndObjectsWithOptions:usingBlock:");
  void _objc_msgSend_187(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int opts,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_187(
      obj,
      sel,
      opts,
      block,
    );
  }

  late final __objc_msgSend_187Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_187 = __objc_msgSend_187Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_keysSortedByValueUsingComparator_1 =
      _registerName1("keysSortedByValueUsingComparator:");
  late final _sel_keysSortedByValueWithOptions_usingComparator_1 =
      _registerName1("keysSortedByValueWithOptions:usingComparator:");
  late final _sel_keysOfEntriesPassingTest_1 =
      _registerName1("keysOfEntriesPassingTest:");
  ffi.Pointer<ObjCObject> _objc_msgSend_188(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_188(
      obj,
      sel,
      predicate,
    );
  }

  late final __objc_msgSend_188Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_188 = __objc_msgSend_188Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_keysOfEntriesWithOptions_passingTest_1 =
      _registerName1("keysOfEntriesWithOptions:passingTest:");
  ffi.Pointer<ObjCObject> _objc_msgSend_189(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int opts,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_189(
      obj,
      sel,
      opts,
      predicate,
    );
  }

  late final __objc_msgSend_189Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_189 = __objc_msgSend_189Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, int, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_getObjects_andKeys_1 = _registerName1("getObjects:andKeys:");
  void _objc_msgSend_190(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
    ffi.Pointer<ffi.Pointer<ObjCObject>> keys,
  ) {
    return __objc_msgSend_190(
      obj,
      sel,
      objects,
      keys,
    );
  }

  late final __objc_msgSend_190Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_190 = __objc_msgSend_190Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_dictionaryWithContentsOfFile_1 =
      _registerName1("dictionaryWithContentsOfFile:");
  late final _sel_dictionaryWithContentsOfURL_1 =
      _registerName1("dictionaryWithContentsOfURL:");
  late final _sel_dictionary1 = _registerName1("dictionary");
  late final _sel_dictionaryWithObject_forKey_1 =
      _registerName1("dictionaryWithObject:forKey:");
  late final _sel_dictionaryWithObjects_forKeys_count_1 =
      _registerName1("dictionaryWithObjects:forKeys:count:");
  late final _sel_dictionaryWithObjectsAndKeys_1 =
      _registerName1("dictionaryWithObjectsAndKeys:");
  late final _sel_dictionaryWithDictionary_1 =
      _registerName1("dictionaryWithDictionary:");
  late final _sel_dictionaryWithObjects_forKeys_1 =
      _registerName1("dictionaryWithObjects:forKeys:");
  late final _sel_initWithObjectsAndKeys_1 =
      _registerName1("initWithObjectsAndKeys:");
  late final _sel_initWithDictionary_1 = _registerName1("initWithDictionary:");
  late final _sel_initWithDictionary_copyItems_1 =
      _registerName1("initWithDictionary:copyItems:");
  late final _sel_initWithObjects_forKeys_1 =
      _registerName1("initWithObjects:forKeys:");
  late final _sel_dictionaryWithContentsOfURL_error_1 =
      _registerName1("dictionaryWithContentsOfURL:error:");
  late final _sel_sharedKeySetForKeys_1 =
      _registerName1("sharedKeySetForKeys:");
  late final _sel_countByEnumeratingWithState_objects_count_1 =
      _registerName1("countByEnumeratingWithState:objects:count:");
  int _objc_msgSend_191(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<NSFastEnumerationState> state,
    ffi.Pointer<ffi.Pointer<ObjCObject>> buffer,
    int len,
  ) {
    return __objc_msgSend_191(
      obj,
      sel,
      state,
      buffer,
      len,
    );
  }

  late final __objc_msgSend_191Ptr = _lookup<
      ffi.NativeFunction<
          NSUInteger Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<NSFastEnumerationState>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>,
              NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_191 = __objc_msgSend_191Ptr.asFunction<
      int Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<NSFastEnumerationState>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>,
          int)>();

  late final _sel_fileSize1 = _registerName1("fileSize");
  late final _sel_fileModificationDate1 =
      _registerName1("fileModificationDate");
  late final _sel_fileType1 = _registerName1("fileType");
  late final _sel_filePosixPermissions1 =
      _registerName1("filePosixPermissions");
  late final _sel_fileOwnerAccountName1 =
      _registerName1("fileOwnerAccountName");
  late final _sel_fileGroupOwnerAccountName1 =
      _registerName1("fileGroupOwnerAccountName");
  late final _sel_fileSystemNumber1 = _registerName1("fileSystemNumber");
  late final _sel_fileSystemFileNumber1 =
      _registerName1("fileSystemFileNumber");
  late final _sel_fileExtensionHidden1 = _registerName1("fileExtensionHidden");
  late final _sel_fileHFSCreatorCode1 = _registerName1("fileHFSCreatorCode");
  late final _sel_fileHFSTypeCode1 = _registerName1("fileHFSTypeCode");
  late final _sel_fileIsImmutable1 = _registerName1("fileIsImmutable");
  late final _sel_fileIsAppendOnly1 = _registerName1("fileIsAppendOnly");
  late final _sel_fileCreationDate1 = _registerName1("fileCreationDate");
  late final _sel_fileOwnerAccountID1 = _registerName1("fileOwnerAccountID");
  late final _sel_fileGroupOwnerAccountID1 =
      _registerName1("fileGroupOwnerAccountID");
  late final _class_NSMutableDictionary1 = _getClass1("NSMutableDictionary");
  late final _sel_removeObjectForKey_1 = _registerName1("removeObjectForKey:");
  late final _sel_setObject_forKey_1 = _registerName1("setObject:forKey:");
  late final _sel_addEntriesFromDictionary_1 =
      _registerName1("addEntriesFromDictionary:");
  late final _sel_removeObjectsForKeys_1 =
      _registerName1("removeObjectsForKeys:");
  late final _sel_setDictionary_1 = _registerName1("setDictionary:");
  late final _sel_setObject_forKeyedSubscript_1 =
      _registerName1("setObject:forKeyedSubscript:");
  late final _sel_dictionaryWithCapacity_1 =
      _registerName1("dictionaryWithCapacity:");
  late final _sel_dictionaryWithSharedKeySet_1 =
      _registerName1("dictionaryWithSharedKeySet:");
  late final _class_NSSet1 = _getClass1("NSSet");
  late final _sel_member_1 = _registerName1("member:");
  late final _sel_anyObject1 = _registerName1("anyObject");
  late final _sel_intersectsSet_1 = _registerName1("intersectsSet:");
  late final _sel_isEqualToSet_1 = _registerName1("isEqualToSet:");
  late final _sel_isSubsetOfSet_1 = _registerName1("isSubsetOfSet:");
  late final _sel_setByAddingObject_1 = _registerName1("setByAddingObject:");
  late final _sel_setByAddingObjectsFromSet_1 =
      _registerName1("setByAddingObjectsFromSet:");
  late final _sel_setByAddingObjectsFromArray_1 =
      _registerName1("setByAddingObjectsFromArray:");
  void _objc_msgSend_192(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int opts,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_192(
      obj,
      sel,
      opts,
      block,
    );
  }

  late final __objc_msgSend_192Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_192 = __objc_msgSend_192Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_objectsPassingTest_1 = _registerName1("objectsPassingTest:");
  ffi.Pointer<ObjCObject> _objc_msgSend_193(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_193(
      obj,
      sel,
      predicate,
    );
  }

  late final __objc_msgSend_193Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_193 = __objc_msgSend_193Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_objectsWithOptions_passingTest_1 =
      _registerName1("objectsWithOptions:passingTest:");
  ffi.Pointer<ObjCObject> _objc_msgSend_194(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int opts,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_194(
      obj,
      sel,
      opts,
      predicate,
    );
  }

  late final __objc_msgSend_194Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_194 = __objc_msgSend_194Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, int, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_set1 = _registerName1("set");
  late final _sel_setWithObject_1 = _registerName1("setWithObject:");
  late final _sel_setWithObjects_count_1 =
      _registerName1("setWithObjects:count:");
  late final _sel_setWithObjects_1 = _registerName1("setWithObjects:");
  late final _sel_setWithSet_1 = _registerName1("setWithSet:");
  late final _sel_setWithArray_1 = _registerName1("setWithArray:");
  late final _sel_initWithSet_1 = _registerName1("initWithSet:");
  late final _sel_initWithSet_copyItems_1 =
      _registerName1("initWithSet:copyItems:");
  late final _sel_filteredSetUsingPredicate_1 =
      _registerName1("filteredSetUsingPredicate:");
  late final _class_NSMutableSet1 = _getClass1("NSMutableSet");
  late final _sel_intersectSet_1 = _registerName1("intersectSet:");
  late final _sel_minusSet_1 = _registerName1("minusSet:");
  late final _sel_unionSet_1 = _registerName1("unionSet:");
  late final _sel_setSet_1 = _registerName1("setSet:");
  late final _sel_setWithCapacity_1 = _registerName1("setWithCapacity:");
  late final _class_NSNotification1 = _getClass1("NSNotification");
  late final _sel_name1 = _registerName1("name");
  late final _sel_object1 = _registerName1("object");
  late final _sel_userInfo1 = _registerName1("userInfo");
  late final _sel_initWithName_object_userInfo_1 =
      _registerName1("initWithName:object:userInfo:");
  late final _sel_notificationWithName_object_1 =
      _registerName1("notificationWithName:object:");
  late final _sel_notificationWithName_object_userInfo_1 =
      _registerName1("notificationWithName:object:userInfo:");
  late final _class_NSBundle1 = _getClass1("NSBundle");
  late final _sel_mainBundle1 = _registerName1("mainBundle");
  late final _sel_bundleWithPath_1 = _registerName1("bundleWithPath:");
  late final _sel_initWithPath_1 = _registerName1("initWithPath:");
  late final _sel_bundleWithURL_1 = _registerName1("bundleWithURL:");
  late final _sel_initWithURL_1 = _registerName1("initWithURL:");
  late final _sel_bundleForClass_1 = _registerName1("bundleForClass:");
  late final _sel_bundleWithIdentifier_1 =
      _registerName1("bundleWithIdentifier:");
  late final _sel_allBundles1 = _registerName1("allBundles");
  late final _sel_allFrameworks1 = _registerName1("allFrameworks");
  late final _sel_isLoaded1 = _registerName1("isLoaded");
  late final _sel_unload1 = _registerName1("unload");
  late final _sel_preflightAndReturnError_1 =
      _registerName1("preflightAndReturnError:");
  bool _objc_msgSend_195(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_195(
      obj,
      sel,
      error,
    );
  }

  late final __objc_msgSend_195Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_195 = __objc_msgSend_195Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_loadAndReturnError_1 = _registerName1("loadAndReturnError:");
  late final _sel_bundleURL1 = _registerName1("bundleURL");
  late final _sel_resourceURL1 = _registerName1("resourceURL");
  late final _sel_executableURL1 = _registerName1("executableURL");
  late final _sel_URLForAuxiliaryExecutable_1 =
      _registerName1("URLForAuxiliaryExecutable:");
  late final _sel_privateFrameworksURL1 =
      _registerName1("privateFrameworksURL");
  late final _sel_sharedFrameworksURL1 = _registerName1("sharedFrameworksURL");
  late final _sel_sharedSupportURL1 = _registerName1("sharedSupportURL");
  late final _sel_builtInPlugInsURL1 = _registerName1("builtInPlugInsURL");
  late final _sel_appStoreReceiptURL1 = _registerName1("appStoreReceiptURL");
  late final _sel_bundlePath1 = _registerName1("bundlePath");
  late final _sel_resourcePath1 = _registerName1("resourcePath");
  late final _sel_executablePath1 = _registerName1("executablePath");
  late final _sel_pathForAuxiliaryExecutable_1 =
      _registerName1("pathForAuxiliaryExecutable:");
  late final _sel_privateFrameworksPath1 =
      _registerName1("privateFrameworksPath");
  late final _sel_sharedFrameworksPath1 =
      _registerName1("sharedFrameworksPath");
  late final _sel_sharedSupportPath1 = _registerName1("sharedSupportPath");
  late final _sel_builtInPlugInsPath1 = _registerName1("builtInPlugInsPath");
  late final _sel_URLForResource_withExtension_subdirectory_inBundleWithURL_1 =
      _registerName1(
          "URLForResource:withExtension:subdirectory:inBundleWithURL:");
  late final _sel_URLsForResourcesWithExtension_subdirectory_inBundleWithURL_1 =
      _registerName1(
          "URLsForResourcesWithExtension:subdirectory:inBundleWithURL:");
  late final _sel_URLForResource_withExtension_1 =
      _registerName1("URLForResource:withExtension:");
  late final _sel_URLForResource_withExtension_subdirectory_1 =
      _registerName1("URLForResource:withExtension:subdirectory:");
  late final _sel_URLForResource_withExtension_subdirectory_localization_1 =
      _registerName1("URLForResource:withExtension:subdirectory:localization:");
  late final _sel_URLsForResourcesWithExtension_subdirectory_1 =
      _registerName1("URLsForResourcesWithExtension:subdirectory:");
  late final _sel_URLsForResourcesWithExtension_subdirectory_localization_1 =
      _registerName1(
          "URLsForResourcesWithExtension:subdirectory:localization:");
  late final _sel_pathForResource_ofType_inDirectory_1 =
      _registerName1("pathForResource:ofType:inDirectory:");
  late final _sel_pathsForResourcesOfType_inDirectory_1 =
      _registerName1("pathsForResourcesOfType:inDirectory:");
  late final _sel_pathForResource_ofType_1 =
      _registerName1("pathForResource:ofType:");
  late final _sel_pathForResource_ofType_inDirectory_forLocalization_1 =
      _registerName1("pathForResource:ofType:inDirectory:forLocalization:");
  late final _sel_pathsForResourcesOfType_inDirectory_forLocalization_1 =
      _registerName1("pathsForResourcesOfType:inDirectory:forLocalization:");
  late final _sel_localizedStringForKey_value_table_1 =
      _registerName1("localizedStringForKey:value:table:");
  late final _sel_localizedAttributedStringForKey_value_table_1 =
      _registerName1("localizedAttributedStringForKey:value:table:");
  late final _sel_bundleIdentifier1 = _registerName1("bundleIdentifier");
  late final _sel_infoDictionary1 = _registerName1("infoDictionary");
  late final _sel_localizedInfoDictionary1 =
      _registerName1("localizedInfoDictionary");
  late final _sel_objectForInfoDictionaryKey_1 =
      _registerName1("objectForInfoDictionaryKey:");
  late final _sel_classNamed_1 = _registerName1("classNamed:");
  late final _sel_principalClass1 = _registerName1("principalClass");
  late final _sel_preferredLocalizations1 =
      _registerName1("preferredLocalizations");
  late final _sel_localizations1 = _registerName1("localizations");
  late final _sel_developmentLocalization1 =
      _registerName1("developmentLocalization");
  late final _sel_preferredLocalizationsFromArray_1 =
      _registerName1("preferredLocalizationsFromArray:");
  late final _sel_preferredLocalizationsFromArray_forPreferences_1 =
      _registerName1("preferredLocalizationsFromArray:forPreferences:");
  late final _sel_executableArchitectures1 =
      _registerName1("executableArchitectures");
  late final _sel_setPreservationPriority_forTags_1 =
      _registerName1("setPreservationPriority:forTags:");
  void _objc_msgSend_196(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    double priority,
    ffi.Pointer<ObjCObject> tags,
  ) {
    return __objc_msgSend_196(
      obj,
      sel,
      priority,
      tags,
    );
  }

  late final __objc_msgSend_196Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Double, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_196 = __objc_msgSend_196Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, double,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_preservationPriorityForTag_1 =
      _registerName1("preservationPriorityForTag:");
  double _objc_msgSend_197(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> tag,
  ) {
    return __objc_msgSend_197(
      obj,
      sel,
      tag,
    );
  }

  late final __objc_msgSend_197Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_197 = __objc_msgSend_197Ptr.asFunction<
      double Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _class_NSDate1 = _getClass1("NSDate");
  late final _sel_timeIntervalSinceReferenceDate1 =
      _registerName1("timeIntervalSinceReferenceDate");
  late final _sel_initWithTimeIntervalSinceReferenceDate_1 =
      _registerName1("initWithTimeIntervalSinceReferenceDate:");
  late final _sel_timeIntervalSinceDate_1 =
      _registerName1("timeIntervalSinceDate:");
  late final _sel_timeIntervalSinceNow1 =
      _registerName1("timeIntervalSinceNow");
  late final _sel_timeIntervalSince19701 =
      _registerName1("timeIntervalSince1970");
  late final _sel_addTimeInterval_1 = _registerName1("addTimeInterval:");
  late final _sel_dateByAddingTimeInterval_1 =
      _registerName1("dateByAddingTimeInterval:");
  late final _sel_earlierDate_1 = _registerName1("earlierDate:");
  late final _sel_laterDate_1 = _registerName1("laterDate:");
  late final _sel_isEqualToDate_1 = _registerName1("isEqualToDate:");
  late final _sel_date1 = _registerName1("date");
  late final _sel_dateWithTimeIntervalSinceNow_1 =
      _registerName1("dateWithTimeIntervalSinceNow:");
  late final _sel_dateWithTimeIntervalSinceReferenceDate_1 =
      _registerName1("dateWithTimeIntervalSinceReferenceDate:");
  late final _sel_dateWithTimeIntervalSince1970_1 =
      _registerName1("dateWithTimeIntervalSince1970:");
  late final _sel_dateWithTimeInterval_sinceDate_1 =
      _registerName1("dateWithTimeInterval:sinceDate:");
  instancetype _objc_msgSend_198(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    double secsToBeAdded,
    ffi.Pointer<ObjCObject> date,
  ) {
    return __objc_msgSend_198(
      obj,
      sel,
      secsToBeAdded,
      date,
    );
  }

  late final __objc_msgSend_198Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSTimeInterval, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_198 = __objc_msgSend_198Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          double, ffi.Pointer<ObjCObject>)>();

  late final _sel_distantFuture1 = _registerName1("distantFuture");
  late final _sel_distantPast1 = _registerName1("distantPast");
  late final _sel_now1 = _registerName1("now");
  late final _sel_initWithTimeIntervalSinceNow_1 =
      _registerName1("initWithTimeIntervalSinceNow:");
  late final _sel_initWithTimeIntervalSince1970_1 =
      _registerName1("initWithTimeIntervalSince1970:");
  late final _sel_initWithTimeInterval_sinceDate_1 =
      _registerName1("initWithTimeInterval:sinceDate:");
  late final _sel_dateWithNaturalLanguageString_locale_1 =
      _registerName1("dateWithNaturalLanguageString:locale:");
  late final _sel_dateWithNaturalLanguageString_1 =
      _registerName1("dateWithNaturalLanguageString:");
  late final _sel_dateWithString_1 = _registerName1("dateWithString:");
  late final _sel_dateWithCalendarFormat_timeZone_1 =
      _registerName1("dateWithCalendarFormat:timeZone:");
  late final _sel_descriptionWithCalendarFormat_timeZone_locale_1 =
      _registerName1("descriptionWithCalendarFormat:timeZone:locale:");
  late final _class_NSCoder1 = _getClass1("NSCoder");
  late final _sel_encodeValueOfObjCType_at_1 =
      _registerName1("encodeValueOfObjCType:at:");
  void _objc_msgSend_199(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Char> type,
    ffi.Pointer<ffi.Void> addr,
  ) {
    return __objc_msgSend_199(
      obj,
      sel,
      type,
      addr,
    );
  }

  late final __objc_msgSend_199Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>>('objc_msgSend');
  late final __objc_msgSend_199 = __objc_msgSend_199Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  late final _sel_encodeDataObject_1 = _registerName1("encodeDataObject:");
  late final _sel_decodeDataObject1 = _registerName1("decodeDataObject");
  late final _sel_decodeValueOfObjCType_at_size_1 =
      _registerName1("decodeValueOfObjCType:at:size:");
  void _objc_msgSend_200(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Char> type,
    ffi.Pointer<ffi.Void> data,
    int size,
  ) {
    return __objc_msgSend_200(
      obj,
      sel,
      type,
      data,
      size,
    );
  }

  late final __objc_msgSend_200Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>,
              NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_200 = __objc_msgSend_200Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>, int)>();

  late final _sel_versionForClassName_1 =
      _registerName1("versionForClassName:");
  int _objc_msgSend_201(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> className,
  ) {
    return __objc_msgSend_201(
      obj,
      sel,
      className,
    );
  }

  late final __objc_msgSend_201Ptr = _lookup<
      ffi.NativeFunction<
          NSInteger Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_201 = __objc_msgSend_201Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_encodeObject_1 = _registerName1("encodeObject:");
  late final _sel_encodeRootObject_1 = _registerName1("encodeRootObject:");
  late final _sel_encodeBycopyObject_1 = _registerName1("encodeBycopyObject:");
  late final _sel_encodeByrefObject_1 = _registerName1("encodeByrefObject:");
  late final _sel_encodeConditionalObject_1 =
      _registerName1("encodeConditionalObject:");
  late final _sel_encodeValuesOfObjCTypes_1 =
      _registerName1("encodeValuesOfObjCTypes:");
  late final _sel_encodeArrayOfObjCType_count_at_1 =
      _registerName1("encodeArrayOfObjCType:count:at:");
  void _objc_msgSend_202(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Char> type,
    int count,
    ffi.Pointer<ffi.Void> array,
  ) {
    return __objc_msgSend_202(
      obj,
      sel,
      type,
      count,
      array,
    );
  }

  late final __objc_msgSend_202Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Char>,
              NSUInteger,
              ffi.Pointer<ffi.Void>)>>('objc_msgSend');
  late final __objc_msgSend_202 = __objc_msgSend_202Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Void>)>();

  late final _sel_encodeBytes_length_1 = _registerName1("encodeBytes:length:");
  late final _sel_decodeObject1 = _registerName1("decodeObject");
  late final _sel_decodeTopLevelObjectAndReturnError_1 =
      _registerName1("decodeTopLevelObjectAndReturnError:");
  ffi.Pointer<ObjCObject> _objc_msgSend_203(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_203(
      obj,
      sel,
      error,
    );
  }

  late final __objc_msgSend_203Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_203 = __objc_msgSend_203Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_decodeValuesOfObjCTypes_1 =
      _registerName1("decodeValuesOfObjCTypes:");
  late final _sel_decodeArrayOfObjCType_count_at_1 =
      _registerName1("decodeArrayOfObjCType:count:at:");
  late final _sel_decodeBytesWithReturnedLength_1 =
      _registerName1("decodeBytesWithReturnedLength:");
  ffi.Pointer<ffi.Void> _objc_msgSend_204(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<NSUInteger> lengthp,
  ) {
    return __objc_msgSend_204(
      obj,
      sel,
      lengthp,
    );
  }

  late final __objc_msgSend_204Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<NSUInteger>)>>('objc_msgSend');
  late final __objc_msgSend_204 = __objc_msgSend_204Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<NSUInteger>)>();

  late final _sel_encodePropertyList_1 = _registerName1("encodePropertyList:");
  late final _sel_decodePropertyList1 = _registerName1("decodePropertyList");
  late final _sel_setObjectZone_1 = _registerName1("setObjectZone:");
  void _objc_msgSend_205(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<NSZone> zone,
  ) {
    return __objc_msgSend_205(
      obj,
      sel,
      zone,
    );
  }

  late final __objc_msgSend_205Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<NSZone>)>>('objc_msgSend');
  late final __objc_msgSend_205 = __objc_msgSend_205Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<NSZone>)>();

  late final _sel_objectZone1 = _registerName1("objectZone");
  ffi.Pointer<NSZone> _objc_msgSend_206(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_206(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_206Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NSZone> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_206 = __objc_msgSend_206Ptr.asFunction<
      ffi.Pointer<NSZone> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_systemVersion1 = _registerName1("systemVersion");
  late final _sel_allowsKeyedCoding1 = _registerName1("allowsKeyedCoding");
  late final _sel_encodeObject_forKey_1 =
      _registerName1("encodeObject:forKey:");
  late final _sel_encodeConditionalObject_forKey_1 =
      _registerName1("encodeConditionalObject:forKey:");
  late final _sel_encodeBool_forKey_1 = _registerName1("encodeBool:forKey:");
  void _objc_msgSend_207(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    bool value,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_207(
      obj,
      sel,
      value,
      key,
    );
  }

  late final __objc_msgSend_207Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Bool, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_207 = __objc_msgSend_207Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, bool,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_encodeInt_forKey_1 = _registerName1("encodeInt:forKey:");
  void _objc_msgSend_208(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_208(
      obj,
      sel,
      value,
      key,
    );
  }

  late final __objc_msgSend_208Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_208 = __objc_msgSend_208Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_encodeInt32_forKey_1 = _registerName1("encodeInt32:forKey:");
  void _objc_msgSend_209(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_209(
      obj,
      sel,
      value,
      key,
    );
  }

  late final __objc_msgSend_209Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_209 = __objc_msgSend_209Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_encodeInt64_forKey_1 = _registerName1("encodeInt64:forKey:");
  void _objc_msgSend_210(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_210(
      obj,
      sel,
      value,
      key,
    );
  }

  late final __objc_msgSend_210Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int64, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_210 = __objc_msgSend_210Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_encodeFloat_forKey_1 = _registerName1("encodeFloat:forKey:");
  void _objc_msgSend_211(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    double value,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_211(
      obj,
      sel,
      value,
      key,
    );
  }

  late final __objc_msgSend_211Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Float, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_211 = __objc_msgSend_211Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, double,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_encodeDouble_forKey_1 =
      _registerName1("encodeDouble:forKey:");
  late final _sel_encodeBytes_length_forKey_1 =
      _registerName1("encodeBytes:length:forKey:");
  void _objc_msgSend_212(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Uint8> bytes,
    int length,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_212(
      obj,
      sel,
      bytes,
      length,
      key,
    );
  }

  late final __objc_msgSend_212Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Uint8>,
              NSUInteger,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_212 = __objc_msgSend_212Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ObjCObject>)>();

  late final _sel_containsValueForKey_1 =
      _registerName1("containsValueForKey:");
  late final _sel_decodeObjectForKey_1 = _registerName1("decodeObjectForKey:");
  late final _sel_decodeTopLevelObjectForKey_error_1 =
      _registerName1("decodeTopLevelObjectForKey:error:");
  late final _sel_decodeBoolForKey_1 = _registerName1("decodeBoolForKey:");
  late final _sel_decodeIntForKey_1 = _registerName1("decodeIntForKey:");
  int _objc_msgSend_213(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_213(
      obj,
      sel,
      key,
    );
  }

  late final __objc_msgSend_213Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_213 = __objc_msgSend_213Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_decodeInt32ForKey_1 = _registerName1("decodeInt32ForKey:");
  int _objc_msgSend_214(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_214(
      obj,
      sel,
      key,
    );
  }

  late final __objc_msgSend_214Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_214 = __objc_msgSend_214Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_decodeInt64ForKey_1 = _registerName1("decodeInt64ForKey:");
  int _objc_msgSend_215(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_215(
      obj,
      sel,
      key,
    );
  }

  late final __objc_msgSend_215Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_215 = __objc_msgSend_215Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_decodeFloatForKey_1 = _registerName1("decodeFloatForKey:");
  double _objc_msgSend_216(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_216(
      obj,
      sel,
      key,
    );
  }

  late final __objc_msgSend_216Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_216 = __objc_msgSend_216Ptr.asFunction<
      double Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_decodeDoubleForKey_1 = _registerName1("decodeDoubleForKey:");
  late final _sel_decodeBytesForKey_returnedLength_1 =
      _registerName1("decodeBytesForKey:returnedLength:");
  ffi.Pointer<ffi.Uint8> _objc_msgSend_217(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> key,
    ffi.Pointer<NSUInteger> lengthp,
  ) {
    return __objc_msgSend_217(
      obj,
      sel,
      key,
      lengthp,
    );
  }

  late final __objc_msgSend_217Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<NSUInteger>)>>('objc_msgSend');
  late final __objc_msgSend_217 = __objc_msgSend_217Ptr.asFunction<
      ffi.Pointer<ffi.Uint8> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<NSUInteger>)>();

  late final _sel_encodeInteger_forKey_1 =
      _registerName1("encodeInteger:forKey:");
  void _objc_msgSend_218(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_218(
      obj,
      sel,
      value,
      key,
    );
  }

  late final __objc_msgSend_218Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSInteger, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_218 = __objc_msgSend_218Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_decodeIntegerForKey_1 =
      _registerName1("decodeIntegerForKey:");
  late final _sel_requiresSecureCoding1 =
      _registerName1("requiresSecureCoding");
  late final _sel_decodeObjectOfClass_forKey_1 =
      _registerName1("decodeObjectOfClass:forKey:");
  late final _sel_decodeTopLevelObjectOfClass_forKey_error_1 =
      _registerName1("decodeTopLevelObjectOfClass:forKey:error:");
  ffi.Pointer<ObjCObject> _objc_msgSend_219(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> aClass,
    ffi.Pointer<ObjCObject> key,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_219(
      obj,
      sel,
      aClass,
      key,
      error,
    );
  }

  late final __objc_msgSend_219Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_219 = __objc_msgSend_219Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_decodeArrayOfObjectsOfClass_forKey_1 =
      _registerName1("decodeArrayOfObjectsOfClass:forKey:");
  late final _sel_decodeDictionaryWithKeysOfClass_objectsOfClass_forKey_1 =
      _registerName1("decodeDictionaryWithKeysOfClass:objectsOfClass:forKey:");
  late final _sel_decodeObjectOfClasses_forKey_1 =
      _registerName1("decodeObjectOfClasses:forKey:");
  late final _sel_decodeTopLevelObjectOfClasses_forKey_error_1 =
      _registerName1("decodeTopLevelObjectOfClasses:forKey:error:");
  late final _sel_decodeArrayOfObjectsOfClasses_forKey_1 =
      _registerName1("decodeArrayOfObjectsOfClasses:forKey:");
  late final _sel_decodeDictionaryWithKeysOfClasses_objectsOfClasses_forKey_1 =
      _registerName1(
          "decodeDictionaryWithKeysOfClasses:objectsOfClasses:forKey:");
  late final _sel_decodePropertyListForKey_1 =
      _registerName1("decodePropertyListForKey:");
  late final _sel_allowedClasses1 = _registerName1("allowedClasses");
  late final _sel_failWithError_1 = _registerName1("failWithError:");
  late final _sel_decodingFailurePolicy1 =
      _registerName1("decodingFailurePolicy");
  int _objc_msgSend_220(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_220(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_220Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_220 = __objc_msgSend_220Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_error1 = _registerName1("error");
  late final _sel_encodeNXObject_1 = _registerName1("encodeNXObject:");
  late final _sel_decodeNXObject1 = _registerName1("decodeNXObject");
  late final _sel_decodeValueOfObjCType_at_1 =
      _registerName1("decodeValueOfObjCType:at:");
  late final _sel_encodePoint_1 = _registerName1("encodePoint:");
  void _objc_msgSend_221(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSPoint point,
  ) {
    return __objc_msgSend_221(
      obj,
      sel,
      point,
    );
  }

  late final __objc_msgSend_221Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSPoint)>>('objc_msgSend');
  late final __objc_msgSend_221 = __objc_msgSend_221Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSPoint)>();

  late final _sel_decodePoint1 = _registerName1("decodePoint");
  late final _sel_encodeSize_1 = _registerName1("encodeSize:");
  void _objc_msgSend_222(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSSize size,
  ) {
    return __objc_msgSend_222(
      obj,
      sel,
      size,
    );
  }

  late final __objc_msgSend_222Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSSize)>>('objc_msgSend');
  late final __objc_msgSend_222 = __objc_msgSend_222Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSSize)>();

  late final _sel_decodeSize1 = _registerName1("decodeSize");
  late final _sel_encodeRect_1 = _registerName1("encodeRect:");
  void _objc_msgSend_223(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRect rect,
  ) {
    return __objc_msgSend_223(
      obj,
      sel,
      rect,
    );
  }

  late final __objc_msgSend_223Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSRect)>>('objc_msgSend');
  late final __objc_msgSend_223 = __objc_msgSend_223Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSRect)>();

  late final _sel_decodeRect1 = _registerName1("decodeRect");
  late final _sel_encodePoint_forKey_1 = _registerName1("encodePoint:forKey:");
  void _objc_msgSend_224(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSPoint point,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_224(
      obj,
      sel,
      point,
      key,
    );
  }

  late final __objc_msgSend_224Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSPoint, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_224 = __objc_msgSend_224Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSPoint,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_encodeSize_forKey_1 = _registerName1("encodeSize:forKey:");
  void _objc_msgSend_225(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSSize size,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_225(
      obj,
      sel,
      size,
      key,
    );
  }

  late final __objc_msgSend_225Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSSize, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_225 = __objc_msgSend_225Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSSize,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_encodeRect_forKey_1 = _registerName1("encodeRect:forKey:");
  void _objc_msgSend_226(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRect rect,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_226(
      obj,
      sel,
      rect,
      key,
    );
  }

  late final __objc_msgSend_226Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSRect, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_226 = __objc_msgSend_226Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSRect,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_decodePointForKey_1 = _registerName1("decodePointForKey:");
  NSPoint _objc_msgSend_227(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_227(
      obj,
      sel,
      key,
    );
  }

  late final __objc_msgSend_227Ptr = _lookup<
      ffi.NativeFunction<
          NSPoint Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_227 = __objc_msgSend_227Ptr.asFunction<
      NSPoint Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_decodeSizeForKey_1 = _registerName1("decodeSizeForKey:");
  NSSize _objc_msgSend_228(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_228(
      obj,
      sel,
      key,
    );
  }

  late final __objc_msgSend_228Ptr = _lookup<
      ffi.NativeFunction<
          NSSize Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_228 = __objc_msgSend_228Ptr.asFunction<
      NSSize Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_decodeRectForKey_1 = _registerName1("decodeRectForKey:");
  NSRect _objc_msgSend_229(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_229(
      obj,
      sel,
      key,
    );
  }

  late final __objc_msgSend_229Ptr = _lookup<
      ffi.NativeFunction<
          NSRect Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_229 = __objc_msgSend_229Ptr.asFunction<
      NSRect Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _class_NSData1 = _getClass1("NSData");
  late final _sel_bytes1 = _registerName1("bytes");
  late final _sel_getBytes_length_1 = _registerName1("getBytes:length:");
  late final _sel_getBytes_range_1 = _registerName1("getBytes:range:");
  void _objc_msgSend_230(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Void> buffer,
    NSRange range,
  ) {
    return __objc_msgSend_230(
      obj,
      sel,
      buffer,
      range,
    );
  }

  late final __objc_msgSend_230Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Void>, NSRange)>>('objc_msgSend');
  late final __objc_msgSend_230 = __objc_msgSend_230Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Void>, NSRange)>();

  late final _sel_isEqualToData_1 = _registerName1("isEqualToData:");
  late final _sel_subdataWithRange_1 = _registerName1("subdataWithRange:");
  late final _sel_writeToFile_options_error_1 =
      _registerName1("writeToFile:options:error:");
  bool _objc_msgSend_231(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> path,
    int writeOptionsMask,
    ffi.Pointer<ffi.Pointer<ObjCObject>> errorPtr,
  ) {
    return __objc_msgSend_231(
      obj,
      sel,
      path,
      writeOptionsMask,
      errorPtr,
    );
  }

  late final __objc_msgSend_231Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_231 = __objc_msgSend_231Ptr.asFunction<
      bool Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          int,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_writeToURL_options_error_1 =
      _registerName1("writeToURL:options:error:");
  late final _sel_rangeOfData_options_range_1 =
      _registerName1("rangeOfData:options:range:");
  NSRange _objc_msgSend_232(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> dataToFind,
    int mask,
    NSRange searchRange,
  ) {
    return __objc_msgSend_232(
      obj,
      sel,
      dataToFind,
      mask,
      searchRange,
    );
  }

  late final __objc_msgSend_232Ptr = _lookup<
      ffi.NativeFunction<
          NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Int32, NSRange)>>('objc_msgSend');
  late final __objc_msgSend_232 = __objc_msgSend_232Ptr.asFunction<
      NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int, NSRange)>();

  late final _sel_enumerateByteRangesUsingBlock_1 =
      _registerName1("enumerateByteRangesUsingBlock:");
  void _objc_msgSend_233(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_233(
      obj,
      sel,
      block,
    );
  }

  late final __objc_msgSend_233Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_233 = __objc_msgSend_233Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_data1 = _registerName1("data");
  late final _sel_dataWithBytes_length_1 =
      _registerName1("dataWithBytes:length:");
  instancetype _objc_msgSend_234(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Void> bytes,
    int length,
  ) {
    return __objc_msgSend_234(
      obj,
      sel,
      bytes,
      length,
    );
  }

  late final __objc_msgSend_234Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Void>, NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_234 = __objc_msgSend_234Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Void>, int)>();

  late final _sel_dataWithBytesNoCopy_length_1 =
      _registerName1("dataWithBytesNoCopy:length:");
  late final _sel_dataWithBytesNoCopy_length_freeWhenDone_1 =
      _registerName1("dataWithBytesNoCopy:length:freeWhenDone:");
  instancetype _objc_msgSend_235(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Void> bytes,
    int length,
    bool b,
  ) {
    return __objc_msgSend_235(
      obj,
      sel,
      bytes,
      length,
      b,
    );
  }

  late final __objc_msgSend_235Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Void>, NSUInteger, ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_235 = __objc_msgSend_235Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Void>, int, bool)>();

  late final _sel_dataWithContentsOfFile_options_error_1 =
      _registerName1("dataWithContentsOfFile:options:error:");
  instancetype _objc_msgSend_236(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> path,
    int readOptionsMask,
    ffi.Pointer<ffi.Pointer<ObjCObject>> errorPtr,
  ) {
    return __objc_msgSend_236(
      obj,
      sel,
      path,
      readOptionsMask,
      errorPtr,
    );
  }

  late final __objc_msgSend_236Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_236 = __objc_msgSend_236Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          int,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_dataWithContentsOfURL_options_error_1 =
      _registerName1("dataWithContentsOfURL:options:error:");
  late final _sel_dataWithContentsOfFile_1 =
      _registerName1("dataWithContentsOfFile:");
  late final _sel_dataWithContentsOfURL_1 =
      _registerName1("dataWithContentsOfURL:");
  late final _sel_initWithBytes_length_1 =
      _registerName1("initWithBytes:length:");
  late final _sel_initWithBytesNoCopy_length_1 =
      _registerName1("initWithBytesNoCopy:length:");
  late final _sel_initWithBytesNoCopy_length_freeWhenDone_1 =
      _registerName1("initWithBytesNoCopy:length:freeWhenDone:");
  late final _sel_initWithBytesNoCopy_length_deallocator_1 =
      _registerName1("initWithBytesNoCopy:length:deallocator:");
  instancetype _objc_msgSend_237(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Void> bytes,
    int length,
    ffi.Pointer<_ObjCBlock> deallocator,
  ) {
    return __objc_msgSend_237(
      obj,
      sel,
      bytes,
      length,
      deallocator,
    );
  }

  late final __objc_msgSend_237Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Void>,
              NSUInteger,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_237 = __objc_msgSend_237Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_initWithContentsOfFile_options_error_1 =
      _registerName1("initWithContentsOfFile:options:error:");
  late final _sel_initWithContentsOfURL_options_error_1 =
      _registerName1("initWithContentsOfURL:options:error:");
  late final _sel_initWithData_1 = _registerName1("initWithData:");
  late final _sel_dataWithData_1 = _registerName1("dataWithData:");
  late final _sel_initWithBase64EncodedString_options_1 =
      _registerName1("initWithBase64EncodedString:options:");
  instancetype _objc_msgSend_238(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> base64String,
    int options,
  ) {
    return __objc_msgSend_238(
      obj,
      sel,
      base64String,
      options,
    );
  }

  late final __objc_msgSend_238Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_238 = __objc_msgSend_238Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int)>();

  late final _sel_base64EncodedStringWithOptions_1 =
      _registerName1("base64EncodedStringWithOptions:");
  ffi.Pointer<ObjCObject> _objc_msgSend_239(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int options,
  ) {
    return __objc_msgSend_239(
      obj,
      sel,
      options,
    );
  }

  late final __objc_msgSend_239Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_239 = __objc_msgSend_239Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithBase64EncodedData_options_1 =
      _registerName1("initWithBase64EncodedData:options:");
  late final _sel_base64EncodedDataWithOptions_1 =
      _registerName1("base64EncodedDataWithOptions:");
  late final _sel_decompressedDataUsingAlgorithm_error_1 =
      _registerName1("decompressedDataUsingAlgorithm:error:");
  instancetype _objc_msgSend_240(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int algorithm,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_240(
      obj,
      sel,
      algorithm,
      error,
    );
  }

  late final __objc_msgSend_240Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_240 = __objc_msgSend_240Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_compressedDataUsingAlgorithm_error_1 =
      _registerName1("compressedDataUsingAlgorithm:error:");
  late final _sel_getBytes_1 = _registerName1("getBytes:");
  late final _sel_dataWithContentsOfMappedFile_1 =
      _registerName1("dataWithContentsOfMappedFile:");
  late final _sel_initWithContentsOfMappedFile_1 =
      _registerName1("initWithContentsOfMappedFile:");
  late final _sel_initWithBase64Encoding_1 =
      _registerName1("initWithBase64Encoding:");
  late final _sel_base64Encoding1 = _registerName1("base64Encoding");
  late final _class_NSMutableData1 = _getClass1("NSMutableData");
  late final _sel_mutableBytes1 = _registerName1("mutableBytes");
  late final _sel_setLength_1 = _registerName1("setLength:");
  void _objc_msgSend_241(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_241(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_241Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_241 = __objc_msgSend_241Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_appendBytes_length_1 = _registerName1("appendBytes:length:");
  late final _sel_appendData_1 = _registerName1("appendData:");
  late final _sel_increaseLengthBy_1 = _registerName1("increaseLengthBy:");
  late final _sel_replaceBytesInRange_withBytes_1 =
      _registerName1("replaceBytesInRange:withBytes:");
  void _objc_msgSend_242(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange range,
    ffi.Pointer<ffi.Void> bytes,
  ) {
    return __objc_msgSend_242(
      obj,
      sel,
      range,
      bytes,
    );
  }

  late final __objc_msgSend_242Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSRange, ffi.Pointer<ffi.Void>)>>('objc_msgSend');
  late final __objc_msgSend_242 = __objc_msgSend_242Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSRange,
          ffi.Pointer<ffi.Void>)>();

  late final _sel_resetBytesInRange_1 = _registerName1("resetBytesInRange:");
  late final _sel_setData_1 = _registerName1("setData:");
  late final _sel_replaceBytesInRange_withBytes_length_1 =
      _registerName1("replaceBytesInRange:withBytes:length:");
  void _objc_msgSend_243(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange range,
    ffi.Pointer<ffi.Void> replacementBytes,
    int replacementLength,
  ) {
    return __objc_msgSend_243(
      obj,
      sel,
      range,
      replacementBytes,
      replacementLength,
    );
  }

  late final __objc_msgSend_243Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSRange, ffi.Pointer<ffi.Void>, NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_243 = __objc_msgSend_243Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSRange,
          ffi.Pointer<ffi.Void>, int)>();

  late final _sel_dataWithCapacity_1 = _registerName1("dataWithCapacity:");
  late final _sel_dataWithLength_1 = _registerName1("dataWithLength:");
  late final _sel_initWithLength_1 = _registerName1("initWithLength:");
  late final _sel_decompressUsingAlgorithm_error_1 =
      _registerName1("decompressUsingAlgorithm:error:");
  bool _objc_msgSend_244(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int algorithm,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_244(
      obj,
      sel,
      algorithm,
      error,
    );
  }

  late final __objc_msgSend_244Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_244 = __objc_msgSend_244Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_compressUsingAlgorithm_error_1 =
      _registerName1("compressUsingAlgorithm:error:");
  late final _class_NSAttributedString1 = _getClass1("NSAttributedString");
  late final _sel_attributesAtIndex_effectiveRange_1 =
      _registerName1("attributesAtIndex:effectiveRange:");
  ffi.Pointer<ObjCObject> _objc_msgSend_245(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int location,
    NSRangePointer range,
  ) {
    return __objc_msgSend_245(
      obj,
      sel,
      location,
      range,
    );
  }

  late final __objc_msgSend_245Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              NSUInteger,
              NSRangePointer)>>('objc_msgSend');
  late final __objc_msgSend_245 = __objc_msgSend_245Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, int, NSRangePointer)>();

  late final _sel_attribute_atIndex_effectiveRange_1 =
      _registerName1("attribute:atIndex:effectiveRange:");
  ffi.Pointer<ObjCObject> _objc_msgSend_246(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSAttributedStringKey attrName,
    int location,
    NSRangePointer range,
  ) {
    return __objc_msgSend_246(
      obj,
      sel,
      attrName,
      location,
      range,
    );
  }

  late final __objc_msgSend_246Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              NSAttributedStringKey,
              NSUInteger,
              NSRangePointer)>>('objc_msgSend');
  late final __objc_msgSend_246 = __objc_msgSend_246Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, NSAttributedStringKey, int, NSRangePointer)>();

  late final _sel_attributedSubstringFromRange_1 =
      _registerName1("attributedSubstringFromRange:");
  late final _sel_attributesAtIndex_longestEffectiveRange_inRange_1 =
      _registerName1("attributesAtIndex:longestEffectiveRange:inRange:");
  ffi.Pointer<ObjCObject> _objc_msgSend_247(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int location,
    NSRangePointer range,
    NSRange rangeLimit,
  ) {
    return __objc_msgSend_247(
      obj,
      sel,
      location,
      range,
      rangeLimit,
    );
  }

  late final __objc_msgSend_247Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              NSUInteger,
              NSRangePointer,
              NSRange)>>('objc_msgSend');
  late final __objc_msgSend_247 = __objc_msgSend_247Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, int, NSRangePointer, NSRange)>();

  late final _sel_attribute_atIndex_longestEffectiveRange_inRange_1 =
      _registerName1("attribute:atIndex:longestEffectiveRange:inRange:");
  ffi.Pointer<ObjCObject> _objc_msgSend_248(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSAttributedStringKey attrName,
    int location,
    NSRangePointer range,
    NSRange rangeLimit,
  ) {
    return __objc_msgSend_248(
      obj,
      sel,
      attrName,
      location,
      range,
      rangeLimit,
    );
  }

  late final __objc_msgSend_248Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              NSAttributedStringKey,
              NSUInteger,
              NSRangePointer,
              NSRange)>>('objc_msgSend');
  late final __objc_msgSend_248 = __objc_msgSend_248Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          NSAttributedStringKey,
          int,
          NSRangePointer,
          NSRange)>();

  late final _sel_isEqualToAttributedString_1 =
      _registerName1("isEqualToAttributedString:");
  late final _sel_initWithString_attributes_1 =
      _registerName1("initWithString:attributes:");
  late final _sel_initWithAttributedString_1 =
      _registerName1("initWithAttributedString:");
  late final _sel_enumerateAttributesInRange_options_usingBlock_1 =
      _registerName1("enumerateAttributesInRange:options:usingBlock:");
  void _objc_msgSend_249(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange enumerationRange,
    int opts,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_249(
      obj,
      sel,
      enumerationRange,
      opts,
      block,
    );
  }

  late final __objc_msgSend_249Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSRange, ffi.Int32, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_249 = __objc_msgSend_249Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSRange, int,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_enumerateAttribute_inRange_options_usingBlock_1 =
      _registerName1("enumerateAttribute:inRange:options:usingBlock:");
  void _objc_msgSend_250(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSAttributedStringKey attrName,
    NSRange enumerationRange,
    int opts,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_250(
      obj,
      sel,
      attrName,
      enumerationRange,
      opts,
      block,
    );
  }

  late final __objc_msgSend_250Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              NSAttributedStringKey,
              NSRange,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_250 = __objc_msgSend_250Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          NSAttributedStringKey, NSRange, int, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_initWithContentsOfMarkdownFileAtURL_options_baseURL_error_1 =
      _registerName1(
          "initWithContentsOfMarkdownFileAtURL:options:baseURL:error:");
  instancetype _objc_msgSend_251(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> markdownFile,
    ffi.Pointer<ObjCObject> options,
    ffi.Pointer<ObjCObject> baseURL,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_251(
      obj,
      sel,
      markdownFile,
      options,
      baseURL,
      error,
    );
  }

  late final __objc_msgSend_251Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_251 = __objc_msgSend_251Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_initWithMarkdown_options_baseURL_error_1 =
      _registerName1("initWithMarkdown:options:baseURL:error:");
  late final _sel_initWithMarkdownString_options_baseURL_error_1 =
      _registerName1("initWithMarkdownString:options:baseURL:error:");
  late final _sel_initWithFormat_options_locale_1 =
      _registerName1("initWithFormat:options:locale:");
  instancetype _objc_msgSend_252(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> format,
    int options,
    ffi.Pointer<ObjCObject> locale,
  ) {
    return __objc_msgSend_252(
      obj,
      sel,
      format,
      options,
      locale,
    );
  }

  late final __objc_msgSend_252Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_252 = __objc_msgSend_252Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int, ffi.Pointer<ObjCObject>)>();

  late final _sel_initWithFormat_options_locale_arguments_1 =
      _registerName1("initWithFormat:options:locale:arguments:");
  instancetype _objc_msgSend_253(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> format,
    int options,
    ffi.Pointer<ObjCObject> locale,
    ffi.Pointer<__va_list_tag> arguments,
  ) {
    return __objc_msgSend_253(
      obj,
      sel,
      format,
      options,
      locale,
      arguments,
    );
  }

  late final __objc_msgSend_253Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<__va_list_tag>)>>('objc_msgSend');
  late final __objc_msgSend_253 = __objc_msgSend_253Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          int,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<__va_list_tag>)>();

  late final _sel_localizedAttributedStringWithFormat_1 =
      _registerName1("localizedAttributedStringWithFormat:");
  late final _sel_localizedAttributedStringWithFormat_options_1 =
      _registerName1("localizedAttributedStringWithFormat:options:");
  instancetype _objc_msgSend_254(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> format,
    int options,
  ) {
    return __objc_msgSend_254(
      obj,
      sel,
      format,
      options,
    );
  }

  late final __objc_msgSend_254Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_254 = __objc_msgSend_254Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int)>();

  late final _sel_attributedStringByInflectingString1 =
      _registerName1("attributedStringByInflectingString");
  late final _class_NSMutableAttributedString1 =
      _getClass1("NSMutableAttributedString");
  late final _sel_setAttributes_range_1 =
      _registerName1("setAttributes:range:");
  late final _sel_mutableString1 = _registerName1("mutableString");
  late final _sel_addAttribute_value_range_1 =
      _registerName1("addAttribute:value:range:");
  void _objc_msgSend_255(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSAttributedStringKey name,
    ffi.Pointer<ObjCObject> value,
    NSRange range,
  ) {
    return __objc_msgSend_255(
      obj,
      sel,
      name,
      value,
      range,
    );
  }

  late final __objc_msgSend_255Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              NSAttributedStringKey,
              ffi.Pointer<ObjCObject>,
              NSRange)>>('objc_msgSend');
  late final __objc_msgSend_255 = __objc_msgSend_255Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          NSAttributedStringKey, ffi.Pointer<ObjCObject>, NSRange)>();

  late final _sel_addAttributes_range_1 =
      _registerName1("addAttributes:range:");
  late final _sel_removeAttribute_range_1 =
      _registerName1("removeAttribute:range:");
  late final _sel_replaceCharactersInRange_withAttributedString_1 =
      _registerName1("replaceCharactersInRange:withAttributedString:");
  late final _sel_insertAttributedString_atIndex_1 =
      _registerName1("insertAttributedString:atIndex:");
  late final _sel_appendAttributedString_1 =
      _registerName1("appendAttributedString:");
  late final _sel_setAttributedString_1 =
      _registerName1("setAttributedString:");
  late final _sel_beginEditing1 = _registerName1("beginEditing");
  late final _sel_endEditing1 = _registerName1("endEditing");
  late final _sel_appendLocalizedFormat_1 =
      _registerName1("appendLocalizedFormat:");
  late final _class_NSDateFormatter1 = _getClass1("NSDateFormatter");
  late final _class_NSFormatter1 = _getClass1("NSFormatter");
  late final _sel_stringForObjectValue_1 =
      _registerName1("stringForObjectValue:");
  late final _sel_attributedStringForObjectValue_withDefaultAttributes_1 =
      _registerName1("attributedStringForObjectValue:withDefaultAttributes:");
  late final _sel_editingStringForObjectValue_1 =
      _registerName1("editingStringForObjectValue:");
  late final _sel_getObjectValue_forString_errorDescription_1 =
      _registerName1("getObjectValue:forString:errorDescription:");
  late final _sel_isPartialStringValid_newEditingString_errorDescription_1 =
      _registerName1("isPartialStringValid:newEditingString:errorDescription:");
  bool _objc_msgSend_256(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> partialString,
    ffi.Pointer<ffi.Pointer<ObjCObject>> newString,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_256(
      obj,
      sel,
      partialString,
      newString,
      error,
    );
  }

  late final __objc_msgSend_256Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_256 = __objc_msgSend_256Ptr.asFunction<
      bool Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_isPartialStringValid_proposedSelectedRange_originalString_originalSelectedRange_errorDescription_1 =
      _registerName1(
          "isPartialStringValid:proposedSelectedRange:originalString:originalSelectedRange:errorDescription:");
  bool _objc_msgSend_257(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Pointer<ObjCObject>> partialStringPtr,
    NSRangePointer proposedSelRangePtr,
    ffi.Pointer<ObjCObject> origString,
    NSRange origSelRange,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_257(
      obj,
      sel,
      partialStringPtr,
      proposedSelRangePtr,
      origString,
      origSelRange,
      error,
    );
  }

  late final __objc_msgSend_257Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>,
              NSRangePointer,
              ffi.Pointer<ObjCObject>,
              NSRange,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_257 = __objc_msgSend_257Ptr.asFunction<
      bool Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>,
          NSRangePointer,
          ffi.Pointer<ObjCObject>,
          NSRange,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_formattingContext1 = _registerName1("formattingContext");
  int _objc_msgSend_258(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_258(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_258Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_258 = __objc_msgSend_258Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setFormattingContext_1 =
      _registerName1("setFormattingContext:");
  void _objc_msgSend_259(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_259(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_259Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_259 = __objc_msgSend_259Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_getObjectValue_forString_range_error_1 =
      _registerName1("getObjectValue:forString:range:error:");
  bool _objc_msgSend_260(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Pointer<ObjCObject>> obj1,
    ffi.Pointer<ObjCObject> string,
    ffi.Pointer<NSRange> rangep,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_260(
      obj,
      sel,
      obj1,
      string,
      rangep,
      error,
    );
  }

  late final __objc_msgSend_260Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<NSRange>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_260 = __objc_msgSend_260Ptr.asFunction<
      bool Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<NSRange>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_stringFromDate_1 = _registerName1("stringFromDate:");
  late final _sel_dateFromString_1 = _registerName1("dateFromString:");
  late final _sel_localizedStringFromDate_dateStyle_timeStyle_1 =
      _registerName1("localizedStringFromDate:dateStyle:timeStyle:");
  ffi.Pointer<ObjCObject> _objc_msgSend_261(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> date,
    int dstyle,
    int tstyle,
  ) {
    return __objc_msgSend_261(
      obj,
      sel,
      date,
      dstyle,
      tstyle,
    );
  }

  late final __objc_msgSend_261Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_261 = __objc_msgSend_261Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>, int, int)>();

  late final _sel_dateFormatFromTemplate_options_locale_1 =
      _registerName1("dateFormatFromTemplate:options:locale:");
  ffi.Pointer<ObjCObject> _objc_msgSend_262(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> tmplate,
    int opts,
    ffi.Pointer<ObjCObject> locale,
  ) {
    return __objc_msgSend_262(
      obj,
      sel,
      tmplate,
      opts,
      locale,
    );
  }

  late final __objc_msgSend_262Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              NSUInteger,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_262 = __objc_msgSend_262Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          int,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_defaultFormatterBehavior1 =
      _registerName1("defaultFormatterBehavior");
  int _objc_msgSend_263(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_263(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_263Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_263 = __objc_msgSend_263Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setDefaultFormatterBehavior_1 =
      _registerName1("setDefaultFormatterBehavior:");
  void _objc_msgSend_264(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_264(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_264Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_264 = __objc_msgSend_264Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_setLocalizedDateFormatFromTemplate_1 =
      _registerName1("setLocalizedDateFormatFromTemplate:");
  late final _sel_dateFormat1 = _registerName1("dateFormat");
  late final _sel_setDateFormat_1 = _registerName1("setDateFormat:");
  late final _sel_dateStyle1 = _registerName1("dateStyle");
  int _objc_msgSend_265(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_265(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_265Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_265 = __objc_msgSend_265Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setDateStyle_1 = _registerName1("setDateStyle:");
  void _objc_msgSend_266(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_266(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_266Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_266 = __objc_msgSend_266Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_timeStyle1 = _registerName1("timeStyle");
  late final _sel_setTimeStyle_1 = _registerName1("setTimeStyle:");
  late final _sel_locale1 = _registerName1("locale");
  late final _sel_setLocale_1 = _registerName1("setLocale:");
  late final _sel_generatesCalendarDates1 =
      _registerName1("generatesCalendarDates");
  late final _sel_setGeneratesCalendarDates_1 =
      _registerName1("setGeneratesCalendarDates:");
  void _objc_msgSend_267(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    bool value,
  ) {
    return __objc_msgSend_267(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_267Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_267 = __objc_msgSend_267Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, bool)>();

  late final _sel_formatterBehavior1 = _registerName1("formatterBehavior");
  late final _sel_setFormatterBehavior_1 =
      _registerName1("setFormatterBehavior:");
  late final _sel_timeZone1 = _registerName1("timeZone");
  late final _sel_setTimeZone_1 = _registerName1("setTimeZone:");
  late final _sel_calendar1 = _registerName1("calendar");
  late final _sel_setCalendar_1 = _registerName1("setCalendar:");
  late final _sel_isLenient1 = _registerName1("isLenient");
  late final _sel_setLenient_1 = _registerName1("setLenient:");
  late final _sel_twoDigitStartDate1 = _registerName1("twoDigitStartDate");
  late final _sel_setTwoDigitStartDate_1 =
      _registerName1("setTwoDigitStartDate:");
  late final _sel_defaultDate1 = _registerName1("defaultDate");
  late final _sel_setDefaultDate_1 = _registerName1("setDefaultDate:");
  late final _sel_eraSymbols1 = _registerName1("eraSymbols");
  late final _sel_setEraSymbols_1 = _registerName1("setEraSymbols:");
  late final _sel_monthSymbols1 = _registerName1("monthSymbols");
  late final _sel_setMonthSymbols_1 = _registerName1("setMonthSymbols:");
  late final _sel_shortMonthSymbols1 = _registerName1("shortMonthSymbols");
  late final _sel_setShortMonthSymbols_1 =
      _registerName1("setShortMonthSymbols:");
  late final _sel_weekdaySymbols1 = _registerName1("weekdaySymbols");
  late final _sel_setWeekdaySymbols_1 = _registerName1("setWeekdaySymbols:");
  late final _sel_shortWeekdaySymbols1 = _registerName1("shortWeekdaySymbols");
  late final _sel_setShortWeekdaySymbols_1 =
      _registerName1("setShortWeekdaySymbols:");
  late final _sel_AMSymbol1 = _registerName1("AMSymbol");
  late final _sel_setAMSymbol_1 = _registerName1("setAMSymbol:");
  late final _sel_PMSymbol1 = _registerName1("PMSymbol");
  late final _sel_setPMSymbol_1 = _registerName1("setPMSymbol:");
  late final _sel_longEraSymbols1 = _registerName1("longEraSymbols");
  late final _sel_setLongEraSymbols_1 = _registerName1("setLongEraSymbols:");
  late final _sel_veryShortMonthSymbols1 =
      _registerName1("veryShortMonthSymbols");
  late final _sel_setVeryShortMonthSymbols_1 =
      _registerName1("setVeryShortMonthSymbols:");
  late final _sel_standaloneMonthSymbols1 =
      _registerName1("standaloneMonthSymbols");
  late final _sel_setStandaloneMonthSymbols_1 =
      _registerName1("setStandaloneMonthSymbols:");
  late final _sel_shortStandaloneMonthSymbols1 =
      _registerName1("shortStandaloneMonthSymbols");
  late final _sel_setShortStandaloneMonthSymbols_1 =
      _registerName1("setShortStandaloneMonthSymbols:");
  late final _sel_veryShortStandaloneMonthSymbols1 =
      _registerName1("veryShortStandaloneMonthSymbols");
  late final _sel_setVeryShortStandaloneMonthSymbols_1 =
      _registerName1("setVeryShortStandaloneMonthSymbols:");
  late final _sel_veryShortWeekdaySymbols1 =
      _registerName1("veryShortWeekdaySymbols");
  late final _sel_setVeryShortWeekdaySymbols_1 =
      _registerName1("setVeryShortWeekdaySymbols:");
  late final _sel_standaloneWeekdaySymbols1 =
      _registerName1("standaloneWeekdaySymbols");
  late final _sel_setStandaloneWeekdaySymbols_1 =
      _registerName1("setStandaloneWeekdaySymbols:");
  late final _sel_shortStandaloneWeekdaySymbols1 =
      _registerName1("shortStandaloneWeekdaySymbols");
  late final _sel_setShortStandaloneWeekdaySymbols_1 =
      _registerName1("setShortStandaloneWeekdaySymbols:");
  late final _sel_veryShortStandaloneWeekdaySymbols1 =
      _registerName1("veryShortStandaloneWeekdaySymbols");
  late final _sel_setVeryShortStandaloneWeekdaySymbols_1 =
      _registerName1("setVeryShortStandaloneWeekdaySymbols:");
  late final _sel_quarterSymbols1 = _registerName1("quarterSymbols");
  late final _sel_setQuarterSymbols_1 = _registerName1("setQuarterSymbols:");
  late final _sel_shortQuarterSymbols1 = _registerName1("shortQuarterSymbols");
  late final _sel_setShortQuarterSymbols_1 =
      _registerName1("setShortQuarterSymbols:");
  late final _sel_standaloneQuarterSymbols1 =
      _registerName1("standaloneQuarterSymbols");
  late final _sel_setStandaloneQuarterSymbols_1 =
      _registerName1("setStandaloneQuarterSymbols:");
  late final _sel_shortStandaloneQuarterSymbols1 =
      _registerName1("shortStandaloneQuarterSymbols");
  late final _sel_setShortStandaloneQuarterSymbols_1 =
      _registerName1("setShortStandaloneQuarterSymbols:");
  late final _sel_gregorianStartDate1 = _registerName1("gregorianStartDate");
  late final _sel_setGregorianStartDate_1 =
      _registerName1("setGregorianStartDate:");
  late final _sel_doesRelativeDateFormatting1 =
      _registerName1("doesRelativeDateFormatting");
  late final _sel_setDoesRelativeDateFormatting_1 =
      _registerName1("setDoesRelativeDateFormatting:");
  late final _sel_initWithDateFormat_allowNaturalLanguage_1 =
      _registerName1("initWithDateFormat:allowNaturalLanguage:");
  late final _sel_allowsNaturalLanguage1 =
      _registerName1("allowsNaturalLanguage");
  late final _class_NSNumberFormatter1 = _getClass1("NSNumberFormatter");
  late final _sel_stringFromNumber_1 = _registerName1("stringFromNumber:");
  late final _sel_numberFromString_1 = _registerName1("numberFromString:");
  late final _sel_localizedStringFromNumber_numberStyle_1 =
      _registerName1("localizedStringFromNumber:numberStyle:");
  ffi.Pointer<ObjCObject> _objc_msgSend_268(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> num,
    int nstyle,
  ) {
    return __objc_msgSend_268(
      obj,
      sel,
      num,
      nstyle,
    );
  }

  late final __objc_msgSend_268Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_268 = __objc_msgSend_268Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>, int)>();

  int _objc_msgSend_269(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_269(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_269Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_269 = __objc_msgSend_269Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_270(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int behavior,
  ) {
    return __objc_msgSend_270(
      obj,
      sel,
      behavior,
    );
  }

  late final __objc_msgSend_270Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_270 = __objc_msgSend_270Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_numberStyle1 = _registerName1("numberStyle");
  int _objc_msgSend_271(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_271(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_271Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_271 = __objc_msgSend_271Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setNumberStyle_1 = _registerName1("setNumberStyle:");
  void _objc_msgSend_272(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_272(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_272Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_272 = __objc_msgSend_272Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_generatesDecimalNumbers1 =
      _registerName1("generatesDecimalNumbers");
  late final _sel_setGeneratesDecimalNumbers_1 =
      _registerName1("setGeneratesDecimalNumbers:");
  void _objc_msgSend_273(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_273(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_273Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_273 = __objc_msgSend_273Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_negativeFormat1 = _registerName1("negativeFormat");
  late final _sel_setNegativeFormat_1 = _registerName1("setNegativeFormat:");
  late final _sel_textAttributesForNegativeValues1 =
      _registerName1("textAttributesForNegativeValues");
  late final _sel_setTextAttributesForNegativeValues_1 =
      _registerName1("setTextAttributesForNegativeValues:");
  late final _sel_positiveFormat1 = _registerName1("positiveFormat");
  late final _sel_setPositiveFormat_1 = _registerName1("setPositiveFormat:");
  late final _sel_textAttributesForPositiveValues1 =
      _registerName1("textAttributesForPositiveValues");
  late final _sel_setTextAttributesForPositiveValues_1 =
      _registerName1("setTextAttributesForPositiveValues:");
  late final _sel_allowsFloats1 = _registerName1("allowsFloats");
  late final _sel_setAllowsFloats_1 = _registerName1("setAllowsFloats:");
  late final _sel_decimalSeparator1 = _registerName1("decimalSeparator");
  late final _sel_setDecimalSeparator_1 =
      _registerName1("setDecimalSeparator:");
  late final _sel_alwaysShowsDecimalSeparator1 =
      _registerName1("alwaysShowsDecimalSeparator");
  late final _sel_setAlwaysShowsDecimalSeparator_1 =
      _registerName1("setAlwaysShowsDecimalSeparator:");
  late final _sel_currencyDecimalSeparator1 =
      _registerName1("currencyDecimalSeparator");
  late final _sel_setCurrencyDecimalSeparator_1 =
      _registerName1("setCurrencyDecimalSeparator:");
  late final _sel_usesGroupingSeparator1 =
      _registerName1("usesGroupingSeparator");
  late final _sel_setUsesGroupingSeparator_1 =
      _registerName1("setUsesGroupingSeparator:");
  late final _sel_groupingSeparator1 = _registerName1("groupingSeparator");
  late final _sel_setGroupingSeparator_1 =
      _registerName1("setGroupingSeparator:");
  late final _sel_zeroSymbol1 = _registerName1("zeroSymbol");
  late final _sel_setZeroSymbol_1 = _registerName1("setZeroSymbol:");
  late final _sel_textAttributesForZero1 =
      _registerName1("textAttributesForZero");
  late final _sel_setTextAttributesForZero_1 =
      _registerName1("setTextAttributesForZero:");
  late final _sel_nilSymbol1 = _registerName1("nilSymbol");
  late final _sel_setNilSymbol_1 = _registerName1("setNilSymbol:");
  late final _sel_textAttributesForNil1 =
      _registerName1("textAttributesForNil");
  late final _sel_setTextAttributesForNil_1 =
      _registerName1("setTextAttributesForNil:");
  late final _sel_notANumberSymbol1 = _registerName1("notANumberSymbol");
  late final _sel_setNotANumberSymbol_1 =
      _registerName1("setNotANumberSymbol:");
  late final _sel_textAttributesForNotANumber1 =
      _registerName1("textAttributesForNotANumber");
  late final _sel_setTextAttributesForNotANumber_1 =
      _registerName1("setTextAttributesForNotANumber:");
  late final _sel_positiveInfinitySymbol1 =
      _registerName1("positiveInfinitySymbol");
  late final _sel_setPositiveInfinitySymbol_1 =
      _registerName1("setPositiveInfinitySymbol:");
  late final _sel_textAttributesForPositiveInfinity1 =
      _registerName1("textAttributesForPositiveInfinity");
  late final _sel_setTextAttributesForPositiveInfinity_1 =
      _registerName1("setTextAttributesForPositiveInfinity:");
  late final _sel_negativeInfinitySymbol1 =
      _registerName1("negativeInfinitySymbol");
  late final _sel_setNegativeInfinitySymbol_1 =
      _registerName1("setNegativeInfinitySymbol:");
  late final _sel_textAttributesForNegativeInfinity1 =
      _registerName1("textAttributesForNegativeInfinity");
  late final _sel_setTextAttributesForNegativeInfinity_1 =
      _registerName1("setTextAttributesForNegativeInfinity:");
  late final _sel_positivePrefix1 = _registerName1("positivePrefix");
  late final _sel_setPositivePrefix_1 = _registerName1("setPositivePrefix:");
  late final _sel_positiveSuffix1 = _registerName1("positiveSuffix");
  late final _sel_setPositiveSuffix_1 = _registerName1("setPositiveSuffix:");
  late final _sel_negativePrefix1 = _registerName1("negativePrefix");
  late final _sel_setNegativePrefix_1 = _registerName1("setNegativePrefix:");
  late final _sel_negativeSuffix1 = _registerName1("negativeSuffix");
  late final _sel_setNegativeSuffix_1 = _registerName1("setNegativeSuffix:");
  late final _sel_currencyCode1 = _registerName1("currencyCode");
  late final _sel_setCurrencyCode_1 = _registerName1("setCurrencyCode:");
  late final _sel_currencySymbol1 = _registerName1("currencySymbol");
  late final _sel_setCurrencySymbol_1 = _registerName1("setCurrencySymbol:");
  late final _sel_internationalCurrencySymbol1 =
      _registerName1("internationalCurrencySymbol");
  late final _sel_setInternationalCurrencySymbol_1 =
      _registerName1("setInternationalCurrencySymbol:");
  late final _sel_percentSymbol1 = _registerName1("percentSymbol");
  late final _sel_setPercentSymbol_1 = _registerName1("setPercentSymbol:");
  late final _sel_perMillSymbol1 = _registerName1("perMillSymbol");
  late final _sel_setPerMillSymbol_1 = _registerName1("setPerMillSymbol:");
  late final _sel_minusSign1 = _registerName1("minusSign");
  late final _sel_setMinusSign_1 = _registerName1("setMinusSign:");
  late final _sel_plusSign1 = _registerName1("plusSign");
  late final _sel_setPlusSign_1 = _registerName1("setPlusSign:");
  late final _sel_exponentSymbol1 = _registerName1("exponentSymbol");
  late final _sel_setExponentSymbol_1 = _registerName1("setExponentSymbol:");
  late final _sel_groupingSize1 = _registerName1("groupingSize");
  late final _sel_setGroupingSize_1 = _registerName1("setGroupingSize:");
  late final _sel_secondaryGroupingSize1 =
      _registerName1("secondaryGroupingSize");
  late final _sel_setSecondaryGroupingSize_1 =
      _registerName1("setSecondaryGroupingSize:");
  late final _sel_multiplier1 = _registerName1("multiplier");
  late final _sel_setMultiplier_1 = _registerName1("setMultiplier:");
  late final _sel_formatWidth1 = _registerName1("formatWidth");
  late final _sel_setFormatWidth_1 = _registerName1("setFormatWidth:");
  late final _sel_paddingCharacter1 = _registerName1("paddingCharacter");
  late final _sel_setPaddingCharacter_1 =
      _registerName1("setPaddingCharacter:");
  late final _sel_paddingPosition1 = _registerName1("paddingPosition");
  int _objc_msgSend_274(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_274(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_274Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_274 = __objc_msgSend_274Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setPaddingPosition_1 = _registerName1("setPaddingPosition:");
  void _objc_msgSend_275(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_275(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_275Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_275 = __objc_msgSend_275Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_roundingMode1 = _registerName1("roundingMode");
  int _objc_msgSend_276(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_276(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_276Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_276 = __objc_msgSend_276Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setRoundingMode_1 = _registerName1("setRoundingMode:");
  void _objc_msgSend_277(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_277(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_277Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_277 = __objc_msgSend_277Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_roundingIncrement1 = _registerName1("roundingIncrement");
  late final _sel_setRoundingIncrement_1 =
      _registerName1("setRoundingIncrement:");
  late final _sel_minimumIntegerDigits1 =
      _registerName1("minimumIntegerDigits");
  late final _sel_setMinimumIntegerDigits_1 =
      _registerName1("setMinimumIntegerDigits:");
  late final _sel_maximumIntegerDigits1 =
      _registerName1("maximumIntegerDigits");
  late final _sel_setMaximumIntegerDigits_1 =
      _registerName1("setMaximumIntegerDigits:");
  late final _sel_minimumFractionDigits1 =
      _registerName1("minimumFractionDigits");
  late final _sel_setMinimumFractionDigits_1 =
      _registerName1("setMinimumFractionDigits:");
  late final _sel_maximumFractionDigits1 =
      _registerName1("maximumFractionDigits");
  late final _sel_setMaximumFractionDigits_1 =
      _registerName1("setMaximumFractionDigits:");
  late final _sel_minimum1 = _registerName1("minimum");
  late final _sel_setMinimum_1 = _registerName1("setMinimum:");
  late final _sel_maximum1 = _registerName1("maximum");
  late final _sel_setMaximum_1 = _registerName1("setMaximum:");
  late final _sel_currencyGroupingSeparator1 =
      _registerName1("currencyGroupingSeparator");
  late final _sel_setCurrencyGroupingSeparator_1 =
      _registerName1("setCurrencyGroupingSeparator:");
  late final _sel_usesSignificantDigits1 =
      _registerName1("usesSignificantDigits");
  late final _sel_setUsesSignificantDigits_1 =
      _registerName1("setUsesSignificantDigits:");
  late final _sel_minimumSignificantDigits1 =
      _registerName1("minimumSignificantDigits");
  late final _sel_setMinimumSignificantDigits_1 =
      _registerName1("setMinimumSignificantDigits:");
  late final _sel_maximumSignificantDigits1 =
      _registerName1("maximumSignificantDigits");
  late final _sel_setMaximumSignificantDigits_1 =
      _registerName1("setMaximumSignificantDigits:");
  late final _sel_isPartialStringValidationEnabled1 =
      _registerName1("isPartialStringValidationEnabled");
  late final _sel_setPartialStringValidationEnabled_1 =
      _registerName1("setPartialStringValidationEnabled:");
  late final _sel_hasThousandSeparators1 =
      _registerName1("hasThousandSeparators");
  late final _sel_setHasThousandSeparators_1 =
      _registerName1("setHasThousandSeparators:");
  late final _sel_thousandSeparator1 = _registerName1("thousandSeparator");
  late final _sel_setThousandSeparator_1 =
      _registerName1("setThousandSeparator:");
  late final _sel_localizesFormat1 = _registerName1("localizesFormat");
  late final _sel_setLocalizesFormat_1 = _registerName1("setLocalizesFormat:");
  late final _sel_format1 = _registerName1("format");
  late final _sel_setFormat_1 = _registerName1("setFormat:");
  late final _sel_attributedStringForZero1 =
      _registerName1("attributedStringForZero");
  late final _sel_setAttributedStringForZero_1 =
      _registerName1("setAttributedStringForZero:");
  late final _sel_attributedStringForNil1 =
      _registerName1("attributedStringForNil");
  late final _sel_setAttributedStringForNil_1 =
      _registerName1("setAttributedStringForNil:");
  late final _sel_attributedStringForNotANumber1 =
      _registerName1("attributedStringForNotANumber");
  late final _sel_setAttributedStringForNotANumber_1 =
      _registerName1("setAttributedStringForNotANumber:");
  late final _sel_roundingBehavior1 = _registerName1("roundingBehavior");
  late final _sel_setRoundingBehavior_1 =
      _registerName1("setRoundingBehavior:");
  late final _class_NSLocale1 = _getClass1("NSLocale");
  late final _sel_displayNameForKey_value_1 =
      _registerName1("displayNameForKey:value:");
  late final _sel_initWithLocaleIdentifier_1 =
      _registerName1("initWithLocaleIdentifier:");
  late final _sel_localeIdentifier1 = _registerName1("localeIdentifier");
  late final _sel_localizedStringForLocaleIdentifier_1 =
      _registerName1("localizedStringForLocaleIdentifier:");
  late final _sel_languageCode1 = _registerName1("languageCode");
  late final _sel_localizedStringForLanguageCode_1 =
      _registerName1("localizedStringForLanguageCode:");
  late final _sel_countryCode1 = _registerName1("countryCode");
  late final _sel_localizedStringForCountryCode_1 =
      _registerName1("localizedStringForCountryCode:");
  late final _sel_scriptCode1 = _registerName1("scriptCode");
  late final _sel_localizedStringForScriptCode_1 =
      _registerName1("localizedStringForScriptCode:");
  late final _sel_variantCode1 = _registerName1("variantCode");
  late final _sel_localizedStringForVariantCode_1 =
      _registerName1("localizedStringForVariantCode:");
  late final _sel_exemplarCharacterSet1 =
      _registerName1("exemplarCharacterSet");
  late final _sel_calendarIdentifier1 = _registerName1("calendarIdentifier");
  late final _sel_localizedStringForCalendarIdentifier_1 =
      _registerName1("localizedStringForCalendarIdentifier:");
  late final _sel_collationIdentifier1 = _registerName1("collationIdentifier");
  late final _sel_localizedStringForCollationIdentifier_1 =
      _registerName1("localizedStringForCollationIdentifier:");
  late final _sel_usesMetricSystem1 = _registerName1("usesMetricSystem");
  late final _sel_localizedStringForCurrencyCode_1 =
      _registerName1("localizedStringForCurrencyCode:");
  late final _sel_collatorIdentifier1 = _registerName1("collatorIdentifier");
  late final _sel_localizedStringForCollatorIdentifier_1 =
      _registerName1("localizedStringForCollatorIdentifier:");
  late final _sel_quotationBeginDelimiter1 =
      _registerName1("quotationBeginDelimiter");
  late final _sel_quotationEndDelimiter1 =
      _registerName1("quotationEndDelimiter");
  late final _sel_alternateQuotationBeginDelimiter1 =
      _registerName1("alternateQuotationBeginDelimiter");
  late final _sel_alternateQuotationEndDelimiter1 =
      _registerName1("alternateQuotationEndDelimiter");
  late final _sel_autoupdatingCurrentLocale1 =
      _registerName1("autoupdatingCurrentLocale");
  late final _sel_currentLocale1 = _registerName1("currentLocale");
  late final _sel_systemLocale1 = _registerName1("systemLocale");
  late final _sel_localeWithLocaleIdentifier_1 =
      _registerName1("localeWithLocaleIdentifier:");
  late final _sel_availableLocaleIdentifiers1 =
      _registerName1("availableLocaleIdentifiers");
  late final _sel_ISOLanguageCodes1 = _registerName1("ISOLanguageCodes");
  late final _sel_ISOCountryCodes1 = _registerName1("ISOCountryCodes");
  late final _sel_ISOCurrencyCodes1 = _registerName1("ISOCurrencyCodes");
  late final _sel_commonISOCurrencyCodes1 =
      _registerName1("commonISOCurrencyCodes");
  late final _sel_preferredLanguages1 = _registerName1("preferredLanguages");
  late final _sel_componentsFromLocaleIdentifier_1 =
      _registerName1("componentsFromLocaleIdentifier:");
  late final _sel_localeIdentifierFromComponents_1 =
      _registerName1("localeIdentifierFromComponents:");
  late final _sel_canonicalLocaleIdentifierFromString_1 =
      _registerName1("canonicalLocaleIdentifierFromString:");
  late final _sel_canonicalLanguageIdentifierFromString_1 =
      _registerName1("canonicalLanguageIdentifierFromString:");
  late final _sel_localeIdentifierFromWindowsLocaleCode_1 =
      _registerName1("localeIdentifierFromWindowsLocaleCode:");
  ffi.Pointer<ObjCObject> _objc_msgSend_278(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int lcid,
  ) {
    return __objc_msgSend_278(
      obj,
      sel,
      lcid,
    );
  }

  late final __objc_msgSend_278Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Uint32)>>('objc_msgSend');
  late final __objc_msgSend_278 = __objc_msgSend_278Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_windowsLocaleCodeFromLocaleIdentifier_1 =
      _registerName1("windowsLocaleCodeFromLocaleIdentifier:");
  int _objc_msgSend_279(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> localeIdentifier,
  ) {
    return __objc_msgSend_279(
      obj,
      sel,
      localeIdentifier,
    );
  }

  late final __objc_msgSend_279Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_279 = __objc_msgSend_279Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_characterDirectionForLanguage_1 =
      _registerName1("characterDirectionForLanguage:");
  int _objc_msgSend_280(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> isoLangCode,
  ) {
    return __objc_msgSend_280(
      obj,
      sel,
      isoLangCode,
    );
  }

  late final __objc_msgSend_280Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_280 = __objc_msgSend_280Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_lineDirectionForLanguage_1 =
      _registerName1("lineDirectionForLanguage:");
  late final _class_NSScanner1 = _getClass1("NSScanner");
  late final _sel_scanLocation1 = _registerName1("scanLocation");
  late final _sel_setScanLocation_1 = _registerName1("setScanLocation:");
  late final _sel_charactersToBeSkipped1 =
      _registerName1("charactersToBeSkipped");
  late final _sel_setCharactersToBeSkipped_1 =
      _registerName1("setCharactersToBeSkipped:");
  late final _sel_caseSensitive1 = _registerName1("caseSensitive");
  late final _sel_setCaseSensitive_1 = _registerName1("setCaseSensitive:");
  late final _sel_scanInt_1 = _registerName1("scanInt:");
  bool _objc_msgSend_281(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Int> result,
  ) {
    return __objc_msgSend_281(
      obj,
      sel,
      result,
    );
  }

  late final __objc_msgSend_281Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Int>)>>('objc_msgSend');
  late final __objc_msgSend_281 = __objc_msgSend_281Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Int>)>();

  late final _sel_scanInteger_1 = _registerName1("scanInteger:");
  bool _objc_msgSend_282(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<NSInteger> result,
  ) {
    return __objc_msgSend_282(
      obj,
      sel,
      result,
    );
  }

  late final __objc_msgSend_282Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<NSInteger>)>>('objc_msgSend');
  late final __objc_msgSend_282 = __objc_msgSend_282Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<NSInteger>)>();

  late final _sel_scanLongLong_1 = _registerName1("scanLongLong:");
  bool _objc_msgSend_283(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.LongLong> result,
  ) {
    return __objc_msgSend_283(
      obj,
      sel,
      result,
    );
  }

  late final __objc_msgSend_283Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.LongLong>)>>('objc_msgSend');
  late final __objc_msgSend_283 = __objc_msgSend_283Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.LongLong>)>();

  late final _sel_scanUnsignedLongLong_1 =
      _registerName1("scanUnsignedLongLong:");
  bool _objc_msgSend_284(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.UnsignedLongLong> result,
  ) {
    return __objc_msgSend_284(
      obj,
      sel,
      result,
    );
  }

  late final __objc_msgSend_284Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.UnsignedLongLong>)>>('objc_msgSend');
  late final __objc_msgSend_284 = __objc_msgSend_284Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.UnsignedLongLong>)>();

  late final _sel_scanFloat_1 = _registerName1("scanFloat:");
  bool _objc_msgSend_285(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Float> result,
  ) {
    return __objc_msgSend_285(
      obj,
      sel,
      result,
    );
  }

  late final __objc_msgSend_285Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Float>)>>('objc_msgSend');
  late final __objc_msgSend_285 = __objc_msgSend_285Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Float>)>();

  late final _sel_scanDouble_1 = _registerName1("scanDouble:");
  bool _objc_msgSend_286(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Double> result,
  ) {
    return __objc_msgSend_286(
      obj,
      sel,
      result,
    );
  }

  late final __objc_msgSend_286Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Double>)>>('objc_msgSend');
  late final __objc_msgSend_286 = __objc_msgSend_286Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Double>)>();

  late final _sel_scanHexInt_1 = _registerName1("scanHexInt:");
  bool _objc_msgSend_287(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.UnsignedInt> result,
  ) {
    return __objc_msgSend_287(
      obj,
      sel,
      result,
    );
  }

  late final __objc_msgSend_287Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.UnsignedInt>)>>('objc_msgSend');
  late final __objc_msgSend_287 = __objc_msgSend_287Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.UnsignedInt>)>();

  late final _sel_scanHexLongLong_1 = _registerName1("scanHexLongLong:");
  late final _sel_scanHexFloat_1 = _registerName1("scanHexFloat:");
  late final _sel_scanHexDouble_1 = _registerName1("scanHexDouble:");
  late final _sel_scanString_intoString_1 =
      _registerName1("scanString:intoString:");
  late final _sel_scanCharactersFromSet_intoString_1 =
      _registerName1("scanCharactersFromSet:intoString:");
  late final _sel_scanUpToString_intoString_1 =
      _registerName1("scanUpToString:intoString:");
  late final _sel_scanUpToCharactersFromSet_intoString_1 =
      _registerName1("scanUpToCharactersFromSet:intoString:");
  late final _sel_isAtEnd1 = _registerName1("isAtEnd");
  late final _sel_scannerWithString_1 = _registerName1("scannerWithString:");
  late final _sel_localizedScannerWithString_1 =
      _registerName1("localizedScannerWithString:");
  late final _sel_scanDecimal_1 = _registerName1("scanDecimal:");
  bool _objc_msgSend_288(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<NSDecimal> dcm,
  ) {
    return __objc_msgSend_288(
      obj,
      sel,
      dcm,
    );
  }

  late final __objc_msgSend_288Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<NSDecimal>)>>('objc_msgSend');
  late final __objc_msgSend_288 = __objc_msgSend_288Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<NSDecimal>)>();

  late final _class_NSException1 = _getClass1("NSException");
  late final _sel_exceptionWithName_reason_userInfo_1 =
      _registerName1("exceptionWithName:reason:userInfo:");
  late final _sel_initWithName_reason_userInfo_1 =
      _registerName1("initWithName:reason:userInfo:");
  late final _sel_reason1 = _registerName1("reason");
  late final _sel_callStackReturnAddresses1 =
      _registerName1("callStackReturnAddresses");
  late final _sel_callStackSymbols1 = _registerName1("callStackSymbols");
  late final _sel_raise1 = _registerName1("raise");
  late final _sel_raise_format_1 = _registerName1("raise:format:");
  late final _sel_raise_format_arguments_1 =
      _registerName1("raise:format:arguments:");
  void _objc_msgSend_289(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSExceptionName name,
    ffi.Pointer<ObjCObject> format,
    ffi.Pointer<__va_list_tag> argList,
  ) {
    return __objc_msgSend_289(
      obj,
      sel,
      name,
      format,
      argList,
    );
  }

  late final __objc_msgSend_289Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              NSExceptionName,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<__va_list_tag>)>>('objc_msgSend');
  late final __objc_msgSend_289 = __objc_msgSend_289Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          NSExceptionName,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<__va_list_tag>)>();

  late final _class_NSRunLoop1 = _getClass1("NSRunLoop");
  late final _sel_currentRunLoop1 = _registerName1("currentRunLoop");
  late final _sel_mainRunLoop1 = _registerName1("mainRunLoop");
  late final _sel_currentMode1 = _registerName1("currentMode");
  late final _sel_getCFRunLoop1 = _registerName1("getCFRunLoop");
  CFRunLoopRef _objc_msgSend_290(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_290(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_290Ptr = _lookup<
      ffi.NativeFunction<
          CFRunLoopRef Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_290 = __objc_msgSend_290Ptr.asFunction<
      CFRunLoopRef Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_addTimer_forMode_1 = _registerName1("addTimer:forMode:");
  late final _sel_addPort_forMode_1 = _registerName1("addPort:forMode:");
  late final _sel_removePort_forMode_1 = _registerName1("removePort:forMode:");
  late final _sel_limitDateForMode_1 = _registerName1("limitDateForMode:");
  late final _sel_acceptInputForMode_beforeDate_1 =
      _registerName1("acceptInputForMode:beforeDate:");
  late final _sel_run1 = _registerName1("run");
  late final _sel_runUntilDate_1 = _registerName1("runUntilDate:");
  late final _sel_runMode_beforeDate_1 = _registerName1("runMode:beforeDate:");
  late final _sel_configureAsServer1 = _registerName1("configureAsServer");
  late final _sel_performInModes_block_1 =
      _registerName1("performInModes:block:");
  void _objc_msgSend_291(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> modes,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_291(
      obj,
      sel,
      modes,
      block,
    );
  }

  late final __objc_msgSend_291Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_291 = __objc_msgSend_291Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_performBlock_1 = _registerName1("performBlock:");
  void _objc_msgSend_292(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_292(
      obj,
      sel,
      block,
    );
  }

  late final __objc_msgSend_292Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_292 = __objc_msgSend_292Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_performSelector_target_argument_order_modes_1 =
      _registerName1("performSelector:target:argument:order:modes:");
  void _objc_msgSend_293(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> aSelector,
    ffi.Pointer<ObjCObject> target,
    ffi.Pointer<ObjCObject> arg,
    int order,
    ffi.Pointer<ObjCObject> modes,
  ) {
    return __objc_msgSend_293(
      obj,
      sel,
      aSelector,
      target,
      arg,
      order,
      modes,
    );
  }

  late final __objc_msgSend_293Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              NSUInteger,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_293 = __objc_msgSend_293Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          int,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_cancelPerformSelector_target_argument_1 =
      _registerName1("cancelPerformSelector:target:argument:");
  void _objc_msgSend_294(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> aSelector,
    ffi.Pointer<ObjCObject> target,
    ffi.Pointer<ObjCObject> arg,
  ) {
    return __objc_msgSend_294(
      obj,
      sel,
      aSelector,
      target,
      arg,
    );
  }

  late final __objc_msgSend_294Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_294 = __objc_msgSend_294Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_cancelPerformSelectorsWithTarget_1 =
      _registerName1("cancelPerformSelectorsWithTarget:");
  late final _class_NSFileHandle1 = _getClass1("NSFileHandle");
  late final _sel_availableData1 = _registerName1("availableData");
  late final _sel_initWithFileDescriptor_closeOnDealloc_1 =
      _registerName1("initWithFileDescriptor:closeOnDealloc:");
  instancetype _objc_msgSend_295(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int fd,
    bool closeopt,
  ) {
    return __objc_msgSend_295(
      obj,
      sel,
      fd,
      closeopt,
    );
  }

  late final __objc_msgSend_295Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int, ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_295 = __objc_msgSend_295Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int, bool)>();

  late final _sel_readDataToEndOfFileAndReturnError_1 =
      _registerName1("readDataToEndOfFileAndReturnError:");
  late final _sel_readDataUpToLength_error_1 =
      _registerName1("readDataUpToLength:error:");
  ffi.Pointer<ObjCObject> _objc_msgSend_296(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int length,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_296(
      obj,
      sel,
      length,
      error,
    );
  }

  late final __objc_msgSend_296Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              NSUInteger,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_296 = __objc_msgSend_296Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, int, ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_writeData_error_1 = _registerName1("writeData:error:");
  late final _sel_getOffset_error_1 = _registerName1("getOffset:error:");
  bool _objc_msgSend_297(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.UnsignedLongLong> offsetInFile,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_297(
      obj,
      sel,
      offsetInFile,
      error,
    );
  }

  late final __objc_msgSend_297Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.UnsignedLongLong>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_297 = __objc_msgSend_297Ptr.asFunction<
      bool Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.UnsignedLongLong>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_seekToEndReturningOffset_error_1 =
      _registerName1("seekToEndReturningOffset:error:");
  late final _sel_seekToOffset_error_1 = _registerName1("seekToOffset:error:");
  bool _objc_msgSend_298(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int offset,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_298(
      obj,
      sel,
      offset,
      error,
    );
  }

  late final __objc_msgSend_298Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.UnsignedLongLong,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_298 = __objc_msgSend_298Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_truncateAtOffset_error_1 =
      _registerName1("truncateAtOffset:error:");
  late final _sel_synchronizeAndReturnError_1 =
      _registerName1("synchronizeAndReturnError:");
  late final _sel_closeAndReturnError_1 =
      _registerName1("closeAndReturnError:");
  late final _sel_fileHandleWithStandardInput1 =
      _registerName1("fileHandleWithStandardInput");
  late final _sel_fileHandleWithStandardOutput1 =
      _registerName1("fileHandleWithStandardOutput");
  late final _sel_fileHandleWithStandardError1 =
      _registerName1("fileHandleWithStandardError");
  late final _sel_fileHandleWithNullDevice1 =
      _registerName1("fileHandleWithNullDevice");
  late final _sel_fileHandleForReadingAtPath_1 =
      _registerName1("fileHandleForReadingAtPath:");
  late final _sel_fileHandleForWritingAtPath_1 =
      _registerName1("fileHandleForWritingAtPath:");
  late final _sel_fileHandleForUpdatingAtPath_1 =
      _registerName1("fileHandleForUpdatingAtPath:");
  late final _sel_fileHandleForReadingFromURL_error_1 =
      _registerName1("fileHandleForReadingFromURL:error:");
  late final _sel_fileHandleForWritingToURL_error_1 =
      _registerName1("fileHandleForWritingToURL:error:");
  late final _sel_fileHandleForUpdatingURL_error_1 =
      _registerName1("fileHandleForUpdatingURL:error:");
  late final _sel_readInBackgroundAndNotifyForModes_1 =
      _registerName1("readInBackgroundAndNotifyForModes:");
  late final _sel_readInBackgroundAndNotify1 =
      _registerName1("readInBackgroundAndNotify");
  late final _sel_readToEndOfFileInBackgroundAndNotifyForModes_1 =
      _registerName1("readToEndOfFileInBackgroundAndNotifyForModes:");
  late final _sel_readToEndOfFileInBackgroundAndNotify1 =
      _registerName1("readToEndOfFileInBackgroundAndNotify");
  late final _sel_acceptConnectionInBackgroundAndNotifyForModes_1 =
      _registerName1("acceptConnectionInBackgroundAndNotifyForModes:");
  late final _sel_acceptConnectionInBackgroundAndNotify1 =
      _registerName1("acceptConnectionInBackgroundAndNotify");
  late final _sel_waitForDataInBackgroundAndNotifyForModes_1 =
      _registerName1("waitForDataInBackgroundAndNotifyForModes:");
  late final _sel_waitForDataInBackgroundAndNotify1 =
      _registerName1("waitForDataInBackgroundAndNotify");
  late final _sel_readabilityHandler1 = _registerName1("readabilityHandler");
  ffi.Pointer<_ObjCBlock> _objc_msgSend_299(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_299(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_299Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<_ObjCBlock> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_299 = __objc_msgSend_299Ptr.asFunction<
      ffi.Pointer<_ObjCBlock> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setReadabilityHandler_1 =
      _registerName1("setReadabilityHandler:");
  void _objc_msgSend_300(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> value,
  ) {
    return __objc_msgSend_300(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_300Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_300 = __objc_msgSend_300Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_writeabilityHandler1 = _registerName1("writeabilityHandler");
  late final _sel_setWriteabilityHandler_1 =
      _registerName1("setWriteabilityHandler:");
  late final _sel_initWithFileDescriptor_1 =
      _registerName1("initWithFileDescriptor:");
  late final _sel_fileDescriptor1 = _registerName1("fileDescriptor");
  late final _sel_readDataToEndOfFile1 = _registerName1("readDataToEndOfFile");
  late final _sel_readDataOfLength_1 = _registerName1("readDataOfLength:");
  late final _sel_writeData_1 = _registerName1("writeData:");
  late final _sel_offsetInFile1 = _registerName1("offsetInFile");
  late final _sel_seekToEndOfFile1 = _registerName1("seekToEndOfFile");
  late final _sel_seekToFileOffset_1 = _registerName1("seekToFileOffset:");
  void _objc_msgSend_301(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int offset,
  ) {
    return __objc_msgSend_301(
      obj,
      sel,
      offset,
    );
  }

  late final __objc_msgSend_301Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.UnsignedLongLong)>>('objc_msgSend');
  late final __objc_msgSend_301 = __objc_msgSend_301Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_truncateFileAtOffset_1 =
      _registerName1("truncateFileAtOffset:");
  late final _sel_synchronizeFile1 = _registerName1("synchronizeFile");
  late final _sel_closeFile1 = _registerName1("closeFile");
  late final _class_NSURL1 = _getClass1("NSURL");
  late final _sel_initWithScheme_host_path_1 =
      _registerName1("initWithScheme:host:path:");
  late final _sel_initFileURLWithPath_isDirectory_relativeToURL_1 =
      _registerName1("initFileURLWithPath:isDirectory:relativeToURL:");
  instancetype _objc_msgSend_302(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> path,
    bool isDir,
    ffi.Pointer<ObjCObject> baseURL,
  ) {
    return __objc_msgSend_302(
      obj,
      sel,
      path,
      isDir,
      baseURL,
    );
  }

  late final __objc_msgSend_302Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Bool,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_302 = __objc_msgSend_302Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, bool, ffi.Pointer<ObjCObject>)>();

  late final _sel_initFileURLWithPath_relativeToURL_1 =
      _registerName1("initFileURLWithPath:relativeToURL:");
  late final _sel_initFileURLWithPath_isDirectory_1 =
      _registerName1("initFileURLWithPath:isDirectory:");
  late final _sel_initFileURLWithPath_1 =
      _registerName1("initFileURLWithPath:");
  late final _sel_fileURLWithPath_isDirectory_relativeToURL_1 =
      _registerName1("fileURLWithPath:isDirectory:relativeToURL:");
  late final _sel_fileURLWithPath_relativeToURL_1 =
      _registerName1("fileURLWithPath:relativeToURL:");
  late final _sel_fileURLWithPath_isDirectory_1 =
      _registerName1("fileURLWithPath:isDirectory:");
  late final _sel_fileURLWithPath_1 = _registerName1("fileURLWithPath:");
  late final _sel_initFileURLWithFileSystemRepresentation_isDirectory_relativeToURL_1 =
      _registerName1(
          "initFileURLWithFileSystemRepresentation:isDirectory:relativeToURL:");
  instancetype _objc_msgSend_303(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Char> path,
    bool isDir,
    ffi.Pointer<ObjCObject> baseURL,
  ) {
    return __objc_msgSend_303(
      obj,
      sel,
      path,
      isDir,
      baseURL,
    );
  }

  late final __objc_msgSend_303Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Char>,
              ffi.Bool,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_303 = __objc_msgSend_303Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Char>, bool, ffi.Pointer<ObjCObject>)>();

  late final _sel_fileURLWithFileSystemRepresentation_isDirectory_relativeToURL_1 =
      _registerName1(
          "fileURLWithFileSystemRepresentation:isDirectory:relativeToURL:");
  late final _sel_initWithString_relativeToURL_1 =
      _registerName1("initWithString:relativeToURL:");
  late final _sel_URLWithString_1 = _registerName1("URLWithString:");
  late final _sel_URLWithString_relativeToURL_1 =
      _registerName1("URLWithString:relativeToURL:");
  late final _sel_initWithDataRepresentation_relativeToURL_1 =
      _registerName1("initWithDataRepresentation:relativeToURL:");
  late final _sel_URLWithDataRepresentation_relativeToURL_1 =
      _registerName1("URLWithDataRepresentation:relativeToURL:");
  late final _sel_initAbsoluteURLWithDataRepresentation_relativeToURL_1 =
      _registerName1("initAbsoluteURLWithDataRepresentation:relativeToURL:");
  late final _sel_absoluteURLWithDataRepresentation_relativeToURL_1 =
      _registerName1("absoluteURLWithDataRepresentation:relativeToURL:");
  late final _sel_dataRepresentation1 = _registerName1("dataRepresentation");
  late final _sel_absoluteString1 = _registerName1("absoluteString");
  late final _sel_relativeString1 = _registerName1("relativeString");
  late final _sel_baseURL1 = _registerName1("baseURL");
  late final _sel_absoluteURL1 = _registerName1("absoluteURL");
  late final _sel_scheme1 = _registerName1("scheme");
  late final _sel_resourceSpecifier1 = _registerName1("resourceSpecifier");
  late final _sel_host1 = _registerName1("host");
  late final _sel_port1 = _registerName1("port");
  late final _sel_user1 = _registerName1("user");
  late final _sel_password1 = _registerName1("password");
  late final _sel_path1 = _registerName1("path");
  late final _sel_fragment1 = _registerName1("fragment");
  late final _sel_parameterString1 = _registerName1("parameterString");
  late final _sel_query1 = _registerName1("query");
  late final _sel_relativePath1 = _registerName1("relativePath");
  late final _sel_hasDirectoryPath1 = _registerName1("hasDirectoryPath");
  late final _sel_isFileURL1 = _registerName1("isFileURL");
  late final _sel_standardizedURL1 = _registerName1("standardizedURL");
  late final _sel_checkResourceIsReachableAndReturnError_1 =
      _registerName1("checkResourceIsReachableAndReturnError:");
  late final _sel_isFileReferenceURL1 = _registerName1("isFileReferenceURL");
  late final _sel_fileReferenceURL1 = _registerName1("fileReferenceURL");
  late final _sel_filePathURL1 = _registerName1("filePathURL");
  late final _sel_getResourceValue_forKey_error_1 =
      _registerName1("getResourceValue:forKey:error:");
  late final _sel_resourceValuesForKeys_error_1 =
      _registerName1("resourceValuesForKeys:error:");
  late final _sel_setResourceValue_forKey_error_1 =
      _registerName1("setResourceValue:forKey:error:");
  bool _objc_msgSend_304(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
    NSURLResourceKey key,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_304(
      obj,
      sel,
      value,
      key,
      error,
    );
  }

  late final __objc_msgSend_304Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              NSURLResourceKey,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_304 = __objc_msgSend_304Ptr.asFunction<
      bool Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          NSURLResourceKey,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_setResourceValues_error_1 =
      _registerName1("setResourceValues:error:");
  late final _sel_removeCachedResourceValueForKey_1 =
      _registerName1("removeCachedResourceValueForKey:");
  late final _sel_removeAllCachedResourceValues1 =
      _registerName1("removeAllCachedResourceValues");
  late final _sel_setTemporaryResourceValue_forKey_1 =
      _registerName1("setTemporaryResourceValue:forKey:");
  late final _sel_bookmarkDataWithOptions_includingResourceValuesForKeys_relativeToURL_error_1 =
      _registerName1(
          "bookmarkDataWithOptions:includingResourceValuesForKeys:relativeToURL:error:");
  ffi.Pointer<ObjCObject> _objc_msgSend_305(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int options,
    ffi.Pointer<ObjCObject> keys,
    ffi.Pointer<ObjCObject> relativeURL,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_305(
      obj,
      sel,
      options,
      keys,
      relativeURL,
      error,
    );
  }

  late final __objc_msgSend_305Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Int32,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_305 = __objc_msgSend_305Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          int,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_initByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error_1 =
      _registerName1(
          "initByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:");
  instancetype _objc_msgSend_306(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> bookmarkData,
    int options,
    ffi.Pointer<ObjCObject> relativeURL,
    ffi.Pointer<ffi.Bool> isStale,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_306(
      obj,
      sel,
      bookmarkData,
      options,
      relativeURL,
      isStale,
      error,
    );
  }

  late final __objc_msgSend_306Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Bool>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_306 = __objc_msgSend_306Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          int,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ffi.Bool>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_URLByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error_1 =
      _registerName1(
          "URLByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:");
  late final _sel_resourceValuesForKeys_fromBookmarkData_1 =
      _registerName1("resourceValuesForKeys:fromBookmarkData:");
  late final _sel_writeBookmarkData_toURL_options_error_1 =
      _registerName1("writeBookmarkData:toURL:options:error:");
  bool _objc_msgSend_307(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> bookmarkData,
    ffi.Pointer<ObjCObject> bookmarkFileURL,
    int options,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_307(
      obj,
      sel,
      bookmarkData,
      bookmarkFileURL,
      options,
      error,
    );
  }

  late final __objc_msgSend_307Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              NSURLBookmarkFileCreationOptions,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_307 = __objc_msgSend_307Ptr.asFunction<
      bool Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          int,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_bookmarkDataWithContentsOfURL_error_1 =
      _registerName1("bookmarkDataWithContentsOfURL:error:");
  late final _sel_URLByResolvingAliasFileAtURL_options_error_1 =
      _registerName1("URLByResolvingAliasFileAtURL:options:error:");
  instancetype _objc_msgSend_308(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
    int options,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_308(
      obj,
      sel,
      url,
      options,
      error,
    );
  }

  late final __objc_msgSend_308Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_308 = __objc_msgSend_308Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          int,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_startAccessingSecurityScopedResource1 =
      _registerName1("startAccessingSecurityScopedResource");
  late final _sel_stopAccessingSecurityScopedResource1 =
      _registerName1("stopAccessingSecurityScopedResource");
  late final _sel_getPromisedItemResourceValue_forKey_error_1 =
      _registerName1("getPromisedItemResourceValue:forKey:error:");
  late final _sel_promisedItemResourceValuesForKeys_error_1 =
      _registerName1("promisedItemResourceValuesForKeys:error:");
  late final _sel_checkPromisedItemIsReachableAndReturnError_1 =
      _registerName1("checkPromisedItemIsReachableAndReturnError:");
  late final _sel_fileURLWithPathComponents_1 =
      _registerName1("fileURLWithPathComponents:");
  late final _sel_URLByAppendingPathComponent_1 =
      _registerName1("URLByAppendingPathComponent:");
  late final _sel_URLByAppendingPathComponent_isDirectory_1 =
      _registerName1("URLByAppendingPathComponent:isDirectory:");
  late final _sel_URLByDeletingLastPathComponent1 =
      _registerName1("URLByDeletingLastPathComponent");
  late final _sel_URLByAppendingPathExtension_1 =
      _registerName1("URLByAppendingPathExtension:");
  late final _sel_URLByDeletingPathExtension1 =
      _registerName1("URLByDeletingPathExtension");
  late final _sel_URLByStandardizingPath1 =
      _registerName1("URLByStandardizingPath");
  late final _sel_URLByResolvingSymlinksInPath1 =
      _registerName1("URLByResolvingSymlinksInPath");
  late final _sel_resourceDataUsingCache_1 =
      _registerName1("resourceDataUsingCache:");
  late final _sel_loadResourceDataNotifyingClient_usingCache_1 =
      _registerName1("loadResourceDataNotifyingClient:usingCache:");
  void _objc_msgSend_309(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> client,
    bool shouldUseCache,
  ) {
    return __objc_msgSend_309(
      obj,
      sel,
      client,
      shouldUseCache,
    );
  }

  late final __objc_msgSend_309Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_309 = __objc_msgSend_309Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, bool)>();

  late final _sel_propertyForKey_1 = _registerName1("propertyForKey:");
  late final _sel_setResourceData_1 = _registerName1("setResourceData:");
  late final _sel_setProperty_forKey_1 = _registerName1("setProperty:forKey:");
  late final _sel_URLHandleUsingCache_1 =
      _registerName1("URLHandleUsingCache:");
  late final _class_NSCharacterSet1 = _getClass1("NSCharacterSet");
  late final _sel_controlCharacterSet1 = _registerName1("controlCharacterSet");
  late final _sel_whitespaceCharacterSet1 =
      _registerName1("whitespaceCharacterSet");
  late final _sel_whitespaceAndNewlineCharacterSet1 =
      _registerName1("whitespaceAndNewlineCharacterSet");
  late final _sel_decimalDigitCharacterSet1 =
      _registerName1("decimalDigitCharacterSet");
  late final _sel_letterCharacterSet1 = _registerName1("letterCharacterSet");
  late final _sel_lowercaseLetterCharacterSet1 =
      _registerName1("lowercaseLetterCharacterSet");
  late final _sel_uppercaseLetterCharacterSet1 =
      _registerName1("uppercaseLetterCharacterSet");
  late final _sel_nonBaseCharacterSet1 = _registerName1("nonBaseCharacterSet");
  late final _sel_alphanumericCharacterSet1 =
      _registerName1("alphanumericCharacterSet");
  late final _sel_decomposableCharacterSet1 =
      _registerName1("decomposableCharacterSet");
  late final _sel_illegalCharacterSet1 = _registerName1("illegalCharacterSet");
  late final _sel_punctuationCharacterSet1 =
      _registerName1("punctuationCharacterSet");
  late final _sel_capitalizedLetterCharacterSet1 =
      _registerName1("capitalizedLetterCharacterSet");
  late final _sel_symbolCharacterSet1 = _registerName1("symbolCharacterSet");
  late final _sel_newlineCharacterSet1 = _registerName1("newlineCharacterSet");
  late final _sel_characterSetWithRange_1 =
      _registerName1("characterSetWithRange:");
  late final _sel_characterSetWithCharactersInString_1 =
      _registerName1("characterSetWithCharactersInString:");
  late final _sel_characterSetWithBitmapRepresentation_1 =
      _registerName1("characterSetWithBitmapRepresentation:");
  late final _sel_characterSetWithContentsOfFile_1 =
      _registerName1("characterSetWithContentsOfFile:");
  late final _sel_characterIsMember_1 = _registerName1("characterIsMember:");
  bool _objc_msgSend_310(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int aCharacter,
  ) {
    return __objc_msgSend_310(
      obj,
      sel,
      aCharacter,
    );
  }

  late final __objc_msgSend_310Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              unichar)>>('objc_msgSend');
  late final __objc_msgSend_310 = __objc_msgSend_310Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_bitmapRepresentation1 =
      _registerName1("bitmapRepresentation");
  late final _sel_invertedSet1 = _registerName1("invertedSet");
  late final _sel_longCharacterIsMember_1 =
      _registerName1("longCharacterIsMember:");
  bool _objc_msgSend_311(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int theLongChar,
  ) {
    return __objc_msgSend_311(
      obj,
      sel,
      theLongChar,
    );
  }

  late final __objc_msgSend_311Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              UTF32Char)>>('objc_msgSend');
  late final __objc_msgSend_311 = __objc_msgSend_311Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_isSupersetOfSet_1 = _registerName1("isSupersetOfSet:");
  late final _sel_hasMemberInPlane_1 = _registerName1("hasMemberInPlane:");
  bool _objc_msgSend_312(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int thePlane,
  ) {
    return __objc_msgSend_312(
      obj,
      sel,
      thePlane,
    );
  }

  late final __objc_msgSend_312Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Uint8)>>('objc_msgSend');
  late final __objc_msgSend_312 = __objc_msgSend_312Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_URLUserAllowedCharacterSet1 =
      _registerName1("URLUserAllowedCharacterSet");
  late final _sel_URLPasswordAllowedCharacterSet1 =
      _registerName1("URLPasswordAllowedCharacterSet");
  late final _sel_URLHostAllowedCharacterSet1 =
      _registerName1("URLHostAllowedCharacterSet");
  late final _sel_URLPathAllowedCharacterSet1 =
      _registerName1("URLPathAllowedCharacterSet");
  late final _sel_URLQueryAllowedCharacterSet1 =
      _registerName1("URLQueryAllowedCharacterSet");
  late final _sel_URLFragmentAllowedCharacterSet1 =
      _registerName1("URLFragmentAllowedCharacterSet");
  late final _class_NSFileManager1 = _getClass1("NSFileManager");
  late final _sel_defaultManager1 = _registerName1("defaultManager");
  late final _sel_mountedVolumeURLsIncludingResourceValuesForKeys_options_1 =
      _registerName1(
          "mountedVolumeURLsIncludingResourceValuesForKeys:options:");
  ffi.Pointer<ObjCObject> _objc_msgSend_313(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> propertyKeys,
    int options,
  ) {
    return __objc_msgSend_313(
      obj,
      sel,
      propertyKeys,
      options,
    );
  }

  late final __objc_msgSend_313Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_313 = __objc_msgSend_313Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>, int)>();

  late final _sel_unmountVolumeAtURL_options_completionHandler_1 =
      _registerName1("unmountVolumeAtURL:options:completionHandler:");
  void _objc_msgSend_314(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
    int mask,
    ffi.Pointer<_ObjCBlock> completionHandler,
  ) {
    return __objc_msgSend_314(
      obj,
      sel,
      url,
      mask,
      completionHandler,
    );
  }

  late final __objc_msgSend_314Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_314 = __objc_msgSend_314Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_contentsOfDirectoryAtURL_includingPropertiesForKeys_options_error_1 =
      _registerName1(
          "contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:");
  ffi.Pointer<ObjCObject> _objc_msgSend_315(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
    ffi.Pointer<ObjCObject> keys,
    int mask,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_315(
      obj,
      sel,
      url,
      keys,
      mask,
      error,
    );
  }

  late final __objc_msgSend_315Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_315 = __objc_msgSend_315Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          int,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_URLsForDirectory_inDomains_1 =
      _registerName1("URLsForDirectory:inDomains:");
  ffi.Pointer<ObjCObject> _objc_msgSend_316(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int directory,
    int domainMask,
  ) {
    return __objc_msgSend_316(
      obj,
      sel,
      directory,
      domainMask,
    );
  }

  late final __objc_msgSend_316Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Int32, ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_316 = __objc_msgSend_316Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int, int)>();

  late final _sel_URLForDirectory_inDomain_appropriateForURL_create_error_1 =
      _registerName1(
          "URLForDirectory:inDomain:appropriateForURL:create:error:");
  ffi.Pointer<ObjCObject> _objc_msgSend_317(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int directory,
    int domain,
    ffi.Pointer<ObjCObject> url,
    bool shouldCreate,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_317(
      obj,
      sel,
      directory,
      domain,
      url,
      shouldCreate,
      error,
    );
  }

  late final __objc_msgSend_317Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ObjCObject>,
              ffi.Bool,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_317 = __objc_msgSend_317Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          int,
          int,
          ffi.Pointer<ObjCObject>,
          bool,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_getRelationship_ofDirectoryAtURL_toItemAtURL_error_1 =
      _registerName1("getRelationship:ofDirectoryAtURL:toItemAtURL:error:");
  bool _objc_msgSend_318(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Int32> outRelationship,
    ffi.Pointer<ObjCObject> directoryURL,
    ffi.Pointer<ObjCObject> otherURL,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_318(
      obj,
      sel,
      outRelationship,
      directoryURL,
      otherURL,
      error,
    );
  }

  late final __objc_msgSend_318Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_318 = __objc_msgSend_318Ptr.asFunction<
      bool Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_getRelationship_ofDirectory_inDomain_toItemAtURL_error_1 =
      _registerName1("getRelationship:ofDirectory:inDomain:toItemAtURL:error:");
  bool _objc_msgSend_319(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Int32> outRelationship,
    int directory,
    int domainMask,
    ffi.Pointer<ObjCObject> url,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_319(
      obj,
      sel,
      outRelationship,
      directory,
      domainMask,
      url,
      error,
    );
  }

  late final __objc_msgSend_319Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Int32>,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_319 = __objc_msgSend_319Ptr.asFunction<
      bool Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Int32>,
          int,
          int,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_1 =
      _registerName1(
          "createDirectoryAtURL:withIntermediateDirectories:attributes:error:");
  bool _objc_msgSend_320(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
    bool createIntermediates,
    ffi.Pointer<ObjCObject> attributes,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_320(
      obj,
      sel,
      url,
      createIntermediates,
      attributes,
      error,
    );
  }

  late final __objc_msgSend_320Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Bool,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_320 = __objc_msgSend_320Ptr.asFunction<
      bool Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          bool,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_createSymbolicLinkAtURL_withDestinationURL_error_1 =
      _registerName1("createSymbolicLinkAtURL:withDestinationURL:error:");
  late final _sel_delegate1 = _registerName1("delegate");
  late final _sel_setDelegate_1 = _registerName1("setDelegate:");
  late final _sel_setAttributes_ofItemAtPath_error_1 =
      _registerName1("setAttributes:ofItemAtPath:error:");
  late final _sel_createDirectoryAtPath_withIntermediateDirectories_attributes_error_1 =
      _registerName1(
          "createDirectoryAtPath:withIntermediateDirectories:attributes:error:");
  late final _sel_contentsOfDirectoryAtPath_error_1 =
      _registerName1("contentsOfDirectoryAtPath:error:");
  late final _sel_subpathsOfDirectoryAtPath_error_1 =
      _registerName1("subpathsOfDirectoryAtPath:error:");
  late final _sel_attributesOfItemAtPath_error_1 =
      _registerName1("attributesOfItemAtPath:error:");
  late final _sel_attributesOfFileSystemForPath_error_1 =
      _registerName1("attributesOfFileSystemForPath:error:");
  late final _sel_createSymbolicLinkAtPath_withDestinationPath_error_1 =
      _registerName1("createSymbolicLinkAtPath:withDestinationPath:error:");
  late final _sel_destinationOfSymbolicLinkAtPath_error_1 =
      _registerName1("destinationOfSymbolicLinkAtPath:error:");
  late final _sel_copyItemAtPath_toPath_error_1 =
      _registerName1("copyItemAtPath:toPath:error:");
  late final _sel_moveItemAtPath_toPath_error_1 =
      _registerName1("moveItemAtPath:toPath:error:");
  late final _sel_linkItemAtPath_toPath_error_1 =
      _registerName1("linkItemAtPath:toPath:error:");
  late final _sel_removeItemAtPath_error_1 =
      _registerName1("removeItemAtPath:error:");
  late final _sel_copyItemAtURL_toURL_error_1 =
      _registerName1("copyItemAtURL:toURL:error:");
  late final _sel_moveItemAtURL_toURL_error_1 =
      _registerName1("moveItemAtURL:toURL:error:");
  late final _sel_linkItemAtURL_toURL_error_1 =
      _registerName1("linkItemAtURL:toURL:error:");
  late final _sel_removeItemAtURL_error_1 =
      _registerName1("removeItemAtURL:error:");
  late final _sel_trashItemAtURL_resultingItemURL_error_1 =
      _registerName1("trashItemAtURL:resultingItemURL:error:");
  late final _sel_fileAttributesAtPath_traverseLink_1 =
      _registerName1("fileAttributesAtPath:traverseLink:");
  late final _sel_changeFileAttributes_atPath_1 =
      _registerName1("changeFileAttributes:atPath:");
  late final _sel_directoryContentsAtPath_1 =
      _registerName1("directoryContentsAtPath:");
  late final _sel_fileSystemAttributesAtPath_1 =
      _registerName1("fileSystemAttributesAtPath:");
  late final _sel_pathContentOfSymbolicLinkAtPath_1 =
      _registerName1("pathContentOfSymbolicLinkAtPath:");
  late final _sel_createSymbolicLinkAtPath_pathContent_1 =
      _registerName1("createSymbolicLinkAtPath:pathContent:");
  late final _sel_createDirectoryAtPath_attributes_1 =
      _registerName1("createDirectoryAtPath:attributes:");
  late final _sel_linkPath_toPath_handler_1 =
      _registerName1("linkPath:toPath:handler:");
  bool _objc_msgSend_321(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> src,
    ffi.Pointer<ObjCObject> dest,
    ffi.Pointer<ObjCObject> handler,
  ) {
    return __objc_msgSend_321(
      obj,
      sel,
      src,
      dest,
      handler,
    );
  }

  late final __objc_msgSend_321Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_321 = __objc_msgSend_321Ptr.asFunction<
      bool Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_copyPath_toPath_handler_1 =
      _registerName1("copyPath:toPath:handler:");
  late final _sel_movePath_toPath_handler_1 =
      _registerName1("movePath:toPath:handler:");
  late final _sel_removeFileAtPath_handler_1 =
      _registerName1("removeFileAtPath:handler:");
  late final _sel_currentDirectoryPath1 =
      _registerName1("currentDirectoryPath");
  late final _sel_changeCurrentDirectoryPath_1 =
      _registerName1("changeCurrentDirectoryPath:");
  late final _sel_fileExistsAtPath_1 = _registerName1("fileExistsAtPath:");
  late final _sel_fileExistsAtPath_isDirectory_1 =
      _registerName1("fileExistsAtPath:isDirectory:");
  bool _objc_msgSend_322(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> path,
    ffi.Pointer<ffi.Bool> isDirectory,
  ) {
    return __objc_msgSend_322(
      obj,
      sel,
      path,
      isDirectory,
    );
  }

  late final __objc_msgSend_322Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Bool>)>>('objc_msgSend');
  late final __objc_msgSend_322 = __objc_msgSend_322Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Bool>)>();

  late final _sel_isReadableFileAtPath_1 =
      _registerName1("isReadableFileAtPath:");
  late final _sel_isWritableFileAtPath_1 =
      _registerName1("isWritableFileAtPath:");
  late final _sel_isExecutableFileAtPath_1 =
      _registerName1("isExecutableFileAtPath:");
  late final _sel_isDeletableFileAtPath_1 =
      _registerName1("isDeletableFileAtPath:");
  late final _sel_contentsEqualAtPath_andPath_1 =
      _registerName1("contentsEqualAtPath:andPath:");
  late final _sel_displayNameAtPath_1 = _registerName1("displayNameAtPath:");
  late final _sel_componentsToDisplayForPath_1 =
      _registerName1("componentsToDisplayForPath:");
  late final _sel_enumeratorAtPath_1 = _registerName1("enumeratorAtPath:");
  late final _sel_enumeratorAtURL_includingPropertiesForKeys_options_errorHandler_1 =
      _registerName1(
          "enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:");
  ffi.Pointer<ObjCObject> _objc_msgSend_323(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
    ffi.Pointer<ObjCObject> keys,
    int mask,
    ffi.Pointer<_ObjCBlock> handler,
  ) {
    return __objc_msgSend_323(
      obj,
      sel,
      url,
      keys,
      mask,
      handler,
    );
  }

  late final __objc_msgSend_323Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_323 = __objc_msgSend_323Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          int,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_subpathsAtPath_1 = _registerName1("subpathsAtPath:");
  late final _sel_contentsAtPath_1 = _registerName1("contentsAtPath:");
  late final _sel_createFileAtPath_contents_attributes_1 =
      _registerName1("createFileAtPath:contents:attributes:");
  late final _sel_fileSystemRepresentationWithPath_1 =
      _registerName1("fileSystemRepresentationWithPath:");
  ffi.Pointer<ffi.Char> _objc_msgSend_324(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> path,
  ) {
    return __objc_msgSend_324(
      obj,
      sel,
      path,
    );
  }

  late final __objc_msgSend_324Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_324 = __objc_msgSend_324Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_stringWithFileSystemRepresentation_length_1 =
      _registerName1("stringWithFileSystemRepresentation:length:");
  late final _sel_replaceItemAtURL_withItemAtURL_backupItemName_options_resultingItemURL_error_1 =
      _registerName1(
          "replaceItemAtURL:withItemAtURL:backupItemName:options:resultingItemURL:error:");
  bool _objc_msgSend_325(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> originalItemURL,
    ffi.Pointer<ObjCObject> newItemURL,
    ffi.Pointer<ObjCObject> backupItemName,
    int options,
    ffi.Pointer<ffi.Pointer<ObjCObject>> resultingURL,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_325(
      obj,
      sel,
      originalItemURL,
      newItemURL,
      backupItemName,
      options,
      resultingURL,
      error,
    );
  }

  late final __objc_msgSend_325Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<ObjCObject>>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_325 = __objc_msgSend_325Ptr.asFunction<
      bool Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          int,
          ffi.Pointer<ffi.Pointer<ObjCObject>>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_setUbiquitous_itemAtURL_destinationURL_error_1 =
      _registerName1("setUbiquitous:itemAtURL:destinationURL:error:");
  bool _objc_msgSend_326(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    bool flag,
    ffi.Pointer<ObjCObject> url,
    ffi.Pointer<ObjCObject> destinationURL,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_326(
      obj,
      sel,
      flag,
      url,
      destinationURL,
      error,
    );
  }

  late final __objc_msgSend_326Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Bool,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_326 = __objc_msgSend_326Ptr.asFunction<
      bool Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          bool,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_isUbiquitousItemAtURL_1 =
      _registerName1("isUbiquitousItemAtURL:");
  late final _sel_startDownloadingUbiquitousItemAtURL_error_1 =
      _registerName1("startDownloadingUbiquitousItemAtURL:error:");
  late final _sel_evictUbiquitousItemAtURL_error_1 =
      _registerName1("evictUbiquitousItemAtURL:error:");
  late final _sel_URLForUbiquityContainerIdentifier_1 =
      _registerName1("URLForUbiquityContainerIdentifier:");
  late final _sel_URLForPublishingUbiquitousItemAtURL_expirationDate_error_1 =
      _registerName1(
          "URLForPublishingUbiquitousItemAtURL:expirationDate:error:");
  ffi.Pointer<ObjCObject> _objc_msgSend_327(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
    ffi.Pointer<ffi.Pointer<ObjCObject>> outDate,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_327(
      obj,
      sel,
      url,
      outDate,
      error,
    );
  }

  late final __objc_msgSend_327Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_327 = __objc_msgSend_327Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_ubiquityIdentityToken1 =
      _registerName1("ubiquityIdentityToken");
  late final _sel_getFileProviderServicesForItemAtURL_completionHandler_1 =
      _registerName1("getFileProviderServicesForItemAtURL:completionHandler:");
  late final _sel_containerURLForSecurityApplicationGroupIdentifier_1 =
      _registerName1("containerURLForSecurityApplicationGroupIdentifier:");
  late final _sel_homeDirectoryForCurrentUser1 =
      _registerName1("homeDirectoryForCurrentUser");
  late final _sel_temporaryDirectory1 = _registerName1("temporaryDirectory");
  late final _sel_homeDirectoryForUser_1 =
      _registerName1("homeDirectoryForUser:");
  late final _class_NSHTTPCookieStorage1 = _getClass1("NSHTTPCookieStorage");
  late final _sel_sharedHTTPCookieStorage1 =
      _registerName1("sharedHTTPCookieStorage");
  late final _sel_sharedCookieStorageForGroupContainerIdentifier_1 =
      _registerName1("sharedCookieStorageForGroupContainerIdentifier:");
  late final _sel_cookies1 = _registerName1("cookies");
  late final _sel_setCookie_1 = _registerName1("setCookie:");
  late final _sel_deleteCookie_1 = _registerName1("deleteCookie:");
  late final _sel_removeCookiesSinceDate_1 =
      _registerName1("removeCookiesSinceDate:");
  late final _sel_cookiesForURL_1 = _registerName1("cookiesForURL:");
  late final _sel_setCookies_forURL_mainDocumentURL_1 =
      _registerName1("setCookies:forURL:mainDocumentURL:");
  late final _sel_cookieAcceptPolicy1 = _registerName1("cookieAcceptPolicy");
  int _objc_msgSend_328(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_328(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_328Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_328 = __objc_msgSend_328Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setCookieAcceptPolicy_1 =
      _registerName1("setCookieAcceptPolicy:");
  void _objc_msgSend_329(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_329(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_329Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_329 = __objc_msgSend_329Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_sortedCookiesUsingDescriptors_1 =
      _registerName1("sortedCookiesUsingDescriptors:");
  late final _sel_storeCookies_forTask_1 =
      _registerName1("storeCookies:forTask:");
  late final _sel_getCookiesForTask_completionHandler_1 =
      _registerName1("getCookiesForTask:completionHandler:");
  void _objc_msgSend_330(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> task,
    ffi.Pointer<_ObjCBlock> completionHandler,
  ) {
    return __objc_msgSend_330(
      obj,
      sel,
      task,
      completionHandler,
    );
  }

  late final __objc_msgSend_330Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_330 = __objc_msgSend_330Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<_ObjCBlock>)>();

  late final _class_NSIndexPath1 = _getClass1("NSIndexPath");
  late final _sel_indexPathWithIndex_1 = _registerName1("indexPathWithIndex:");
  late final _sel_indexPathWithIndexes_length_1 =
      _registerName1("indexPathWithIndexes:length:");
  instancetype _objc_msgSend_331(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<NSUInteger> indexes,
    int length,
  ) {
    return __objc_msgSend_331(
      obj,
      sel,
      indexes,
      length,
    );
  }

  late final __objc_msgSend_331Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<NSUInteger>, NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_331 = __objc_msgSend_331Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<NSUInteger>, int)>();

  late final _sel_initWithIndexes_length_1 =
      _registerName1("initWithIndexes:length:");
  late final _sel_initWithIndex_1 = _registerName1("initWithIndex:");
  late final _sel_indexPathByAddingIndex_1 =
      _registerName1("indexPathByAddingIndex:");
  late final _sel_indexPathByRemovingLastIndex1 =
      _registerName1("indexPathByRemovingLastIndex");
  late final _sel_indexAtPosition_1 = _registerName1("indexAtPosition:");
  late final _sel_getIndexes_range_1 = _registerName1("getIndexes:range:");
  void _objc_msgSend_332(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<NSUInteger> indexes,
    NSRange positionRange,
  ) {
    return __objc_msgSend_332(
      obj,
      sel,
      indexes,
      positionRange,
    );
  }

  late final __objc_msgSend_332Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<NSUInteger>, NSRange)>>('objc_msgSend');
  late final __objc_msgSend_332 = __objc_msgSend_332Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<NSUInteger>, NSRange)>();

  late final _sel_getIndexes_1 = _registerName1("getIndexes:");
  void _objc_msgSend_333(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<NSUInteger> indexes,
  ) {
    return __objc_msgSend_333(
      obj,
      sel,
      indexes,
    );
  }

  late final __objc_msgSend_333Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<NSUInteger>)>>('objc_msgSend');
  late final __objc_msgSend_333 = __objc_msgSend_333Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<NSUInteger>)>();

  late final _class_NSInflectionRule1 = _getClass1("NSInflectionRule");
  late final _sel_automaticRule1 = _registerName1("automaticRule");
  late final _sel_canInflectLanguage_1 = _registerName1("canInflectLanguage:");
  late final _sel_canInflectPreferredLocalization1 =
      _registerName1("canInflectPreferredLocalization");
  late final _class_NSOrderedSet1 = _getClass1("NSOrderedSet");
  late final _sel_isEqualToOrderedSet_1 =
      _registerName1("isEqualToOrderedSet:");
  late final _sel_intersectsOrderedSet_1 =
      _registerName1("intersectsOrderedSet:");
  late final _sel_isSubsetOfOrderedSet_1 =
      _registerName1("isSubsetOfOrderedSet:");
  late final _sel_reversedOrderedSet1 = _registerName1("reversedOrderedSet");
  late final _sel_orderedSet1 = _registerName1("orderedSet");
  late final _sel_orderedSetWithObject_1 =
      _registerName1("orderedSetWithObject:");
  late final _sel_orderedSetWithObjects_count_1 =
      _registerName1("orderedSetWithObjects:count:");
  late final _sel_orderedSetWithObjects_1 =
      _registerName1("orderedSetWithObjects:");
  late final _sel_orderedSetWithOrderedSet_1 =
      _registerName1("orderedSetWithOrderedSet:");
  late final _sel_orderedSetWithOrderedSet_range_copyItems_1 =
      _registerName1("orderedSetWithOrderedSet:range:copyItems:");
  instancetype _objc_msgSend_334(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> set1,
    NSRange range,
    bool flag,
  ) {
    return __objc_msgSend_334(
      obj,
      sel,
      set1,
      range,
      flag,
    );
  }

  late final __objc_msgSend_334Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, NSRange, ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_334 = __objc_msgSend_334Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, NSRange, bool)>();

  late final _sel_orderedSetWithArray_1 =
      _registerName1("orderedSetWithArray:");
  late final _sel_orderedSetWithArray_range_copyItems_1 =
      _registerName1("orderedSetWithArray:range:copyItems:");
  late final _sel_orderedSetWithSet_1 = _registerName1("orderedSetWithSet:");
  late final _sel_orderedSetWithSet_copyItems_1 =
      _registerName1("orderedSetWithSet:copyItems:");
  late final _sel_initWithOrderedSet_1 = _registerName1("initWithOrderedSet:");
  late final _sel_initWithOrderedSet_copyItems_1 =
      _registerName1("initWithOrderedSet:copyItems:");
  late final _sel_initWithOrderedSet_range_copyItems_1 =
      _registerName1("initWithOrderedSet:range:copyItems:");
  late final _sel_initWithArray_range_copyItems_1 =
      _registerName1("initWithArray:range:copyItems:");
  late final _sel_differenceFromOrderedSet_withOptions_usingEquivalenceTest_1 =
      _registerName1(
          "differenceFromOrderedSet:withOptions:usingEquivalenceTest:");
  late final _sel_differenceFromOrderedSet_withOptions_1 =
      _registerName1("differenceFromOrderedSet:withOptions:");
  late final _sel_differenceFromOrderedSet_1 =
      _registerName1("differenceFromOrderedSet:");
  late final _sel_orderedSetByApplyingDifference_1 =
      _registerName1("orderedSetByApplyingDifference:");
  late final _sel_filteredOrderedSetUsingPredicate_1 =
      _registerName1("filteredOrderedSetUsingPredicate:");
  late final _class_NSMutableOrderedSet1 = _getClass1("NSMutableOrderedSet");
  late final _sel_addObjects_count_1 = _registerName1("addObjects:count:");
  void _objc_msgSend_335(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
    int count,
  ) {
    return __objc_msgSend_335(
      obj,
      sel,
      objects,
      count,
    );
  }

  late final __objc_msgSend_335Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>,
              NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_335 = __objc_msgSend_335Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>, int)>();

  late final _sel_moveObjectsAtIndexes_toIndex_1 =
      _registerName1("moveObjectsAtIndexes:toIndex:");
  late final _sel_setObject_atIndex_1 = _registerName1("setObject:atIndex:");
  late final _sel_replaceObjectsInRange_withObjects_count_1 =
      _registerName1("replaceObjectsInRange:withObjects:count:");
  void _objc_msgSend_336(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange range,
    ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
    int count,
  ) {
    return __objc_msgSend_336(
      obj,
      sel,
      range,
      objects,
      count,
    );
  }

  late final __objc_msgSend_336Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              NSRange,
              ffi.Pointer<ffi.Pointer<ObjCObject>>,
              NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_336 = __objc_msgSend_336Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSRange,
          ffi.Pointer<ffi.Pointer<ObjCObject>>, int)>();

  late final _sel_intersectOrderedSet_1 =
      _registerName1("intersectOrderedSet:");
  late final _sel_minusOrderedSet_1 = _registerName1("minusOrderedSet:");
  late final _sel_unionOrderedSet_1 = _registerName1("unionOrderedSet:");
  late final _sel_sortRange_options_usingComparator_1 =
      _registerName1("sortRange:options:usingComparator:");
  void _objc_msgSend_337(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange range,
    int opts,
    NSComparator cmptr,
  ) {
    return __objc_msgSend_337(
      obj,
      sel,
      range,
      opts,
      cmptr,
    );
  }

  late final __objc_msgSend_337Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSRange, ffi.Int32, NSComparator)>>('objc_msgSend');
  late final __objc_msgSend_337 = __objc_msgSend_337Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSRange, int,
          NSComparator)>();

  late final _sel_orderedSetWithCapacity_1 =
      _registerName1("orderedSetWithCapacity:");
  late final _class_NSMorphology1 = _getClass1("NSMorphology");
  late final _sel_grammaticalGender1 = _registerName1("grammaticalGender");
  int _objc_msgSend_338(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_338(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_338Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_338 = __objc_msgSend_338Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setGrammaticalGender_1 =
      _registerName1("setGrammaticalGender:");
  void _objc_msgSend_339(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_339(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_339Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_339 = __objc_msgSend_339Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_partOfSpeech1 = _registerName1("partOfSpeech");
  int _objc_msgSend_340(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_340(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_340Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_340 = __objc_msgSend_340Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setPartOfSpeech_1 = _registerName1("setPartOfSpeech:");
  void _objc_msgSend_341(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_341(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_341Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_341 = __objc_msgSend_341Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_number1 = _registerName1("number");
  int _objc_msgSend_342(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_342(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_342Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_342 = __objc_msgSend_342Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setNumber_1 = _registerName1("setNumber:");
  void _objc_msgSend_343(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_343(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_343Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_343 = __objc_msgSend_343Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_customPronounForLanguage_1 =
      _registerName1("customPronounForLanguage:");
  late final _sel_setCustomPronoun_forLanguage_error_1 =
      _registerName1("setCustomPronoun:forLanguage:error:");
  late final _sel_isUnspecified1 = _registerName1("isUnspecified");
  late final _sel_userMorphology1 = _registerName1("userMorphology");
  late final _class_NSOperationQueue1 = _getClass1("NSOperationQueue");
  late final _sel_progress1 = _registerName1("progress");
  late final _sel_addOperation_1 = _registerName1("addOperation:");
  late final _sel_addOperations_waitUntilFinished_1 =
      _registerName1("addOperations:waitUntilFinished:");
  late final _sel_addOperationWithBlock_1 =
      _registerName1("addOperationWithBlock:");
  late final _sel_addBarrierBlock_1 = _registerName1("addBarrierBlock:");
  late final _sel_maxConcurrentOperationCount1 =
      _registerName1("maxConcurrentOperationCount");
  late final _sel_setMaxConcurrentOperationCount_1 =
      _registerName1("setMaxConcurrentOperationCount:");
  void _objc_msgSend_344(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_344(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_344Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSInteger)>>('objc_msgSend');
  late final __objc_msgSend_344 = __objc_msgSend_344Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_isSuspended1 = _registerName1("isSuspended");
  late final _sel_setSuspended_1 = _registerName1("setSuspended:");
  late final _sel_setName_1 = _registerName1("setName:");
  late final _sel_qualityOfService1 = _registerName1("qualityOfService");
  int _objc_msgSend_345(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_345(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_345Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_345 = __objc_msgSend_345Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setQualityOfService_1 =
      _registerName1("setQualityOfService:");
  void _objc_msgSend_346(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_346(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_346Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_346 = __objc_msgSend_346Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_underlyingQueue1 = _registerName1("underlyingQueue");
  late final _sel_setUnderlyingQueue_1 = _registerName1("setUnderlyingQueue:");
  late final _sel_cancelAllOperations1 = _registerName1("cancelAllOperations");
  late final _sel_waitUntilAllOperationsAreFinished1 =
      _registerName1("waitUntilAllOperationsAreFinished");
  late final _sel_currentQueue1 = _registerName1("currentQueue");
  late final _sel_mainQueue1 = _registerName1("mainQueue");
  late final _sel_operations1 = _registerName1("operations");
  late final _sel_operationCount1 = _registerName1("operationCount");
  late final _class_NSOrthography1 = _getClass1("NSOrthography");
  late final _sel_dominantScript1 = _registerName1("dominantScript");
  late final _sel_languageMap1 = _registerName1("languageMap");
  late final _sel_initWithDominantScript_languageMap_1 =
      _registerName1("initWithDominantScript:languageMap:");
  late final _sel_languagesForScript_1 = _registerName1("languagesForScript:");
  late final _sel_dominantLanguageForScript_1 =
      _registerName1("dominantLanguageForScript:");
  late final _sel_dominantLanguage1 = _registerName1("dominantLanguage");
  late final _sel_allScripts1 = _registerName1("allScripts");
  late final _sel_allLanguages1 = _registerName1("allLanguages");
  late final _sel_defaultOrthographyForLanguage_1 =
      _registerName1("defaultOrthographyForLanguage:");
  late final _sel_orthographyWithDominantScript_languageMap_1 =
      _registerName1("orthographyWithDominantScript:languageMap:");
  late final _class_NSPointerArray1 = _getClass1("NSPointerArray");
  late final _sel_initWithOptions_1 = _registerName1("initWithOptions:");
  instancetype _objc_msgSend_347(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int options,
  ) {
    return __objc_msgSend_347(
      obj,
      sel,
      options,
    );
  }

  late final __objc_msgSend_347Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_347 = __objc_msgSend_347Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithPointerFunctions_1 =
      _registerName1("initWithPointerFunctions:");
  late final _sel_pointerArrayWithOptions_1 =
      _registerName1("pointerArrayWithOptions:");
  late final _sel_pointerArrayWithPointerFunctions_1 =
      _registerName1("pointerArrayWithPointerFunctions:");
  late final _sel_pointerFunctions1 = _registerName1("pointerFunctions");
  late final _sel_pointerAtIndex_1 = _registerName1("pointerAtIndex:");
  ffi.Pointer<ffi.Void> _objc_msgSend_348(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int index,
  ) {
    return __objc_msgSend_348(
      obj,
      sel,
      index,
    );
  }

  late final __objc_msgSend_348Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_348 = __objc_msgSend_348Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_addPointer_1 = _registerName1("addPointer:");
  late final _sel_removePointerAtIndex_1 =
      _registerName1("removePointerAtIndex:");
  late final _sel_insertPointer_atIndex_1 =
      _registerName1("insertPointer:atIndex:");
  late final _sel_replacePointerAtIndex_withPointer_1 =
      _registerName1("replacePointerAtIndex:withPointer:");
  void _objc_msgSend_349(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int index,
    ffi.Pointer<ffi.Void> item,
  ) {
    return __objc_msgSend_349(
      obj,
      sel,
      index,
      item,
    );
  }

  late final __objc_msgSend_349Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSUInteger, ffi.Pointer<ffi.Void>)>>('objc_msgSend');
  late final __objc_msgSend_349 = __objc_msgSend_349Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<ffi.Void>)>();

  late final _sel_compact1 = _registerName1("compact");
  late final _sel_setCount_1 = _registerName1("setCount:");
  late final _sel_pointerArrayWithStrongObjects1 =
      _registerName1("pointerArrayWithStrongObjects");
  late final _sel_pointerArrayWithWeakObjects1 =
      _registerName1("pointerArrayWithWeakObjects");
  late final _sel_strongObjectsPointerArray1 =
      _registerName1("strongObjectsPointerArray");
  late final _sel_weakObjectsPointerArray1 =
      _registerName1("weakObjectsPointerArray");
  late final _class_NSProcessInfo1 = _getClass1("NSProcessInfo");
  late final _sel_processInfo1 = _registerName1("processInfo");
  late final _sel_environment1 = _registerName1("environment");
  late final _sel_arguments1 = _registerName1("arguments");
  late final _sel_hostName1 = _registerName1("hostName");
  late final _sel_processName1 = _registerName1("processName");
  late final _sel_setProcessName_1 = _registerName1("setProcessName:");
  late final _sel_processIdentifier1 = _registerName1("processIdentifier");
  late final _sel_globallyUniqueString1 =
      _registerName1("globallyUniqueString");
  late final _sel_operatingSystem1 = _registerName1("operatingSystem");
  late final _sel_operatingSystemName1 = _registerName1("operatingSystemName");
  late final _sel_operatingSystemVersionString1 =
      _registerName1("operatingSystemVersionString");
  late final _sel_operatingSystemVersion1 =
      _registerName1("operatingSystemVersion");
  NSOperatingSystemVersion _objc_msgSend_350(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_350(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_350Ptr = _lookup<
      ffi.NativeFunction<
          NSOperatingSystemVersion Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_350 = __objc_msgSend_350Ptr.asFunction<
      NSOperatingSystemVersion Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_processorCount1 = _registerName1("processorCount");
  late final _sel_activeProcessorCount1 =
      _registerName1("activeProcessorCount");
  late final _sel_physicalMemory1 = _registerName1("physicalMemory");
  late final _sel_isOperatingSystemAtLeastVersion_1 =
      _registerName1("isOperatingSystemAtLeastVersion:");
  bool _objc_msgSend_351(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSOperatingSystemVersion version,
  ) {
    return __objc_msgSend_351(
      obj,
      sel,
      version,
    );
  }

  late final __objc_msgSend_351Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSOperatingSystemVersion)>>('objc_msgSend');
  late final __objc_msgSend_351 = __objc_msgSend_351Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          NSOperatingSystemVersion)>();

  late final _sel_systemUptime1 = _registerName1("systemUptime");
  late final _sel_disableSuddenTermination1 =
      _registerName1("disableSuddenTermination");
  late final _sel_enableSuddenTermination1 =
      _registerName1("enableSuddenTermination");
  late final _sel_disableAutomaticTermination_1 =
      _registerName1("disableAutomaticTermination:");
  late final _sel_enableAutomaticTermination_1 =
      _registerName1("enableAutomaticTermination:");
  late final _sel_automaticTerminationSupportEnabled1 =
      _registerName1("automaticTerminationSupportEnabled");
  late final _sel_setAutomaticTerminationSupportEnabled_1 =
      _registerName1("setAutomaticTerminationSupportEnabled:");
  late final _sel_beginActivityWithOptions_reason_1 =
      _registerName1("beginActivityWithOptions:reason:");
  ffi.Pointer<ObjCObject> _objc_msgSend_352(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int options,
    ffi.Pointer<ObjCObject> reason,
  ) {
    return __objc_msgSend_352(
      obj,
      sel,
      options,
      reason,
    );
  }

  late final __objc_msgSend_352Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Int32,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_352 = __objc_msgSend_352Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, int, ffi.Pointer<ObjCObject>)>();

  late final _sel_endActivity_1 = _registerName1("endActivity:");
  late final _sel_performActivityWithOptions_reason_usingBlock_1 =
      _registerName1("performActivityWithOptions:reason:usingBlock:");
  void _objc_msgSend_353(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int options,
    ffi.Pointer<ObjCObject> reason,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_353(
      obj,
      sel,
      options,
      reason,
      block,
    );
  }

  late final __objc_msgSend_353Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Int32,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_353 = __objc_msgSend_353Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<ObjCObject>, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_performExpiringActivityWithReason_usingBlock_1 =
      _registerName1("performExpiringActivityWithReason:usingBlock:");
  void _objc_msgSend_354(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> reason,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_354(
      obj,
      sel,
      reason,
      block,
    );
  }

  late final __objc_msgSend_354Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_354 = __objc_msgSend_354Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_userName1 = _registerName1("userName");
  late final _sel_fullUserName1 = _registerName1("fullUserName");
  late final _sel_thermalState1 = _registerName1("thermalState");
  int _objc_msgSend_355(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_355(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_355Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_355 = __objc_msgSend_355Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_isLowPowerModeEnabled1 =
      _registerName1("isLowPowerModeEnabled");
  late final _sel_isMacCatalystApp1 = _registerName1("isMacCatalystApp");
  late final _sel_isiOSAppOnMac1 = _registerName1("isiOSAppOnMac");
  late final _class_NSTextCheckingResult1 = _getClass1("NSTextCheckingResult");
  late final _sel_resultType1 = _registerName1("resultType");
  int _objc_msgSend_356(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_356(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_356Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_356 = __objc_msgSend_356Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_range1 = _registerName1("range");
  late final _sel_orthography1 = _registerName1("orthography");
  late final _sel_grammarDetails1 = _registerName1("grammarDetails");
  late final _sel_duration1 = _registerName1("duration");
  late final _sel_components1 = _registerName1("components");
  late final _sel_URL1 = _registerName1("URL");
  late final _sel_replacementString1 = _registerName1("replacementString");
  late final _sel_alternativeStrings1 = _registerName1("alternativeStrings");
  late final _sel_regularExpression1 = _registerName1("regularExpression");
  late final _sel_phoneNumber1 = _registerName1("phoneNumber");
  late final _sel_numberOfRanges1 = _registerName1("numberOfRanges");
  late final _sel_rangeAtIndex_1 = _registerName1("rangeAtIndex:");
  late final _sel_rangeWithName_1 = _registerName1("rangeWithName:");
  late final _sel_resultByAdjustingRangesWithOffset_1 =
      _registerName1("resultByAdjustingRangesWithOffset:");
  late final _sel_addressComponents1 = _registerName1("addressComponents");
  late final _sel_orthographyCheckingResultWithRange_orthography_1 =
      _registerName1("orthographyCheckingResultWithRange:orthography:");
  late final _sel_spellCheckingResultWithRange_1 =
      _registerName1("spellCheckingResultWithRange:");
  late final _sel_grammarCheckingResultWithRange_details_1 =
      _registerName1("grammarCheckingResultWithRange:details:");
  late final _sel_dateCheckingResultWithRange_date_1 =
      _registerName1("dateCheckingResultWithRange:date:");
  late final _sel_dateCheckingResultWithRange_date_timeZone_duration_1 =
      _registerName1("dateCheckingResultWithRange:date:timeZone:duration:");
  ffi.Pointer<ObjCObject> _objc_msgSend_357(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange range,
    ffi.Pointer<ObjCObject> date,
    ffi.Pointer<ObjCObject> timeZone,
    double duration,
  ) {
    return __objc_msgSend_357(
      obj,
      sel,
      range,
      date,
      timeZone,
      duration,
    );
  }

  late final __objc_msgSend_357Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              NSRange,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              NSTimeInterval)>>('objc_msgSend');
  late final __objc_msgSend_357 = __objc_msgSend_357Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          NSRange,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          double)>();

  late final _sel_addressCheckingResultWithRange_components_1 =
      _registerName1("addressCheckingResultWithRange:components:");
  late final _sel_linkCheckingResultWithRange_URL_1 =
      _registerName1("linkCheckingResultWithRange:URL:");
  late final _sel_quoteCheckingResultWithRange_replacementString_1 =
      _registerName1("quoteCheckingResultWithRange:replacementString:");
  late final _sel_dashCheckingResultWithRange_replacementString_1 =
      _registerName1("dashCheckingResultWithRange:replacementString:");
  late final _sel_replacementCheckingResultWithRange_replacementString_1 =
      _registerName1("replacementCheckingResultWithRange:replacementString:");
  late final _sel_correctionCheckingResultWithRange_replacementString_1 =
      _registerName1("correctionCheckingResultWithRange:replacementString:");
  late final _sel_correctionCheckingResultWithRange_replacementString_alternativeStrings_1 =
      _registerName1(
          "correctionCheckingResultWithRange:replacementString:alternativeStrings:");
  ffi.Pointer<ObjCObject> _objc_msgSend_358(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange range,
    ffi.Pointer<ObjCObject> replacementString,
    ffi.Pointer<ObjCObject> alternativeStrings,
  ) {
    return __objc_msgSend_358(
      obj,
      sel,
      range,
      replacementString,
      alternativeStrings,
    );
  }

  late final __objc_msgSend_358Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              NSRange,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_358 = __objc_msgSend_358Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          NSRange,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_regularExpressionCheckingResultWithRanges_count_regularExpression_1 =
      _registerName1(
          "regularExpressionCheckingResultWithRanges:count:regularExpression:");
  ffi.Pointer<ObjCObject> _objc_msgSend_359(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRangePointer ranges,
    int count,
    ffi.Pointer<ObjCObject> regularExpression,
  ) {
    return __objc_msgSend_359(
      obj,
      sel,
      ranges,
      count,
      regularExpression,
    );
  }

  late final __objc_msgSend_359Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              NSRangePointer,
              NSUInteger,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_359 = __objc_msgSend_359Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          NSRangePointer,
          int,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_phoneNumberCheckingResultWithRange_phoneNumber_1 =
      _registerName1("phoneNumberCheckingResultWithRange:phoneNumber:");
  late final _sel_transitInformationCheckingResultWithRange_components_1 =
      _registerName1("transitInformationCheckingResultWithRange:components:");
  late final _class_NSRegularExpression1 = _getClass1("NSRegularExpression");
  late final _sel_regularExpressionWithPattern_options_error_1 =
      _registerName1("regularExpressionWithPattern:options:error:");
  ffi.Pointer<ObjCObject> _objc_msgSend_360(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> pattern,
    int options,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_360(
      obj,
      sel,
      pattern,
      options,
      error,
    );
  }

  late final __objc_msgSend_360Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_360 = __objc_msgSend_360Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          int,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_initWithPattern_options_error_1 =
      _registerName1("initWithPattern:options:error:");
  late final _sel_pattern1 = _registerName1("pattern");
  late final _sel_options1 = _registerName1("options");
  int _objc_msgSend_361(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_361(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_361Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_361 = __objc_msgSend_361Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_numberOfCaptureGroups1 =
      _registerName1("numberOfCaptureGroups");
  late final _sel_escapedPatternForString_1 =
      _registerName1("escapedPatternForString:");
  late final _sel_enumerateMatchesInString_options_range_usingBlock_1 =
      _registerName1("enumerateMatchesInString:options:range:usingBlock:");
  void _objc_msgSend_362(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> string,
    int options,
    NSRange range,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_362(
      obj,
      sel,
      string,
      options,
      range,
      block,
    );
  }

  late final __objc_msgSend_362Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              NSRange,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_362 = __objc_msgSend_362Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int, NSRange, ffi.Pointer<_ObjCBlock>)>();

  late final _sel_matchesInString_options_range_1 =
      _registerName1("matchesInString:options:range:");
  ffi.Pointer<ObjCObject> _objc_msgSend_363(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> string,
    int options,
    NSRange range,
  ) {
    return __objc_msgSend_363(
      obj,
      sel,
      string,
      options,
      range,
    );
  }

  late final __objc_msgSend_363Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              NSRange)>>('objc_msgSend');
  late final __objc_msgSend_363 = __objc_msgSend_363Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>, int, NSRange)>();

  late final _sel_numberOfMatchesInString_options_range_1 =
      _registerName1("numberOfMatchesInString:options:range:");
  int _objc_msgSend_364(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> string,
    int options,
    NSRange range,
  ) {
    return __objc_msgSend_364(
      obj,
      sel,
      string,
      options,
      range,
    );
  }

  late final __objc_msgSend_364Ptr = _lookup<
      ffi.NativeFunction<
          NSUInteger Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Int32, NSRange)>>('objc_msgSend');
  late final __objc_msgSend_364 = __objc_msgSend_364Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int, NSRange)>();

  late final _sel_firstMatchInString_options_range_1 =
      _registerName1("firstMatchInString:options:range:");
  late final _sel_rangeOfFirstMatchInString_options_range_1 =
      _registerName1("rangeOfFirstMatchInString:options:range:");
  NSRange _objc_msgSend_365(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> string,
    int options,
    NSRange range,
  ) {
    return __objc_msgSend_365(
      obj,
      sel,
      string,
      options,
      range,
    );
  }

  late final __objc_msgSend_365Ptr = _lookup<
      ffi.NativeFunction<
          NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Int32, NSRange)>>('objc_msgSend');
  late final __objc_msgSend_365 = __objc_msgSend_365Ptr.asFunction<
      NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int, NSRange)>();

  late final _sel_stringByReplacingMatchesInString_options_range_withTemplate_1 =
      _registerName1(
          "stringByReplacingMatchesInString:options:range:withTemplate:");
  ffi.Pointer<ObjCObject> _objc_msgSend_366(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> string,
    int options,
    NSRange range,
    ffi.Pointer<ObjCObject> templ,
  ) {
    return __objc_msgSend_366(
      obj,
      sel,
      string,
      options,
      range,
      templ,
    );
  }

  late final __objc_msgSend_366Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              NSRange,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_366 = __objc_msgSend_366Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          int,
          NSRange,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_replaceMatchesInString_options_range_withTemplate_1 =
      _registerName1("replaceMatchesInString:options:range:withTemplate:");
  int _objc_msgSend_367(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> string,
    int options,
    NSRange range,
    ffi.Pointer<ObjCObject> templ,
  ) {
    return __objc_msgSend_367(
      obj,
      sel,
      string,
      options,
      range,
      templ,
    );
  }

  late final __objc_msgSend_367Ptr = _lookup<
      ffi.NativeFunction<
          NSUInteger Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              NSRange,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_367 = __objc_msgSend_367Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int, NSRange, ffi.Pointer<ObjCObject>)>();

  late final _sel_replacementStringForResult_inString_offset_template_1 =
      _registerName1("replacementStringForResult:inString:offset:template:");
  ffi.Pointer<ObjCObject> _objc_msgSend_368(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> result,
    ffi.Pointer<ObjCObject> string,
    int offset,
    ffi.Pointer<ObjCObject> templ,
  ) {
    return __objc_msgSend_368(
      obj,
      sel,
      result,
      string,
      offset,
      templ,
    );
  }

  late final __objc_msgSend_368Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              NSInteger,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_368 = __objc_msgSend_368Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          int,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_escapedTemplateForString_1 =
      _registerName1("escapedTemplateForString:");
  late final _class_NSStream1 = _getClass1("NSStream");
  late final _sel_open1 = _registerName1("open");
  late final _sel_close1 = _registerName1("close");
  late final _sel_scheduleInRunLoop_forMode_1 =
      _registerName1("scheduleInRunLoop:forMode:");
  late final _sel_removeFromRunLoop_forMode_1 =
      _registerName1("removeFromRunLoop:forMode:");
  late final _sel_streamStatus1 = _registerName1("streamStatus");
  int _objc_msgSend_369(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_369(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_369Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_369 = __objc_msgSend_369Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_streamError1 = _registerName1("streamError");
  late final _sel_getStreamsToHostWithName_port_inputStream_outputStream_1 =
      _registerName1("getStreamsToHostWithName:port:inputStream:outputStream:");
  void _objc_msgSend_370(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> hostname,
    int port,
    ffi.Pointer<ffi.Pointer<ObjCObject>> inputStream,
    ffi.Pointer<ffi.Pointer<ObjCObject>> outputStream,
  ) {
    return __objc_msgSend_370(
      obj,
      sel,
      hostname,
      port,
      inputStream,
      outputStream,
    );
  }

  late final __objc_msgSend_370Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              NSInteger,
              ffi.Pointer<ffi.Pointer<ObjCObject>>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_370 = __objc_msgSend_370Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          int,
          ffi.Pointer<ffi.Pointer<ObjCObject>>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_getStreamsToHost_port_inputStream_outputStream_1 =
      _registerName1("getStreamsToHost:port:inputStream:outputStream:");
  late final _sel_getBoundStreamsWithBufferSize_inputStream_outputStream_1 =
      _registerName1("getBoundStreamsWithBufferSize:inputStream:outputStream:");
  void _objc_msgSend_371(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int bufferSize,
    ffi.Pointer<ffi.Pointer<ObjCObject>> inputStream,
    ffi.Pointer<ffi.Pointer<ObjCObject>> outputStream,
  ) {
    return __objc_msgSend_371(
      obj,
      sel,
      bufferSize,
      inputStream,
      outputStream,
    );
  }

  late final __objc_msgSend_371Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              NSUInteger,
              ffi.Pointer<ffi.Pointer<ObjCObject>>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_371 = __objc_msgSend_371Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          int,
          ffi.Pointer<ffi.Pointer<ObjCObject>>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _class_NSInputStream1 = _getClass1("NSInputStream");
  late final _sel_read_maxLength_1 = _registerName1("read:maxLength:");
  int _objc_msgSend_372(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Uint8> buffer,
    int len,
  ) {
    return __objc_msgSend_372(
      obj,
      sel,
      buffer,
      len,
    );
  }

  late final __objc_msgSend_372Ptr = _lookup<
      ffi.NativeFunction<
          NSInteger Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Uint8>, NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_372 = __objc_msgSend_372Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Uint8>, int)>();

  late final _sel_getBuffer_length_1 = _registerName1("getBuffer:length:");
  bool _objc_msgSend_373(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> buffer,
    ffi.Pointer<NSUInteger> len,
  ) {
    return __objc_msgSend_373(
      obj,
      sel,
      buffer,
      len,
    );
  }

  late final __objc_msgSend_373Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<NSUInteger>)>>('objc_msgSend');
  late final __objc_msgSend_373 = __objc_msgSend_373Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Pointer<ffi.Uint8>>, ffi.Pointer<NSUInteger>)>();

  late final _sel_hasBytesAvailable1 = _registerName1("hasBytesAvailable");
  late final _sel_initWithFileAtPath_1 = _registerName1("initWithFileAtPath:");
  late final _sel_inputStreamWithData_1 =
      _registerName1("inputStreamWithData:");
  late final _sel_inputStreamWithFileAtPath_1 =
      _registerName1("inputStreamWithFileAtPath:");
  late final _sel_inputStreamWithURL_1 = _registerName1("inputStreamWithURL:");
  late final _class_NSOutputStream1 = _getClass1("NSOutputStream");
  late final _sel_write_maxLength_1 = _registerName1("write:maxLength:");
  late final _sel_hasSpaceAvailable1 = _registerName1("hasSpaceAvailable");
  late final _sel_initToMemory1 = _registerName1("initToMemory");
  late final _sel_initToBuffer_capacity_1 =
      _registerName1("initToBuffer:capacity:");
  instancetype _objc_msgSend_374(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Uint8> buffer,
    int capacity,
  ) {
    return __objc_msgSend_374(
      obj,
      sel,
      buffer,
      capacity,
    );
  }

  late final __objc_msgSend_374Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Uint8>, NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_374 = __objc_msgSend_374Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Uint8>, int)>();

  late final _sel_initWithURL_append_1 = _registerName1("initWithURL:append:");
  late final _sel_initToFileAtPath_append_1 =
      _registerName1("initToFileAtPath:append:");
  late final _sel_outputStreamToMemory1 =
      _registerName1("outputStreamToMemory");
  late final _sel_outputStreamToBuffer_capacity_1 =
      _registerName1("outputStreamToBuffer:capacity:");
  late final _sel_outputStreamToFileAtPath_append_1 =
      _registerName1("outputStreamToFileAtPath:append:");
  late final _sel_outputStreamWithURL_append_1 =
      _registerName1("outputStreamWithURL:append:");
  late final _class_NSTimeZone1 = _getClass1("NSTimeZone");
  late final _sel_secondsFromGMTForDate_1 =
      _registerName1("secondsFromGMTForDate:");
  late final _sel_abbreviationForDate_1 =
      _registerName1("abbreviationForDate:");
  late final _sel_isDaylightSavingTimeForDate_1 =
      _registerName1("isDaylightSavingTimeForDate:");
  late final _sel_daylightSavingTimeOffsetForDate_1 =
      _registerName1("daylightSavingTimeOffsetForDate:");
  late final _sel_nextDaylightSavingTimeTransitionAfterDate_1 =
      _registerName1("nextDaylightSavingTimeTransitionAfterDate:");
  late final _sel_systemTimeZone1 = _registerName1("systemTimeZone");
  late final _sel_resetSystemTimeZone1 = _registerName1("resetSystemTimeZone");
  late final _sel_defaultTimeZone1 = _registerName1("defaultTimeZone");
  late final _sel_setDefaultTimeZone_1 = _registerName1("setDefaultTimeZone:");
  late final _sel_localTimeZone1 = _registerName1("localTimeZone");
  late final _sel_knownTimeZoneNames1 = _registerName1("knownTimeZoneNames");
  late final _sel_abbreviationDictionary1 =
      _registerName1("abbreviationDictionary");
  late final _sel_setAbbreviationDictionary_1 =
      _registerName1("setAbbreviationDictionary:");
  late final _sel_timeZoneDataVersion1 = _registerName1("timeZoneDataVersion");
  late final _sel_secondsFromGMT1 = _registerName1("secondsFromGMT");
  late final _sel_abbreviation1 = _registerName1("abbreviation");
  late final _sel_isDaylightSavingTime1 =
      _registerName1("isDaylightSavingTime");
  late final _sel_daylightSavingTimeOffset1 =
      _registerName1("daylightSavingTimeOffset");
  late final _sel_nextDaylightSavingTimeTransition1 =
      _registerName1("nextDaylightSavingTimeTransition");
  late final _sel_isEqualToTimeZone_1 = _registerName1("isEqualToTimeZone:");
  late final _sel_localizedName_locale_1 =
      _registerName1("localizedName:locale:");
  ffi.Pointer<ObjCObject> _objc_msgSend_375(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int style,
    ffi.Pointer<ObjCObject> locale,
  ) {
    return __objc_msgSend_375(
      obj,
      sel,
      style,
      locale,
    );
  }

  late final __objc_msgSend_375Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Int32,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_375 = __objc_msgSend_375Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, int, ffi.Pointer<ObjCObject>)>();

  late final _sel_timeZoneWithName_1 = _registerName1("timeZoneWithName:");
  late final _sel_timeZoneWithName_data_1 =
      _registerName1("timeZoneWithName:data:");
  late final _sel_initWithName_1 = _registerName1("initWithName:");
  late final _sel_initWithName_data_1 = _registerName1("initWithName:data:");
  late final _sel_timeZoneForSecondsFromGMT_1 =
      _registerName1("timeZoneForSecondsFromGMT:");
  late final _sel_timeZoneWithAbbreviation_1 =
      _registerName1("timeZoneWithAbbreviation:");
  late final _class_NSURLCache1 = _getClass1("NSURLCache");
  late final _sel_sharedURLCache1 = _registerName1("sharedURLCache");
  late final _sel_setSharedURLCache_1 = _registerName1("setSharedURLCache:");
  late final _sel_initWithMemoryCapacity_diskCapacity_diskPath_1 =
      _registerName1("initWithMemoryCapacity:diskCapacity:diskPath:");
  instancetype _objc_msgSend_376(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int memoryCapacity,
    int diskCapacity,
    ffi.Pointer<ObjCObject> path,
  ) {
    return __objc_msgSend_376(
      obj,
      sel,
      memoryCapacity,
      diskCapacity,
      path,
    );
  }

  late final __objc_msgSend_376Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              NSUInteger,
              NSUInteger,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_376 = __objc_msgSend_376Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          int, ffi.Pointer<ObjCObject>)>();

  late final _sel_initWithMemoryCapacity_diskCapacity_directoryURL_1 =
      _registerName1("initWithMemoryCapacity:diskCapacity:directoryURL:");
  late final _sel_cachedResponseForRequest_1 =
      _registerName1("cachedResponseForRequest:");
  late final _sel_storeCachedResponse_forRequest_1 =
      _registerName1("storeCachedResponse:forRequest:");
  late final _sel_removeCachedResponseForRequest_1 =
      _registerName1("removeCachedResponseForRequest:");
  late final _sel_removeAllCachedResponses1 =
      _registerName1("removeAllCachedResponses");
  late final _sel_removeCachedResponsesSinceDate_1 =
      _registerName1("removeCachedResponsesSinceDate:");
  late final _sel_memoryCapacity1 = _registerName1("memoryCapacity");
  late final _sel_setMemoryCapacity_1 = _registerName1("setMemoryCapacity:");
  late final _sel_diskCapacity1 = _registerName1("diskCapacity");
  late final _sel_setDiskCapacity_1 = _registerName1("setDiskCapacity:");
  late final _sel_currentMemoryUsage1 = _registerName1("currentMemoryUsage");
  late final _sel_currentDiskUsage1 = _registerName1("currentDiskUsage");
  late final _sel_storeCachedResponse_forDataTask_1 =
      _registerName1("storeCachedResponse:forDataTask:");
  late final _sel_getCachedResponseForDataTask_completionHandler_1 =
      _registerName1("getCachedResponseForDataTask:completionHandler:");
  late final _sel_removeCachedResponseForDataTask_1 =
      _registerName1("removeCachedResponseForDataTask:");
  late final _class_NSURLConnection1 = _getClass1("NSURLConnection");
  late final _sel_initWithRequest_delegate_startImmediately_1 =
      _registerName1("initWithRequest:delegate:startImmediately:");
  instancetype _objc_msgSend_377(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> request,
    ffi.Pointer<ObjCObject> delegate,
    bool startImmediately,
  ) {
    return __objc_msgSend_377(
      obj,
      sel,
      request,
      delegate,
      startImmediately,
    );
  }

  late final __objc_msgSend_377Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_377 = __objc_msgSend_377Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>, bool)>();

  late final _sel_initWithRequest_delegate_1 =
      _registerName1("initWithRequest:delegate:");
  late final _sel_connectionWithRequest_delegate_1 =
      _registerName1("connectionWithRequest:delegate:");
  late final _sel_originalRequest1 = _registerName1("originalRequest");
  late final _sel_currentRequest1 = _registerName1("currentRequest");
  late final _sel_start1 = _registerName1("start");
  late final _sel_cancel1 = _registerName1("cancel");
  late final _sel_unscheduleFromRunLoop_forMode_1 =
      _registerName1("unscheduleFromRunLoop:forMode:");
  late final _sel_setDelegateQueue_1 = _registerName1("setDelegateQueue:");
  late final _sel_canHandleRequest_1 = _registerName1("canHandleRequest:");
  late final _sel_sendSynchronousRequest_returningResponse_error_1 =
      _registerName1("sendSynchronousRequest:returningResponse:error:");
  late final _sel_sendAsynchronousRequest_queue_completionHandler_1 =
      _registerName1("sendAsynchronousRequest:queue:completionHandler:");
  void _objc_msgSend_378(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> request,
    ffi.Pointer<ObjCObject> queue,
    ffi.Pointer<_ObjCBlock> handler,
  ) {
    return __objc_msgSend_378(
      obj,
      sel,
      request,
      queue,
      handler,
    );
  }

  late final __objc_msgSend_378Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_378 = __objc_msgSend_378Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<_ObjCBlock>)>();

  late final _class_NSURLCredential1 = _getClass1("NSURLCredential");
  late final _sel_persistence1 = _registerName1("persistence");
  int _objc_msgSend_379(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_379(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_379Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_379 = __objc_msgSend_379Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_initWithUser_password_persistence_1 =
      _registerName1("initWithUser:password:persistence:");
  instancetype _objc_msgSend_380(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> user,
    ffi.Pointer<ObjCObject> password,
    int persistence,
  ) {
    return __objc_msgSend_380(
      obj,
      sel,
      user,
      password,
      persistence,
    );
  }

  late final __objc_msgSend_380Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_380 = __objc_msgSend_380Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>, int)>();

  late final _sel_credentialWithUser_password_persistence_1 =
      _registerName1("credentialWithUser:password:persistence:");
  late final _sel_hasPassword1 = _registerName1("hasPassword");
  late final _sel_initWithIdentity_certificates_persistence_1 =
      _registerName1("initWithIdentity:certificates:persistence:");
  instancetype _objc_msgSend_381(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    SecIdentityRef identity,
    ffi.Pointer<ObjCObject> certArray,
    int persistence,
  ) {
    return __objc_msgSend_381(
      obj,
      sel,
      identity,
      certArray,
      persistence,
    );
  }

  late final __objc_msgSend_381Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              SecIdentityRef,
              ffi.Pointer<ObjCObject>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_381 = __objc_msgSend_381Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          SecIdentityRef, ffi.Pointer<ObjCObject>, int)>();

  late final _sel_credentialWithIdentity_certificates_persistence_1 =
      _registerName1("credentialWithIdentity:certificates:persistence:");
  late final _sel_identity1 = _registerName1("identity");
  SecIdentityRef _objc_msgSend_382(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_382(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_382Ptr = _lookup<
      ffi.NativeFunction<
          SecIdentityRef Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_382 = __objc_msgSend_382Ptr.asFunction<
      SecIdentityRef Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_certificates1 = _registerName1("certificates");
  late final _sel_initWithTrust_1 = _registerName1("initWithTrust:");
  instancetype _objc_msgSend_383(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    SecTrustRef trust,
  ) {
    return __objc_msgSend_383(
      obj,
      sel,
      trust,
    );
  }

  late final __objc_msgSend_383Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              SecTrustRef)>>('objc_msgSend');
  late final __objc_msgSend_383 = __objc_msgSend_383Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, SecTrustRef)>();

  late final _sel_credentialForTrust_1 = _registerName1("credentialForTrust:");
  late final _class_NSURLProtectionSpace1 = _getClass1("NSURLProtectionSpace");
  late final _sel_initWithHost_port_protocol_realm_authenticationMethod_1 =
      _registerName1("initWithHost:port:protocol:realm:authenticationMethod:");
  instancetype _objc_msgSend_384(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> host,
    int port,
    ffi.Pointer<ObjCObject> protocol,
    ffi.Pointer<ObjCObject> realm,
    ffi.Pointer<ObjCObject> authenticationMethod,
  ) {
    return __objc_msgSend_384(
      obj,
      sel,
      host,
      port,
      protocol,
      realm,
      authenticationMethod,
    );
  }

  late final __objc_msgSend_384Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              NSInteger,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_384 = __objc_msgSend_384Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          int,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_initWithProxyHost_port_type_realm_authenticationMethod_1 =
      _registerName1("initWithProxyHost:port:type:realm:authenticationMethod:");
  late final _sel_realm1 = _registerName1("realm");
  late final _sel_receivesCredentialSecurely1 =
      _registerName1("receivesCredentialSecurely");
  late final _sel_isProxy1 = _registerName1("isProxy");
  late final _sel_proxyType1 = _registerName1("proxyType");
  late final _sel_protocol1 = _registerName1("protocol");
  late final _sel_authenticationMethod1 =
      _registerName1("authenticationMethod");
  late final _sel_distinguishedNames1 = _registerName1("distinguishedNames");
  late final _sel_serverTrust1 = _registerName1("serverTrust");
  SecTrustRef _objc_msgSend_385(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_385(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_385Ptr = _lookup<
      ffi.NativeFunction<
          SecTrustRef Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_385 = __objc_msgSend_385Ptr.asFunction<
      SecTrustRef Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _class_NSURLCredentialStorage1 =
      _getClass1("NSURLCredentialStorage");
  late final _sel_sharedCredentialStorage1 =
      _registerName1("sharedCredentialStorage");
  late final _sel_credentialsForProtectionSpace_1 =
      _registerName1("credentialsForProtectionSpace:");
  late final _sel_allCredentials1 = _registerName1("allCredentials");
  late final _sel_setCredential_forProtectionSpace_1 =
      _registerName1("setCredential:forProtectionSpace:");
  late final _sel_removeCredential_forProtectionSpace_1 =
      _registerName1("removeCredential:forProtectionSpace:");
  late final _sel_removeCredential_forProtectionSpace_options_1 =
      _registerName1("removeCredential:forProtectionSpace:options:");
  late final _sel_defaultCredentialForProtectionSpace_1 =
      _registerName1("defaultCredentialForProtectionSpace:");
  late final _sel_setDefaultCredential_forProtectionSpace_1 =
      _registerName1("setDefaultCredential:forProtectionSpace:");
  late final _sel_getCredentialsForProtectionSpace_task_completionHandler_1 =
      _registerName1(
          "getCredentialsForProtectionSpace:task:completionHandler:");
  void _objc_msgSend_386(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> protectionSpace,
    ffi.Pointer<ObjCObject> task,
    ffi.Pointer<_ObjCBlock> completionHandler,
  ) {
    return __objc_msgSend_386(
      obj,
      sel,
      protectionSpace,
      task,
      completionHandler,
    );
  }

  late final __objc_msgSend_386Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_386 = __objc_msgSend_386Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_setCredential_forProtectionSpace_task_1 =
      _registerName1("setCredential:forProtectionSpace:task:");
  late final _sel_removeCredential_forProtectionSpace_options_task_1 =
      _registerName1("removeCredential:forProtectionSpace:options:task:");
  void _objc_msgSend_387(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> credential,
    ffi.Pointer<ObjCObject> protectionSpace,
    ffi.Pointer<ObjCObject> options,
    ffi.Pointer<ObjCObject> task,
  ) {
    return __objc_msgSend_387(
      obj,
      sel,
      credential,
      protectionSpace,
      options,
      task,
    );
  }

  late final __objc_msgSend_387Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_387 = __objc_msgSend_387Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_getDefaultCredentialForProtectionSpace_task_completionHandler_1 =
      _registerName1(
          "getDefaultCredentialForProtectionSpace:task:completionHandler:");
  late final _sel_setDefaultCredential_forProtectionSpace_task_1 =
      _registerName1("setDefaultCredential:forProtectionSpace:task:");
  late final _class_NSURLProtocol1 = _getClass1("NSURLProtocol");
  late final _sel_initWithRequest_cachedResponse_client_1 =
      _registerName1("initWithRequest:cachedResponse:client:");
  late final _sel_client1 = _registerName1("client");
  late final _sel_request1 = _registerName1("request");
  late final _sel_cachedResponse1 = _registerName1("cachedResponse");
  late final _sel_canInitWithRequest_1 = _registerName1("canInitWithRequest:");
  late final _sel_canonicalRequestForRequest_1 =
      _registerName1("canonicalRequestForRequest:");
  late final _sel_requestIsCacheEquivalent_toRequest_1 =
      _registerName1("requestIsCacheEquivalent:toRequest:");
  late final _sel_startLoading1 = _registerName1("startLoading");
  late final _sel_stopLoading1 = _registerName1("stopLoading");
  late final _sel_propertyForKey_inRequest_1 =
      _registerName1("propertyForKey:inRequest:");
  late final _sel_setProperty_forKey_inRequest_1 =
      _registerName1("setProperty:forKey:inRequest:");
  late final _sel_removePropertyForKey_inRequest_1 =
      _registerName1("removePropertyForKey:inRequest:");
  late final _sel_registerClass_1 = _registerName1("registerClass:");
  late final _sel_unregisterClass_1 = _registerName1("unregisterClass:");
  late final _sel_canInitWithTask_1 = _registerName1("canInitWithTask:");
  late final _sel_initWithTask_cachedResponse_client_1 =
      _registerName1("initWithTask:cachedResponse:client:");
  late final _sel_task1 = _registerName1("task");
  late final _class_NSURLRequest1 = _getClass1("NSURLRequest");
  late final _sel_requestWithURL_1 = _registerName1("requestWithURL:");
  late final _sel_supportsSecureCoding1 =
      _registerName1("supportsSecureCoding");
  late final _sel_requestWithURL_cachePolicy_timeoutInterval_1 =
      _registerName1("requestWithURL:cachePolicy:timeoutInterval:");
  instancetype _objc_msgSend_388(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> URL,
    int cachePolicy,
    double timeoutInterval,
  ) {
    return __objc_msgSend_388(
      obj,
      sel,
      URL,
      cachePolicy,
      timeoutInterval,
    );
  }

  late final __objc_msgSend_388Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              NSTimeInterval)>>('objc_msgSend');
  late final __objc_msgSend_388 = __objc_msgSend_388Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int, double)>();

  late final _sel_initWithURL_cachePolicy_timeoutInterval_1 =
      _registerName1("initWithURL:cachePolicy:timeoutInterval:");
  late final _sel_cachePolicy1 = _registerName1("cachePolicy");
  int _objc_msgSend_389(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_389(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_389Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_389 = __objc_msgSend_389Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_timeoutInterval1 = _registerName1("timeoutInterval");
  late final _sel_mainDocumentURL1 = _registerName1("mainDocumentURL");
  late final _sel_networkServiceType1 = _registerName1("networkServiceType");
  int _objc_msgSend_390(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_390(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_390Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_390 = __objc_msgSend_390Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_allowsCellularAccess1 =
      _registerName1("allowsCellularAccess");
  late final _sel_allowsExpensiveNetworkAccess1 =
      _registerName1("allowsExpensiveNetworkAccess");
  late final _sel_allowsConstrainedNetworkAccess1 =
      _registerName1("allowsConstrainedNetworkAccess");
  late final _sel_assumesHTTP3Capable1 = _registerName1("assumesHTTP3Capable");
  late final _sel_attribution1 = _registerName1("attribution");
  int _objc_msgSend_391(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_391(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_391Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_391 = __objc_msgSend_391Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_HTTPMethod1 = _registerName1("HTTPMethod");
  late final _sel_allHTTPHeaderFields1 = _registerName1("allHTTPHeaderFields");
  late final _sel_valueForHTTPHeaderField_1 =
      _registerName1("valueForHTTPHeaderField:");
  late final _sel_HTTPBody1 = _registerName1("HTTPBody");
  late final _sel_HTTPBodyStream1 = _registerName1("HTTPBodyStream");
  late final _sel_HTTPShouldHandleCookies1 =
      _registerName1("HTTPShouldHandleCookies");
  late final _sel_HTTPShouldUsePipelining1 =
      _registerName1("HTTPShouldUsePipelining");
  late final _class_NSMutableURLRequest1 = _getClass1("NSMutableURLRequest");
  late final _sel_setURL_1 = _registerName1("setURL:");
  late final _sel_setCachePolicy_1 = _registerName1("setCachePolicy:");
  void _objc_msgSend_392(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_392(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_392Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_392 = __objc_msgSend_392Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_setTimeoutInterval_1 = _registerName1("setTimeoutInterval:");
  void _objc_msgSend_393(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    double value,
  ) {
    return __objc_msgSend_393(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_393Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSTimeInterval)>>('objc_msgSend');
  late final __objc_msgSend_393 = __objc_msgSend_393Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, double)>();

  late final _sel_setMainDocumentURL_1 = _registerName1("setMainDocumentURL:");
  late final _sel_setNetworkServiceType_1 =
      _registerName1("setNetworkServiceType:");
  void _objc_msgSend_394(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_394(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_394Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_394 = __objc_msgSend_394Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_setAllowsCellularAccess_1 =
      _registerName1("setAllowsCellularAccess:");
  late final _sel_setAllowsExpensiveNetworkAccess_1 =
      _registerName1("setAllowsExpensiveNetworkAccess:");
  late final _sel_setAllowsConstrainedNetworkAccess_1 =
      _registerName1("setAllowsConstrainedNetworkAccess:");
  late final _sel_setAssumesHTTP3Capable_1 =
      _registerName1("setAssumesHTTP3Capable:");
  late final _sel_setAttribution_1 = _registerName1("setAttribution:");
  void _objc_msgSend_395(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_395(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_395Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_395 = __objc_msgSend_395Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_setHTTPMethod_1 = _registerName1("setHTTPMethod:");
  late final _sel_setAllHTTPHeaderFields_1 =
      _registerName1("setAllHTTPHeaderFields:");
  late final _sel_setValue_forHTTPHeaderField_1 =
      _registerName1("setValue:forHTTPHeaderField:");
  late final _sel_addValue_forHTTPHeaderField_1 =
      _registerName1("addValue:forHTTPHeaderField:");
  late final _sel_setHTTPBody_1 = _registerName1("setHTTPBody:");
  late final _sel_setHTTPBodyStream_1 = _registerName1("setHTTPBodyStream:");
  late final _sel_setHTTPShouldHandleCookies_1 =
      _registerName1("setHTTPShouldHandleCookies:");
  late final _sel_setHTTPShouldUsePipelining_1 =
      _registerName1("setHTTPShouldUsePipelining:");
  late final _class_NSXMLParser1 = _getClass1("NSXMLParser");
  late final _sel_initWithStream_1 = _registerName1("initWithStream:");
  late final _sel_shouldProcessNamespaces1 =
      _registerName1("shouldProcessNamespaces");
  late final _sel_setShouldProcessNamespaces_1 =
      _registerName1("setShouldProcessNamespaces:");
  late final _sel_shouldReportNamespacePrefixes1 =
      _registerName1("shouldReportNamespacePrefixes");
  late final _sel_setShouldReportNamespacePrefixes_1 =
      _registerName1("setShouldReportNamespacePrefixes:");
  late final _sel_externalEntityResolvingPolicy1 =
      _registerName1("externalEntityResolvingPolicy");
  int _objc_msgSend_396(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_396(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_396Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_396 = __objc_msgSend_396Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setExternalEntityResolvingPolicy_1 =
      _registerName1("setExternalEntityResolvingPolicy:");
  void _objc_msgSend_397(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_397(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_397Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_397 = __objc_msgSend_397Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_allowedExternalEntityURLs1 =
      _registerName1("allowedExternalEntityURLs");
  late final _sel_setAllowedExternalEntityURLs_1 =
      _registerName1("setAllowedExternalEntityURLs:");
  late final _sel_parse1 = _registerName1("parse");
  late final _sel_abortParsing1 = _registerName1("abortParsing");
  late final _sel_parserError1 = _registerName1("parserError");
  late final _sel_shouldResolveExternalEntities1 =
      _registerName1("shouldResolveExternalEntities");
  late final _sel_setShouldResolveExternalEntities_1 =
      _registerName1("setShouldResolveExternalEntities:");
  late final _sel_publicID1 = _registerName1("publicID");
  late final _sel_systemID1 = _registerName1("systemID");
  late final _sel_lineNumber1 = _registerName1("lineNumber");
  late final _sel_columnNumber1 = _registerName1("columnNumber");
  late final _class_NSFileWrapper1 = _getClass1("NSFileWrapper");
  late final _sel_initWithURL_options_error_1 =
      _registerName1("initWithURL:options:error:");
  instancetype _objc_msgSend_398(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
    int options,
    ffi.Pointer<ffi.Pointer<ObjCObject>> outError,
  ) {
    return __objc_msgSend_398(
      obj,
      sel,
      url,
      options,
      outError,
    );
  }

  late final __objc_msgSend_398Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_398 = __objc_msgSend_398Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          int,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_initDirectoryWithFileWrappers_1 =
      _registerName1("initDirectoryWithFileWrappers:");
  late final _sel_initRegularFileWithContents_1 =
      _registerName1("initRegularFileWithContents:");
  late final _sel_initSymbolicLinkWithDestinationURL_1 =
      _registerName1("initSymbolicLinkWithDestinationURL:");
  late final _sel_initWithSerializedRepresentation_1 =
      _registerName1("initWithSerializedRepresentation:");
  late final _sel_isDirectory1 = _registerName1("isDirectory");
  late final _sel_isRegularFile1 = _registerName1("isRegularFile");
  late final _sel_isSymbolicLink1 = _registerName1("isSymbolicLink");
  late final _sel_preferredFilename1 = _registerName1("preferredFilename");
  late final _sel_setPreferredFilename_1 =
      _registerName1("setPreferredFilename:");
  late final _sel_filename1 = _registerName1("filename");
  late final _sel_setFilename_1 = _registerName1("setFilename:");
  late final _sel_fileAttributes1 = _registerName1("fileAttributes");
  late final _sel_setFileAttributes_1 = _registerName1("setFileAttributes:");
  late final _sel_matchesContentsOfURL_1 =
      _registerName1("matchesContentsOfURL:");
  late final _sel_readFromURL_options_error_1 =
      _registerName1("readFromURL:options:error:");
  bool _objc_msgSend_399(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
    int options,
    ffi.Pointer<ffi.Pointer<ObjCObject>> outError,
  ) {
    return __objc_msgSend_399(
      obj,
      sel,
      url,
      options,
      outError,
    );
  }

  late final __objc_msgSend_399Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_399 = __objc_msgSend_399Ptr.asFunction<
      bool Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          int,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_writeToURL_options_originalContentsURL_error_1 =
      _registerName1("writeToURL:options:originalContentsURL:error:");
  bool _objc_msgSend_400(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
    int options,
    ffi.Pointer<ObjCObject> originalContentsURL,
    ffi.Pointer<ffi.Pointer<ObjCObject>> outError,
  ) {
    return __objc_msgSend_400(
      obj,
      sel,
      url,
      options,
      originalContentsURL,
      outError,
    );
  }

  late final __objc_msgSend_400Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_400 = __objc_msgSend_400Ptr.asFunction<
      bool Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          int,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_serializedRepresentation1 =
      _registerName1("serializedRepresentation");
  late final _sel_addFileWrapper_1 = _registerName1("addFileWrapper:");
  late final _sel_addRegularFileWithContents_preferredFilename_1 =
      _registerName1("addRegularFileWithContents:preferredFilename:");
  late final _sel_removeFileWrapper_1 = _registerName1("removeFileWrapper:");
  late final _sel_fileWrappers1 = _registerName1("fileWrappers");
  late final _sel_keyForFileWrapper_1 = _registerName1("keyForFileWrapper:");
  late final _sel_regularFileContents1 = _registerName1("regularFileContents");
  late final _sel_symbolicLinkDestinationURL1 =
      _registerName1("symbolicLinkDestinationURL");
  late final _sel_initSymbolicLinkWithDestination_1 =
      _registerName1("initSymbolicLinkWithDestination:");
  late final _sel_needsToBeUpdatedFromPath_1 =
      _registerName1("needsToBeUpdatedFromPath:");
  late final _sel_updateFromPath_1 = _registerName1("updateFromPath:");
  late final _sel_writeToFile_atomically_updateFilenames_1 =
      _registerName1("writeToFile:atomically:updateFilenames:");
  bool _objc_msgSend_401(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> path,
    bool atomicFlag,
    bool updateFilenamesFlag,
  ) {
    return __objc_msgSend_401(
      obj,
      sel,
      path,
      atomicFlag,
      updateFilenamesFlag,
    );
  }

  late final __objc_msgSend_401Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Bool, ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_401 = __objc_msgSend_401Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, bool, bool)>();

  late final _sel_addFileWithPath_1 = _registerName1("addFileWithPath:");
  late final _sel_addSymbolicLinkWithDestination_preferredFilename_1 =
      _registerName1("addSymbolicLinkWithDestination:preferredFilename:");
  late final _sel_symbolicLinkDestination1 =
      _registerName1("symbolicLinkDestination");
  late final _class_NSURLSession1 = _getClass1("NSURLSession");
  late final _sel_sharedSession1 = _registerName1("sharedSession");
  late final _sel_sessionWithConfiguration_1 =
      _registerName1("sessionWithConfiguration:");
  late final _sel_sessionWithConfiguration_delegate_delegateQueue_1 =
      _registerName1("sessionWithConfiguration:delegate:delegateQueue:");
  late final _sel_delegateQueue1 = _registerName1("delegateQueue");
  late final _sel_configuration1 = _registerName1("configuration");
  late final _sel_sessionDescription1 = _registerName1("sessionDescription");
  late final _sel_setSessionDescription_1 =
      _registerName1("setSessionDescription:");
  late final _sel_finishTasksAndInvalidate1 =
      _registerName1("finishTasksAndInvalidate");
  late final _sel_invalidateAndCancel1 = _registerName1("invalidateAndCancel");
  late final _sel_resetWithCompletionHandler_1 =
      _registerName1("resetWithCompletionHandler:");
  late final _sel_flushWithCompletionHandler_1 =
      _registerName1("flushWithCompletionHandler:");
  late final _sel_getTasksWithCompletionHandler_1 =
      _registerName1("getTasksWithCompletionHandler:");
  void _objc_msgSend_402(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> completionHandler,
  ) {
    return __objc_msgSend_402(
      obj,
      sel,
      completionHandler,
    );
  }

  late final __objc_msgSend_402Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_402 = __objc_msgSend_402Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_getAllTasksWithCompletionHandler_1 =
      _registerName1("getAllTasksWithCompletionHandler:");
  void _objc_msgSend_403(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> completionHandler,
  ) {
    return __objc_msgSend_403(
      obj,
      sel,
      completionHandler,
    );
  }

  late final __objc_msgSend_403Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_403 = __objc_msgSend_403Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_dataTaskWithRequest_1 =
      _registerName1("dataTaskWithRequest:");
  late final _sel_dataTaskWithURL_1 = _registerName1("dataTaskWithURL:");
  late final _sel_uploadTaskWithRequest_fromFile_1 =
      _registerName1("uploadTaskWithRequest:fromFile:");
  late final _sel_uploadTaskWithRequest_fromData_1 =
      _registerName1("uploadTaskWithRequest:fromData:");
  late final _sel_uploadTaskWithStreamedRequest_1 =
      _registerName1("uploadTaskWithStreamedRequest:");
  late final _sel_downloadTaskWithRequest_1 =
      _registerName1("downloadTaskWithRequest:");
  late final _sel_downloadTaskWithURL_1 =
      _registerName1("downloadTaskWithURL:");
  late final _sel_downloadTaskWithResumeData_1 =
      _registerName1("downloadTaskWithResumeData:");
  late final _sel_streamTaskWithHostName_port_1 =
      _registerName1("streamTaskWithHostName:port:");
  ffi.Pointer<ObjCObject> _objc_msgSend_404(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> hostname,
    int port,
  ) {
    return __objc_msgSend_404(
      obj,
      sel,
      hostname,
      port,
    );
  }

  late final __objc_msgSend_404Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              NSInteger)>>('objc_msgSend');
  late final __objc_msgSend_404 = __objc_msgSend_404Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>, int)>();

  late final _sel_streamTaskWithNetService_1 =
      _registerName1("streamTaskWithNetService:");
  late final _sel_webSocketTaskWithURL_1 =
      _registerName1("webSocketTaskWithURL:");
  late final _sel_webSocketTaskWithURL_protocols_1 =
      _registerName1("webSocketTaskWithURL:protocols:");
  late final _sel_webSocketTaskWithRequest_1 =
      _registerName1("webSocketTaskWithRequest:");
  late final _sel_dataTaskWithRequest_completionHandler_1 =
      _registerName1("dataTaskWithRequest:completionHandler:");
  ffi.Pointer<ObjCObject> _objc_msgSend_405(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> request,
    ffi.Pointer<_ObjCBlock> completionHandler,
  ) {
    return __objc_msgSend_405(
      obj,
      sel,
      request,
      completionHandler,
    );
  }

  late final __objc_msgSend_405Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_405 = __objc_msgSend_405Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_dataTaskWithURL_completionHandler_1 =
      _registerName1("dataTaskWithURL:completionHandler:");
  late final _sel_uploadTaskWithRequest_fromFile_completionHandler_1 =
      _registerName1("uploadTaskWithRequest:fromFile:completionHandler:");
  ffi.Pointer<ObjCObject> _objc_msgSend_406(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> request,
    ffi.Pointer<ObjCObject> fileURL,
    ffi.Pointer<_ObjCBlock> completionHandler,
  ) {
    return __objc_msgSend_406(
      obj,
      sel,
      request,
      fileURL,
      completionHandler,
    );
  }

  late final __objc_msgSend_406Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_406 = __objc_msgSend_406Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_uploadTaskWithRequest_fromData_completionHandler_1 =
      _registerName1("uploadTaskWithRequest:fromData:completionHandler:");
  late final _sel_downloadTaskWithRequest_completionHandler_1 =
      _registerName1("downloadTaskWithRequest:completionHandler:");
  late final _sel_downloadTaskWithURL_completionHandler_1 =
      _registerName1("downloadTaskWithURL:completionHandler:");
  late final _sel_downloadTaskWithResumeData_completionHandler_1 =
      _registerName1("downloadTaskWithResumeData:completionHandler:");
  late final _class_NSURLSessionConfiguration1 =
      _getClass1("NSURLSessionConfiguration");
  late final _sel_defaultSessionConfiguration1 =
      _registerName1("defaultSessionConfiguration");
  late final _sel_ephemeralSessionConfiguration1 =
      _registerName1("ephemeralSessionConfiguration");
  late final _sel_backgroundSessionConfigurationWithIdentifier_1 =
      _registerName1("backgroundSessionConfigurationWithIdentifier:");
  late final _sel_identifier1 = _registerName1("identifier");
  late final _sel_requestCachePolicy1 = _registerName1("requestCachePolicy");
  late final _sel_setRequestCachePolicy_1 =
      _registerName1("setRequestCachePolicy:");
  late final _sel_timeoutIntervalForRequest1 =
      _registerName1("timeoutIntervalForRequest");
  late final _sel_setTimeoutIntervalForRequest_1 =
      _registerName1("setTimeoutIntervalForRequest:");
  late final _sel_timeoutIntervalForResource1 =
      _registerName1("timeoutIntervalForResource");
  late final _sel_setTimeoutIntervalForResource_1 =
      _registerName1("setTimeoutIntervalForResource:");
  late final _sel_waitsForConnectivity1 =
      _registerName1("waitsForConnectivity");
  late final _sel_setWaitsForConnectivity_1 =
      _registerName1("setWaitsForConnectivity:");
  late final _sel_isDiscretionary1 = _registerName1("isDiscretionary");
  late final _sel_setDiscretionary_1 = _registerName1("setDiscretionary:");
  late final _sel_sharedContainerIdentifier1 =
      _registerName1("sharedContainerIdentifier");
  late final _sel_setSharedContainerIdentifier_1 =
      _registerName1("setSharedContainerIdentifier:");
  late final _sel_sessionSendsLaunchEvents1 =
      _registerName1("sessionSendsLaunchEvents");
  late final _sel_setSessionSendsLaunchEvents_1 =
      _registerName1("setSessionSendsLaunchEvents:");
  late final _sel_connectionProxyDictionary1 =
      _registerName1("connectionProxyDictionary");
  late final _sel_setConnectionProxyDictionary_1 =
      _registerName1("setConnectionProxyDictionary:");
  late final _sel_TLSMinimumSupportedProtocol1 =
      _registerName1("TLSMinimumSupportedProtocol");
  int _objc_msgSend_407(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_407(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_407Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_407 = __objc_msgSend_407Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setTLSMinimumSupportedProtocol_1 =
      _registerName1("setTLSMinimumSupportedProtocol:");
  void _objc_msgSend_408(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_408(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_408Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_408 = __objc_msgSend_408Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_TLSMaximumSupportedProtocol1 =
      _registerName1("TLSMaximumSupportedProtocol");
  late final _sel_setTLSMaximumSupportedProtocol_1 =
      _registerName1("setTLSMaximumSupportedProtocol:");
  late final _sel_TLSMinimumSupportedProtocolVersion1 =
      _registerName1("TLSMinimumSupportedProtocolVersion");
  int _objc_msgSend_409(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_409(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_409Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_409 = __objc_msgSend_409Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setTLSMinimumSupportedProtocolVersion_1 =
      _registerName1("setTLSMinimumSupportedProtocolVersion:");
  void _objc_msgSend_410(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_410(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_410Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_410 = __objc_msgSend_410Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_TLSMaximumSupportedProtocolVersion1 =
      _registerName1("TLSMaximumSupportedProtocolVersion");
  late final _sel_setTLSMaximumSupportedProtocolVersion_1 =
      _registerName1("setTLSMaximumSupportedProtocolVersion:");
  late final _sel_HTTPShouldSetCookies1 =
      _registerName1("HTTPShouldSetCookies");
  late final _sel_setHTTPShouldSetCookies_1 =
      _registerName1("setHTTPShouldSetCookies:");
  late final _sel_HTTPCookieAcceptPolicy1 =
      _registerName1("HTTPCookieAcceptPolicy");
  late final _sel_setHTTPCookieAcceptPolicy_1 =
      _registerName1("setHTTPCookieAcceptPolicy:");
  late final _sel_HTTPAdditionalHeaders1 =
      _registerName1("HTTPAdditionalHeaders");
  late final _sel_setHTTPAdditionalHeaders_1 =
      _registerName1("setHTTPAdditionalHeaders:");
  late final _sel_HTTPMaximumConnectionsPerHost1 =
      _registerName1("HTTPMaximumConnectionsPerHost");
  late final _sel_setHTTPMaximumConnectionsPerHost_1 =
      _registerName1("setHTTPMaximumConnectionsPerHost:");
  late final _sel_HTTPCookieStorage1 = _registerName1("HTTPCookieStorage");
  late final _sel_setHTTPCookieStorage_1 =
      _registerName1("setHTTPCookieStorage:");
  late final _sel_URLCredentialStorage1 =
      _registerName1("URLCredentialStorage");
  late final _sel_setURLCredentialStorage_1 =
      _registerName1("setURLCredentialStorage:");
  late final _sel_URLCache1 = _registerName1("URLCache");
  late final _sel_setURLCache_1 = _registerName1("setURLCache:");
  late final _sel_shouldUseExtendedBackgroundIdleMode1 =
      _registerName1("shouldUseExtendedBackgroundIdleMode");
  late final _sel_setShouldUseExtendedBackgroundIdleMode_1 =
      _registerName1("setShouldUseExtendedBackgroundIdleMode:");
  late final _sel_protocolClasses1 = _registerName1("protocolClasses");
  late final _sel_setProtocolClasses_1 = _registerName1("setProtocolClasses:");
  late final _sel_multipathServiceType1 =
      _registerName1("multipathServiceType");
  int _objc_msgSend_411(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_411(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_411Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_411 = __objc_msgSend_411Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_setMultipathServiceType_1 =
      _registerName1("setMultipathServiceType:");
  void _objc_msgSend_412(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_412(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_412Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_412 = __objc_msgSend_412Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_backgroundSessionConfiguration_1 =
      _registerName1("backgroundSessionConfiguration:");
  late final _class_NSProtocolChecker1 = _getClass1("NSProtocolChecker");
  late final _class_NSProxy1 = _getClass1("NSProxy");
  late final _sel_respondsToSelector_1 = _registerName1("respondsToSelector:");
  late final _sel_target1 = _registerName1("target");
  late final _sel_protocolCheckerWithTarget_protocol_1 =
      _registerName1("protocolCheckerWithTarget:protocol:");
  late final _sel_initWithTarget_protocol_1 =
      _registerName1("initWithTarget:protocol:");
  late final _class_NSTask1 = _getClass1("NSTask");
  late final _sel_setExecutableURL_1 = _registerName1("setExecutableURL:");
  late final _sel_setArguments_1 = _registerName1("setArguments:");
  late final _sel_setEnvironment_1 = _registerName1("setEnvironment:");
  late final _sel_currentDirectoryURL1 = _registerName1("currentDirectoryURL");
  late final _sel_setCurrentDirectoryURL_1 =
      _registerName1("setCurrentDirectoryURL:");
  late final _sel_standardInput1 = _registerName1("standardInput");
  late final _sel_setStandardInput_1 = _registerName1("setStandardInput:");
  late final _sel_standardOutput1 = _registerName1("standardOutput");
  late final _sel_setStandardOutput_1 = _registerName1("setStandardOutput:");
  late final _sel_standardError1 = _registerName1("standardError");
  late final _sel_setStandardError_1 = _registerName1("setStandardError:");
  late final _sel_launchAndReturnError_1 =
      _registerName1("launchAndReturnError:");
  late final _sel_interrupt1 = _registerName1("interrupt");
  late final _sel_terminate1 = _registerName1("terminate");
  late final _sel_suspend1 = _registerName1("suspend");
  late final _sel_resume1 = _registerName1("resume");
  late final _sel_isRunning1 = _registerName1("isRunning");
  late final _sel_terminationStatus1 = _registerName1("terminationStatus");
  late final _sel_terminationReason1 = _registerName1("terminationReason");
  int _objc_msgSend_413(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_413(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_413Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_413 = __objc_msgSend_413Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_terminationHandler1 = _registerName1("terminationHandler");
  late final _sel_setTerminationHandler_1 =
      _registerName1("setTerminationHandler:");
  late final _sel_launchedTaskWithExecutableURL_arguments_error_terminationHandler_1 =
      _registerName1(
          "launchedTaskWithExecutableURL:arguments:error:terminationHandler:");
  ffi.Pointer<ObjCObject> _objc_msgSend_414(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
    ffi.Pointer<ObjCObject> arguments,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
    ffi.Pointer<_ObjCBlock> terminationHandler,
  ) {
    return __objc_msgSend_414(
      obj,
      sel,
      url,
      arguments,
      error,
      terminationHandler,
    );
  }

  late final __objc_msgSend_414Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_414 = __objc_msgSend_414Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_waitUntilExit1 = _registerName1("waitUntilExit");
  late final _sel_launchPath1 = _registerName1("launchPath");
  late final _sel_setLaunchPath_1 = _registerName1("setLaunchPath:");
  late final _sel_setCurrentDirectoryPath_1 =
      _registerName1("setCurrentDirectoryPath:");
  late final _sel_launch1 = _registerName1("launch");
  late final _sel_launchedTaskWithLaunchPath_arguments_1 =
      _registerName1("launchedTaskWithLaunchPath:arguments:");
  late final _class_NSXMLElement1 = _getClass1("NSXMLElement");
  late final _class_NSXMLNode1 = _getClass1("NSXMLNode");
  late final _sel_initWithKind_1 = _registerName1("initWithKind:");
  instancetype _objc_msgSend_415(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int kind,
  ) {
    return __objc_msgSend_415(
      obj,
      sel,
      kind,
    );
  }

  late final __objc_msgSend_415Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_415 = __objc_msgSend_415Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_initWithKind_options_1 =
      _registerName1("initWithKind:options:");
  instancetype _objc_msgSend_416(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int kind,
    int options,
  ) {
    return __objc_msgSend_416(
      obj,
      sel,
      kind,
      options,
    );
  }

  late final __objc_msgSend_416Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32, ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_416 = __objc_msgSend_416Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int, int)>();

  late final _sel_document1 = _registerName1("document");
  late final _sel_documentWithRootElement_1 =
      _registerName1("documentWithRootElement:");
  late final _sel_elementWithName_1 = _registerName1("elementWithName:");
  late final _sel_elementWithName_URI_1 =
      _registerName1("elementWithName:URI:");
  late final _sel_elementWithName_stringValue_1 =
      _registerName1("elementWithName:stringValue:");
  late final _sel_elementWithName_children_attributes_1 =
      _registerName1("elementWithName:children:attributes:");
  late final _sel_attributeWithName_stringValue_1 =
      _registerName1("attributeWithName:stringValue:");
  late final _sel_attributeWithName_URI_stringValue_1 =
      _registerName1("attributeWithName:URI:stringValue:");
  late final _sel_namespaceWithName_stringValue_1 =
      _registerName1("namespaceWithName:stringValue:");
  late final _sel_processingInstructionWithName_stringValue_1 =
      _registerName1("processingInstructionWithName:stringValue:");
  late final _sel_commentWithStringValue_1 =
      _registerName1("commentWithStringValue:");
  late final _sel_textWithStringValue_1 =
      _registerName1("textWithStringValue:");
  late final _sel_DTDNodeWithXMLString_1 =
      _registerName1("DTDNodeWithXMLString:");
  late final _sel_kind1 = _registerName1("kind");
  int _objc_msgSend_417(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_417(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_417Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_417 = __objc_msgSend_417Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_objectValue1 = _registerName1("objectValue");
  late final _sel_setObjectValue_1 = _registerName1("setObjectValue:");
  late final _sel_setStringValue_1 = _registerName1("setStringValue:");
  late final _sel_setStringValue_resolvingEntities_1 =
      _registerName1("setStringValue:resolvingEntities:");
  late final _sel_index1 = _registerName1("index");
  late final _sel_level1 = _registerName1("level");
  late final _sel_rootDocument1 = _registerName1("rootDocument");
  late final _sel_parent1 = _registerName1("parent");
  late final _sel_childCount1 = _registerName1("childCount");
  late final _sel_children1 = _registerName1("children");
  late final _sel_childAtIndex_1 = _registerName1("childAtIndex:");
  late final _sel_previousSibling1 = _registerName1("previousSibling");
  late final _sel_nextSibling1 = _registerName1("nextSibling");
  late final _sel_previousNode1 = _registerName1("previousNode");
  late final _sel_nextNode1 = _registerName1("nextNode");
  late final _sel_detach1 = _registerName1("detach");
  late final _sel_XPath1 = _registerName1("XPath");
  late final _sel_localName1 = _registerName1("localName");
  late final _sel_prefix1 = _registerName1("prefix");
  late final _sel_URI1 = _registerName1("URI");
  late final _sel_setURI_1 = _registerName1("setURI:");
  late final _sel_localNameForName_1 = _registerName1("localNameForName:");
  late final _sel_prefixForName_1 = _registerName1("prefixForName:");
  late final _sel_predefinedNamespaceForPrefix_1 =
      _registerName1("predefinedNamespaceForPrefix:");
  late final _sel_XMLString1 = _registerName1("XMLString");
  late final _sel_XMLStringWithOptions_1 =
      _registerName1("XMLStringWithOptions:");
  ffi.Pointer<ObjCObject> _objc_msgSend_418(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int options,
  ) {
    return __objc_msgSend_418(
      obj,
      sel,
      options,
    );
  }

  late final __objc_msgSend_418Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_418 = __objc_msgSend_418Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_canonicalXMLStringPreservingComments_1 =
      _registerName1("canonicalXMLStringPreservingComments:");
  late final _sel_nodesForXPath_error_1 =
      _registerName1("nodesForXPath:error:");
  late final _sel_objectsForXQuery_constants_error_1 =
      _registerName1("objectsForXQuery:constants:error:");
  late final _sel_objectsForXQuery_error_1 =
      _registerName1("objectsForXQuery:error:");
  late final _sel_initWithName_URI_1 = _registerName1("initWithName:URI:");
  late final _sel_initWithName_stringValue_1 =
      _registerName1("initWithName:stringValue:");
  late final _sel_initWithXMLString_error_1 =
      _registerName1("initWithXMLString:error:");
  late final _sel_elementsForName_1 = _registerName1("elementsForName:");
  late final _sel_elementsForLocalName_URI_1 =
      _registerName1("elementsForLocalName:URI:");
  late final _sel_addAttribute_1 = _registerName1("addAttribute:");
  late final _sel_removeAttributeForName_1 =
      _registerName1("removeAttributeForName:");
  late final _sel_attributes1 = _registerName1("attributes");
  late final _sel_setAttributes_1 = _registerName1("setAttributes:");
  late final _sel_setAttributesWithDictionary_1 =
      _registerName1("setAttributesWithDictionary:");
  late final _sel_attributeForName_1 = _registerName1("attributeForName:");
  late final _sel_attributeForLocalName_URI_1 =
      _registerName1("attributeForLocalName:URI:");
  late final _sel_addNamespace_1 = _registerName1("addNamespace:");
  late final _sel_removeNamespaceForPrefix_1 =
      _registerName1("removeNamespaceForPrefix:");
  late final _sel_namespaces1 = _registerName1("namespaces");
  late final _sel_setNamespaces_1 = _registerName1("setNamespaces:");
  late final _sel_namespaceForPrefix_1 = _registerName1("namespaceForPrefix:");
  late final _sel_resolveNamespaceForName_1 =
      _registerName1("resolveNamespaceForName:");
  late final _sel_resolvePrefixForNamespaceURI_1 =
      _registerName1("resolvePrefixForNamespaceURI:");
  late final _sel_insertChild_atIndex_1 =
      _registerName1("insertChild:atIndex:");
  late final _sel_insertChildren_atIndex_1 =
      _registerName1("insertChildren:atIndex:");
  late final _sel_removeChildAtIndex_1 = _registerName1("removeChildAtIndex:");
  late final _sel_setChildren_1 = _registerName1("setChildren:");
  late final _sel_addChild_1 = _registerName1("addChild:");
  late final _sel_replaceChildAtIndex_withNode_1 =
      _registerName1("replaceChildAtIndex:withNode:");
  late final _sel_normalizeAdjacentTextNodesPreservingCDATA_1 =
      _registerName1("normalizeAdjacentTextNodesPreservingCDATA:");
  void _objc_msgSend_419(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    bool preserve,
  ) {
    return __objc_msgSend_419(
      obj,
      sel,
      preserve,
    );
  }

  late final __objc_msgSend_419Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Bool)>>('objc_msgSend');
  late final __objc_msgSend_419 = __objc_msgSend_419Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, bool)>();

  late final _sel_setAttributesAsDictionary_1 =
      _registerName1("setAttributesAsDictionary:");
  late final _class_NSScriptClassDescription1 =
      _getClass1("NSScriptClassDescription");
  late final _class_NSClassDescription1 = _getClass1("NSClassDescription");
  late final _sel_registerClassDescription_forClass_1 =
      _registerName1("registerClassDescription:forClass:");
  late final _sel_invalidateClassDescriptionCache1 =
      _registerName1("invalidateClassDescriptionCache");
  late final _sel_classDescriptionForClass_1 =
      _registerName1("classDescriptionForClass:");
  late final _sel_initWithSuiteName_className_dictionary_1 =
      _registerName1("initWithSuiteName:className:dictionary:");
  late final _sel_suiteName1 = _registerName1("suiteName");
  late final _sel_implementationClassName1 =
      _registerName1("implementationClassName");
  late final _sel_superclassDescription1 =
      _registerName1("superclassDescription");
  late final _sel_appleEventCode1 = _registerName1("appleEventCode");
  late final _sel_matchesAppleEventCode_1 =
      _registerName1("matchesAppleEventCode:");
  late final _sel_supportsCommand_1 = _registerName1("supportsCommand:");
  late final _sel_selectorForCommand_1 = _registerName1("selectorForCommand:");
  ffi.Pointer<ObjCSel> _objc_msgSend_420(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> commandDescription,
  ) {
    return __objc_msgSend_420(
      obj,
      sel,
      commandDescription,
    );
  }

  late final __objc_msgSend_420Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCSel> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_420 = __objc_msgSend_420Ptr.asFunction<
      ffi.Pointer<ObjCSel> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final _sel_typeForKey_1 = _registerName1("typeForKey:");
  late final _sel_classDescriptionForKey_1 =
      _registerName1("classDescriptionForKey:");
  late final _sel_appleEventCodeForKey_1 =
      _registerName1("appleEventCodeForKey:");
  int _objc_msgSend_421(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> key,
  ) {
    return __objc_msgSend_421(
      obj,
      sel,
      key,
    );
  }

  late final __objc_msgSend_421Ptr = _lookup<
      ffi.NativeFunction<
          FourCharCode Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_421 = __objc_msgSend_421Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final _sel_keyWithAppleEventCode_1 =
      _registerName1("keyWithAppleEventCode:");
  late final _sel_defaultSubcontainerAttributeKey1 =
      _registerName1("defaultSubcontainerAttributeKey");
  late final _sel_isLocationRequiredToCreateForKey_1 =
      _registerName1("isLocationRequiredToCreateForKey:");
  late final _sel_hasPropertyForKey_1 = _registerName1("hasPropertyForKey:");
  late final _sel_hasOrderedToManyRelationshipForKey_1 =
      _registerName1("hasOrderedToManyRelationshipForKey:");
  late final _sel_hasReadablePropertyForKey_1 =
      _registerName1("hasReadablePropertyForKey:");
  late final _sel_hasWritablePropertyForKey_1 =
      _registerName1("hasWritablePropertyForKey:");
  late final _sel_isReadOnlyKey_1 = _registerName1("isReadOnlyKey:");
  late final _class_AVAudioSession1 = _getClass1("AVAudioSession");
  late final _sel_sharedInstance1 = _registerName1("sharedInstance");
  late final _sel_availableCategories1 = _registerName1("availableCategories");
  late final _sel_setCategory_error_1 = _registerName1("setCategory:error:");
  late final _sel_setCategory_withOptions_error_1 =
      _registerName1("setCategory:withOptions:error:");
  bool _objc_msgSend_422(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    AVAudioSessionCategory category,
    int options,
    ffi.Pointer<ffi.Pointer<ObjCObject>> outError,
  ) {
    return __objc_msgSend_422(
      obj,
      sel,
      category,
      options,
      outError,
    );
  }

  late final __objc_msgSend_422Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              AVAudioSessionCategory,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_422 = __objc_msgSend_422Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          AVAudioSessionCategory, int, ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_setCategory_mode_options_error_1 =
      _registerName1("setCategory:mode:options:error:");
  bool _objc_msgSend_423(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    AVAudioSessionCategory category,
    AVAudioSessionMode mode,
    int options,
    ffi.Pointer<ffi.Pointer<ObjCObject>> outError,
  ) {
    return __objc_msgSend_423(
      obj,
      sel,
      category,
      mode,
      options,
      outError,
    );
  }

  late final __objc_msgSend_423Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              AVAudioSessionCategory,
              AVAudioSessionMode,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_423 = __objc_msgSend_423Ptr.asFunction<
      bool Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          AVAudioSessionCategory,
          AVAudioSessionMode,
          int,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_setCategory_mode_routeSharingPolicy_options_error_1 =
      _registerName1("setCategory:mode:routeSharingPolicy:options:error:");
  bool _objc_msgSend_424(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    AVAudioSessionCategory category,
    AVAudioSessionMode mode,
    int policy,
    int options,
    ffi.Pointer<ffi.Pointer<ObjCObject>> outError,
  ) {
    return __objc_msgSend_424(
      obj,
      sel,
      category,
      mode,
      policy,
      options,
      outError,
    );
  }

  late final __objc_msgSend_424Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              AVAudioSessionCategory,
              AVAudioSessionMode,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_424 = __objc_msgSend_424Ptr.asFunction<
      bool Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          AVAudioSessionCategory,
          AVAudioSessionMode,
          int,
          int,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_category1 = _registerName1("category");
  late final _sel_categoryOptions1 = _registerName1("categoryOptions");
  int _objc_msgSend_425(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_425(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_425Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_425 = __objc_msgSend_425Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_routeSharingPolicy1 = _registerName1("routeSharingPolicy");
  int _objc_msgSend_426(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_426(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_426Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_426 = __objc_msgSend_426Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_availableModes1 = _registerName1("availableModes");
  late final _sel_setMode_error_1 = _registerName1("setMode:error:");
  late final _sel_mode1 = _registerName1("mode");
  late final _sel_setAllowHapticsAndSystemSoundsDuringRecording_error_1 =
      _registerName1("setAllowHapticsAndSystemSoundsDuringRecording:error:");
  bool _objc_msgSend_427(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    bool inValue,
    ffi.Pointer<ffi.Pointer<ObjCObject>> outError,
  ) {
    return __objc_msgSend_427(
      obj,
      sel,
      inValue,
      outError,
    );
  }

  late final __objc_msgSend_427Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Bool, ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_427 = __objc_msgSend_427Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, bool,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_allowHapticsAndSystemSoundsDuringRecording1 =
      _registerName1("allowHapticsAndSystemSoundsDuringRecording");
  late final _sel_recordPermission1 = _registerName1("recordPermission");
  int _objc_msgSend_428(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_428(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_428Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_428 = __objc_msgSend_428Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_requestRecordPermission_1 =
      _registerName1("requestRecordPermission:");
  void _objc_msgSend_429(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> response,
  ) {
    return __objc_msgSend_429(
      obj,
      sel,
      response,
    );
  }

  late final __objc_msgSend_429Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_429 = __objc_msgSend_429Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_overrideOutputAudioPort_error_1 =
      _registerName1("overrideOutputAudioPort:error:");
  bool _objc_msgSend_430(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int portOverride,
    ffi.Pointer<ffi.Pointer<ObjCObject>> outError,
  ) {
    return __objc_msgSend_430(
      obj,
      sel,
      portOverride,
      outError,
    );
  }

  late final __objc_msgSend_430Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_430 = __objc_msgSend_430Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_setPreferredInput_error_1 =
      _registerName1("setPreferredInput:error:");
  late final _sel_preferredInput1 = _registerName1("preferredInput");
  late final _sel_setPrefersNoInterruptionsFromSystemAlerts_error_1 =
      _registerName1("setPrefersNoInterruptionsFromSystemAlerts:error:");
  late final _sel_prefersNoInterruptionsFromSystemAlerts1 =
      _registerName1("prefersNoInterruptionsFromSystemAlerts");
  late final _sel_setActive_error_1 = _registerName1("setActive:error:");
  late final _sel_setActive_withOptions_error_1 =
      _registerName1("setActive:withOptions:error:");
  bool _objc_msgSend_431(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    bool active,
    int options,
    ffi.Pointer<ffi.Pointer<ObjCObject>> outError,
  ) {
    return __objc_msgSend_431(
      obj,
      sel,
      active,
      options,
      outError,
    );
  }

  late final __objc_msgSend_431Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Bool,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_431 = __objc_msgSend_431Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, bool, int,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_activateWithOptions_completionHandler_1 =
      _registerName1("activateWithOptions:completionHandler:");
  void _objc_msgSend_432(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int options,
    ffi.Pointer<_ObjCBlock> handler,
  ) {
    return __objc_msgSend_432(
      obj,
      sel,
      options,
      handler,
    );
  }

  late final __objc_msgSend_432Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_432 = __objc_msgSend_432Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<_ObjCBlock>)>();

  late final _sel_setPreferredSampleRate_error_1 =
      _registerName1("setPreferredSampleRate:error:");
  bool _objc_msgSend_433(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    double sampleRate,
    ffi.Pointer<ffi.Pointer<ObjCObject>> outError,
  ) {
    return __objc_msgSend_433(
      obj,
      sel,
      sampleRate,
      outError,
    );
  }

  late final __objc_msgSend_433Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Double,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_433 = __objc_msgSend_433Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, double,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_preferredSampleRate1 = _registerName1("preferredSampleRate");
  late final _sel_setPreferredIOBufferDuration_error_1 =
      _registerName1("setPreferredIOBufferDuration:error:");
  late final _sel_preferredIOBufferDuration1 =
      _registerName1("preferredIOBufferDuration");
  late final _sel_setPreferredInputNumberOfChannels_error_1 =
      _registerName1("setPreferredInputNumberOfChannels:error:");
  bool _objc_msgSend_434(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int count,
    ffi.Pointer<ffi.Pointer<ObjCObject>> outError,
  ) {
    return __objc_msgSend_434(
      obj,
      sel,
      count,
      outError,
    );
  }

  late final __objc_msgSend_434Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              NSInteger,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_434 = __objc_msgSend_434Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_preferredInputNumberOfChannels1 =
      _registerName1("preferredInputNumberOfChannels");
  late final _sel_setPreferredOutputNumberOfChannels_error_1 =
      _registerName1("setPreferredOutputNumberOfChannels:error:");
  late final _sel_preferredOutputNumberOfChannels1 =
      _registerName1("preferredOutputNumberOfChannels");
  late final _sel_setPreferredInputOrientation_error_1 =
      _registerName1("setPreferredInputOrientation:error:");
  bool _objc_msgSend_435(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int orientation,
    ffi.Pointer<ffi.Pointer<ObjCObject>> outError,
  ) {
    return __objc_msgSend_435(
      obj,
      sel,
      orientation,
      outError,
    );
  }

  late final __objc_msgSend_435Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_435 = __objc_msgSend_435Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_preferredInputOrientation1 =
      _registerName1("preferredInputOrientation");
  int _objc_msgSend_436(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_436(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_436Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_436 = __objc_msgSend_436Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_inputOrientation1 = _registerName1("inputOrientation");
  late final _sel_maximumInputNumberOfChannels1 =
      _registerName1("maximumInputNumberOfChannels");
  late final _sel_maximumOutputNumberOfChannels1 =
      _registerName1("maximumOutputNumberOfChannels");
  late final _sel_setInputGain_error_1 = _registerName1("setInputGain:error:");
  bool _objc_msgSend_437(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    double gain,
    ffi.Pointer<ffi.Pointer<ObjCObject>> outError,
  ) {
    return __objc_msgSend_437(
      obj,
      sel,
      gain,
      outError,
    );
  }

  late final __objc_msgSend_437Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Float,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_437 = __objc_msgSend_437Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, double,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_inputGain1 = _registerName1("inputGain");
  late final _sel_isInputGainSettable1 = _registerName1("isInputGainSettable");
  late final _sel_isInputAvailable1 = _registerName1("isInputAvailable");
  late final _sel_inputDataSources1 = _registerName1("inputDataSources");
  late final _sel_inputDataSource1 = _registerName1("inputDataSource");
  late final _sel_setInputDataSource_error_1 =
      _registerName1("setInputDataSource:error:");
  late final _sel_outputDataSources1 = _registerName1("outputDataSources");
  late final _sel_outputDataSource1 = _registerName1("outputDataSource");
  late final _sel_setOutputDataSource_error_1 =
      _registerName1("setOutputDataSource:error:");
  late final _sel_sampleRate1 = _registerName1("sampleRate");
  late final _sel_inputNumberOfChannels1 =
      _registerName1("inputNumberOfChannels");
  late final _sel_outputNumberOfChannels1 =
      _registerName1("outputNumberOfChannels");
  late final _sel_inputLatency1 = _registerName1("inputLatency");
  late final _sel_outputLatency1 = _registerName1("outputLatency");
  late final _sel_IOBufferDuration1 = _registerName1("IOBufferDuration");
  late final _sel_isOtherAudioPlaying1 = _registerName1("isOtherAudioPlaying");
  late final _sel_secondaryAudioShouldBeSilencedHint1 =
      _registerName1("secondaryAudioShouldBeSilencedHint");
  late final _sel_outputVolume1 = _registerName1("outputVolume");
  late final _sel_promptStyle1 = _registerName1("promptStyle");
  int _objc_msgSend_438(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_438(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_438Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_438 = __objc_msgSend_438Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final _sel_availableInputs1 = _registerName1("availableInputs");
  late final _sel_currentRoute1 = _registerName1("currentRoute");
  late final _sel_setAggregatedIOPreference_error_1 =
      _registerName1("setAggregatedIOPreference:error:");
  bool _objc_msgSend_439(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int inIOType,
    ffi.Pointer<ffi.Pointer<ObjCObject>> outError,
  ) {
    return __objc_msgSend_439(
      obj,
      sel,
      inIOType,
      outError,
    );
  }

  late final __objc_msgSend_439Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_439 = __objc_msgSend_439Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_setSupportsMultichannelContent_error_1 =
      _registerName1("setSupportsMultichannelContent:error:");
  late final _sel_supportsMultichannelContent1 =
      _registerName1("supportsMultichannelContent");
  late final _sel_setActive_withFlags_error_1 =
      _registerName1("setActive:withFlags:error:");
  bool _objc_msgSend_440(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    bool active,
    int flags,
    ffi.Pointer<ffi.Pointer<ObjCObject>> outError,
  ) {
    return __objc_msgSend_440(
      obj,
      sel,
      active,
      flags,
      outError,
    );
  }

  late final __objc_msgSend_440Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Bool,
              NSInteger,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_440 = __objc_msgSend_440Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, bool, int,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final _sel_inputIsAvailable1 = _registerName1("inputIsAvailable");
  late final _sel_currentHardwareSampleRate1 =
      _registerName1("currentHardwareSampleRate");
  late final _sel_currentHardwareInputNumberOfChannels1 =
      _registerName1("currentHardwareInputNumberOfChannels");
  late final _sel_currentHardwareOutputNumberOfChannels1 =
      _registerName1("currentHardwareOutputNumberOfChannels");
  late final _sel_setPreferredHardwareSampleRate_error_1 =
      _registerName1("setPreferredHardwareSampleRate:error:");
  late final _sel_preferredHardwareSampleRate1 =
      _registerName1("preferredHardwareSampleRate");
  late final _class_AVAudioPlayer1 = _getClass1("AVAudioPlayer");
  late final _sel_initWithData_error_1 = _registerName1("initWithData:error:");
  late final _sel_initWithContentsOfURL_fileTypeHint_error_1 =
      _registerName1("initWithContentsOfURL:fileTypeHint:error:");
  late final _sel_initWithData_fileTypeHint_error_1 =
      _registerName1("initWithData:fileTypeHint:error:");
  late final _sel_prepareToPlay1 = _registerName1("prepareToPlay");
  late final _sel_play1 = _registerName1("play");
  late final _sel_playAtTime_1 = _registerName1("playAtTime:");
  bool _objc_msgSend_441(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    double time,
  ) {
    return __objc_msgSend_441(
      obj,
      sel,
      time,
    );
  }

  late final __objc_msgSend_441Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSTimeInterval)>>('objc_msgSend');
  late final __objc_msgSend_441 = __objc_msgSend_441Ptr.asFunction<
      bool Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, double)>();

  late final _sel_pause1 = _registerName1("pause");
  late final _sel_stop1 = _registerName1("stop");
  late final _sel_isPlaying1 = _registerName1("isPlaying");
  late final _sel_numberOfChannels1 = _registerName1("numberOfChannels");
  late final _sel_currentDevice1 = _registerName1("currentDevice");
  late final _sel_setCurrentDevice_1 = _registerName1("setCurrentDevice:");
  late final _sel_url1 = _registerName1("url");
  late final _sel_pan1 = _registerName1("pan");
  late final _sel_setPan_1 = _registerName1("setPan:");
  void _objc_msgSend_442(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    double value,
  ) {
    return __objc_msgSend_442(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_442Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Float)>>('objc_msgSend');
  late final __objc_msgSend_442 = __objc_msgSend_442Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, double)>();

  late final _sel_volume1 = _registerName1("volume");
  late final _sel_setVolume_1 = _registerName1("setVolume:");
  late final _sel_setVolume_fadeDuration_1 =
      _registerName1("setVolume:fadeDuration:");
  void _objc_msgSend_443(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    double volume,
    double duration,
  ) {
    return __objc_msgSend_443(
      obj,
      sel,
      volume,
      duration,
    );
  }

  late final __objc_msgSend_443Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Float, NSTimeInterval)>>('objc_msgSend');
  late final __objc_msgSend_443 = __objc_msgSend_443Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, double, double)>();

  late final _sel_enableRate1 = _registerName1("enableRate");
  late final _sel_setEnableRate_1 = _registerName1("setEnableRate:");
  late final _sel_rate1 = _registerName1("rate");
  late final _sel_setRate_1 = _registerName1("setRate:");
  late final _sel_currentTime1 = _registerName1("currentTime");
  late final _sel_setCurrentTime_1 = _registerName1("setCurrentTime:");
  late final _sel_deviceCurrentTime1 = _registerName1("deviceCurrentTime");
  late final _sel_numberOfLoops1 = _registerName1("numberOfLoops");
  late final _sel_setNumberOfLoops_1 = _registerName1("setNumberOfLoops:");
  late final _sel_settings1 = _registerName1("settings");
  late final _sel_isMeteringEnabled1 = _registerName1("isMeteringEnabled");
  late final _sel_setMeteringEnabled_1 = _registerName1("setMeteringEnabled:");
  late final _sel_updateMeters1 = _registerName1("updateMeters");
  late final _sel_peakPowerForChannel_1 =
      _registerName1("peakPowerForChannel:");
  double _objc_msgSend_444(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int channelNumber,
  ) {
    return __objc_msgSend_444(
      obj,
      sel,
      channelNumber,
    );
  }

  late final __objc_msgSend_444Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_444 = __objc_msgSend_444Ptr.asFunction<
      double Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final _sel_averagePowerForChannel_1 =
      _registerName1("averagePowerForChannel:");
  late final _sel_channelAssignments1 = _registerName1("channelAssignments");
  late final _sel_setChannelAssignments_1 =
      _registerName1("setChannelAssignments:");
}

class _ObjCWrapper implements ffi.Finalizable {
  final ffi.Pointer<ObjCObject> _id;
  final AVFAudio _lib;
  bool _pendingRelease;

  _ObjCWrapper._(this._id, this._lib,
      {bool retain = false, bool release = false})
      : _pendingRelease = release {
    if (retain) {
      _lib._objc_retain(_id);
    }
    if (release) {
      _lib._objc_releaseFinalizer1.attach(this, _id.cast(), detach: this);
    }
  }

  /// Releases the reference to the underlying ObjC object held by this wrapper.
  /// Throws a StateError if this wrapper doesn't currently hold a reference.
  void release() {
    if (_pendingRelease) {
      _pendingRelease = false;
      _lib._objc_release(_id);
      _lib._objc_releaseFinalizer1.detach(this);
    } else {
      throw StateError(
          'Released an ObjC object that was unowned or already released.');
    }
  }

  @override
  bool operator ==(Object other) {
    return other is _ObjCWrapper && _id == other._id;
  }

  @override
  int get hashCode => _id.hashCode;
}

class NSObject extends _ObjCWrapper {
  NSObject._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSObject] that points to the same underlying object as [other].
  static NSObject castFrom<T extends _ObjCWrapper>(T other) {
    return NSObject._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSObject] that wraps the given raw object pointer.
  static NSObject castFromPointer(AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSObject._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSObject].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSObject1);
  }

  static void load(AVFAudio _lib) {
    return _lib._objc_msgSend_1(_lib._class_NSObject1, _lib._sel_load1);
  }

  static void initialize(AVFAudio _lib) {
    return _lib._objc_msgSend_1(_lib._class_NSObject1, _lib._sel_initialize1);
  }

  NSObject init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSObject1, _lib._sel_new1);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  static NSObject allocWithZone_(AVFAudio _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSObject1, _lib._sel_allocWithZone_1, zone);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  static NSObject alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSObject1, _lib._sel_alloc1);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  void dealloc() {
    return _lib._objc_msgSend_1(_id, _lib._sel_dealloc1);
  }

  void finalize() {
    return _lib._objc_msgSend_1(_id, _lib._sel_finalize1);
  }

  NSObject copy() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_copy1);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  NSObject mutableCopy() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_mutableCopy1);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  static NSObject copyWithZone_(AVFAudio _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSObject1, _lib._sel_copyWithZone_1, zone);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  static NSObject mutableCopyWithZone_(
      AVFAudio _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSObject1, _lib._sel_mutableCopyWithZone_1, zone);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  static bool instancesRespondToSelector_(
      AVFAudio _lib, ffi.Pointer<ObjCSel> aSelector) {
    return _lib._objc_msgSend_4(_lib._class_NSObject1,
        _lib._sel_instancesRespondToSelector_1, aSelector);
  }

  static bool conformsToProtocol_(AVFAudio _lib, NSObject? protocol) {
    return _lib._objc_msgSend_0(_lib._class_NSObject1,
        _lib._sel_conformsToProtocol_1, protocol?._id ?? ffi.nullptr);
  }

  IMP methodForSelector_(ffi.Pointer<ObjCSel> aSelector) {
    return _lib._objc_msgSend_5(_id, _lib._sel_methodForSelector_1, aSelector);
  }

  static IMP instanceMethodForSelector_(
      AVFAudio _lib, ffi.Pointer<ObjCSel> aSelector) {
    return _lib._objc_msgSend_5(_lib._class_NSObject1,
        _lib._sel_instanceMethodForSelector_1, aSelector);
  }

  void doesNotRecognizeSelector_(ffi.Pointer<ObjCSel> aSelector) {
    return _lib._objc_msgSend_6(
        _id, _lib._sel_doesNotRecognizeSelector_1, aSelector);
  }

  NSObject forwardingTargetForSelector_(ffi.Pointer<ObjCSel> aSelector) {
    final _ret = _lib._objc_msgSend_7(
        _id, _lib._sel_forwardingTargetForSelector_1, aSelector);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void forwardInvocation_(NSObject? anInvocation) {
    return _lib._objc_msgSend_8(
        _id, _lib._sel_forwardInvocation_1, anInvocation?._id ?? ffi.nullptr);
  }

  NSObject methodSignatureForSelector_(ffi.Pointer<ObjCSel> aSelector) {
    final _ret = _lib._objc_msgSend_7(
        _id, _lib._sel_methodSignatureForSelector_1, aSelector);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject instanceMethodSignatureForSelector_(
      AVFAudio _lib, ffi.Pointer<ObjCSel> aSelector) {
    final _ret = _lib._objc_msgSend_7(_lib._class_NSObject1,
        _lib._sel_instanceMethodSignatureForSelector_1, aSelector);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool allowsWeakReference() {
    return _lib._objc_msgSend_9(_id, _lib._sel_allowsWeakReference1);
  }

  bool retainWeakReference() {
    return _lib._objc_msgSend_9(_id, _lib._sel_retainWeakReference1);
  }

  static bool isSubclassOfClass_(AVFAudio _lib, NSObject aClass) {
    return _lib._objc_msgSend_0(
        _lib._class_NSObject1, _lib._sel_isSubclassOfClass_1, aClass._id);
  }

  static bool resolveClassMethod_(AVFAudio _lib, ffi.Pointer<ObjCSel> sel) {
    return _lib._objc_msgSend_4(
        _lib._class_NSObject1, _lib._sel_resolveClassMethod_1, sel);
  }

  static bool resolveInstanceMethod_(AVFAudio _lib, ffi.Pointer<ObjCSel> sel) {
    return _lib._objc_msgSend_4(
        _lib._class_NSObject1, _lib._sel_resolveInstanceMethod_1, sel);
  }

  static int hash(AVFAudio _lib) {
    return _lib._objc_msgSend_10(_lib._class_NSObject1, _lib._sel_hash1);
  }

  static NSObject superclass(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSObject1, _lib._sel_superclass1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject class1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSObject1, _lib._sel_class1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject description(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSObject1, _lib._sel_description1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject debugDescription(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSObject1, _lib._sel_debugDescription1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static int version(AVFAudio _lib) {
    return _lib._objc_msgSend_11(_lib._class_NSObject1, _lib._sel_version1);
  }

  static void setVersion_(AVFAudio _lib, int aVersion) {
    return _lib._objc_msgSend_12(
        _lib._class_NSObject1, _lib._sel_setVersion_1, aVersion);
  }

  NSObject get classForCoder {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_classForCoder1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject replacementObjectForCoder_(NSObject? coder) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_replacementObjectForCoder_1, coder?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject awakeAfterUsingCoder_(NSObject? coder) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_awakeAfterUsingCoder_1, coder?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  static void poseAsClass_(AVFAudio _lib, NSObject aClass) {
    return _lib._objc_msgSend_8(
        _lib._class_NSObject1, _lib._sel_poseAsClass_1, aClass._id);
  }

  NSObject get autoContentAccessingProxy {
    final _ret =
        _lib._objc_msgSend_2(_id, _lib._sel_autoContentAccessingProxy1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void
      attemptRecoveryFromError_optionIndex_delegate_didRecoverSelector_contextInfo_(
          NSObject? error,
          int recoveryOptionIndex,
          NSObject delegate,
          ffi.Pointer<ObjCSel> didRecoverSelector,
          ffi.Pointer<ffi.Void> contextInfo) {
    return _lib._objc_msgSend_14(
        _id,
        _lib._sel_attemptRecoveryFromError_optionIndex_delegate_didRecoverSelector_contextInfo_1,
        error?._id ?? ffi.nullptr,
        recoveryOptionIndex,
        delegate._id,
        didRecoverSelector,
        contextInfo);
  }

  bool attemptRecoveryFromError_optionIndex_(
      NSObject? error, int recoveryOptionIndex) {
    return _lib._objc_msgSend_15(
        _id,
        _lib._sel_attemptRecoveryFromError_optionIndex_1,
        error?._id ?? ffi.nullptr,
        recoveryOptionIndex);
  }

  void performSelector_withObject_afterDelay_inModes_(
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument,
      double delay,
      NSObject? modes) {
    return _lib._objc_msgSend_16(
        _id,
        _lib._sel_performSelector_withObject_afterDelay_inModes_1,
        aSelector,
        anArgument._id,
        delay,
        modes?._id ?? ffi.nullptr);
  }

  void performSelector_withObject_afterDelay_(
      ffi.Pointer<ObjCSel> aSelector, NSObject anArgument, double delay) {
    return _lib._objc_msgSend_17(
        _id,
        _lib._sel_performSelector_withObject_afterDelay_1,
        aSelector,
        anArgument._id,
        delay);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSObject1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSObject1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  void URL_resourceDataDidBecomeAvailable_(
      NSObject? sender, NSObject? newBytes) {
    return _lib._objc_msgSend_19(
        _id,
        _lib._sel_URL_resourceDataDidBecomeAvailable_1,
        sender?._id ?? ffi.nullptr,
        newBytes?._id ?? ffi.nullptr);
  }

  void URLResourceDidFinishLoading_(NSObject? sender) {
    return _lib._objc_msgSend_8(_id, _lib._sel_URLResourceDidFinishLoading_1,
        sender?._id ?? ffi.nullptr);
  }

  void URLResourceDidCancelLoading_(NSObject? sender) {
    return _lib._objc_msgSend_8(_id, _lib._sel_URLResourceDidCancelLoading_1,
        sender?._id ?? ffi.nullptr);
  }

  void URL_resourceDidFailLoadingWithReason_(
      NSObject? sender, NSObject? reason) {
    return _lib._objc_msgSend_19(
        _id,
        _lib._sel_URL_resourceDidFailLoadingWithReason_1,
        sender?._id ?? ffi.nullptr,
        reason?._id ?? ffi.nullptr);
  }

  bool fileManager_shouldProceedAfterError_(NSObject? fm, NSObject? errorInfo) {
    return _lib._objc_msgSend_20(
        _id,
        _lib._sel_fileManager_shouldProceedAfterError_1,
        fm?._id ?? ffi.nullptr,
        errorInfo?._id ?? ffi.nullptr);
  }

  void fileManager_willProcessPath_(NSObject? fm, NSObject? path) {
    return _lib._objc_msgSend_19(_id, _lib._sel_fileManager_willProcessPath_1,
        fm?._id ?? ffi.nullptr, path?._id ?? ffi.nullptr);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSObject1, _lib._sel_accessInstanceVariablesDirectly1);
  }

  NSObject valueForKey_(NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_valueForKey_1, key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void setValue_forKey_(NSObject value, NSObject? key) {
    return _lib._objc_msgSend_19(
        _id, _lib._sel_setValue_forKey_1, value._id, key?._id ?? ffi.nullptr);
  }

  bool validateValue_forKey_error_(ffi.Pointer<ffi.Pointer<ObjCObject>> ioValue,
      NSObject? inKey, ffi.Pointer<ffi.Pointer<ObjCObject>> outError) {
    return _lib._objc_msgSend_21(_id, _lib._sel_validateValue_forKey_error_1,
        ioValue, inKey?._id ?? ffi.nullptr, outError);
  }

  NSObject mutableArrayValueForKey_(NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_mutableArrayValueForKey_1, key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject mutableOrderedSetValueForKey_(NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_mutableOrderedSetValueForKey_1, key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject mutableSetValueForKey_(NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_mutableSetValueForKey_1, key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject valueForKeyPath_(NSObject? keyPath) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_valueForKeyPath_1, keyPath?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void setValue_forKeyPath_(NSObject value, NSObject? keyPath) {
    return _lib._objc_msgSend_19(_id, _lib._sel_setValue_forKeyPath_1,
        value._id, keyPath?._id ?? ffi.nullptr);
  }

  bool validateValue_forKeyPath_error_(
      ffi.Pointer<ffi.Pointer<ObjCObject>> ioValue,
      NSObject? inKeyPath,
      ffi.Pointer<ffi.Pointer<ObjCObject>> outError) {
    return _lib._objc_msgSend_21(
        _id,
        _lib._sel_validateValue_forKeyPath_error_1,
        ioValue,
        inKeyPath?._id ?? ffi.nullptr,
        outError);
  }

  NSObject mutableArrayValueForKeyPath_(NSObject? keyPath) {
    final _ret = _lib._objc_msgSend_13(_id,
        _lib._sel_mutableArrayValueForKeyPath_1, keyPath?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject mutableOrderedSetValueForKeyPath_(NSObject? keyPath) {
    final _ret = _lib._objc_msgSend_13(
        _id,
        _lib._sel_mutableOrderedSetValueForKeyPath_1,
        keyPath?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject mutableSetValueForKeyPath_(NSObject? keyPath) {
    final _ret = _lib._objc_msgSend_13(_id,
        _lib._sel_mutableSetValueForKeyPath_1, keyPath?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject valueForUndefinedKey_(NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_valueForUndefinedKey_1, key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void setValue_forUndefinedKey_(NSObject value, NSObject? key) {
    return _lib._objc_msgSend_19(_id, _lib._sel_setValue_forUndefinedKey_1,
        value._id, key?._id ?? ffi.nullptr);
  }

  void setNilValueForKey_(NSObject? key) {
    return _lib._objc_msgSend_8(
        _id, _lib._sel_setNilValueForKey_1, key?._id ?? ffi.nullptr);
  }

  NSObject dictionaryWithValuesForKeys_(NSObject? keys) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_dictionaryWithValuesForKeys_1, keys?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void setValuesForKeysWithDictionary_(NSObject? keyedValues) {
    return _lib._objc_msgSend_8(_id, _lib._sel_setValuesForKeysWithDictionary_1,
        keyedValues?._id ?? ffi.nullptr);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSObject1, _lib._sel_useStoredAccessor1);
  }

  NSObject storedValueForKey_(NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_storedValueForKey_1, key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void takeStoredValue_forKey_(NSObject value, NSObject? key) {
    return _lib._objc_msgSend_19(_id, _lib._sel_takeStoredValue_forKey_1,
        value._id, key?._id ?? ffi.nullptr);
  }

  void takeValue_forKey_(NSObject value, NSObject? key) {
    return _lib._objc_msgSend_19(
        _id, _lib._sel_takeValue_forKey_1, value._id, key?._id ?? ffi.nullptr);
  }

  void takeValue_forKeyPath_(NSObject value, NSObject? keyPath) {
    return _lib._objc_msgSend_19(_id, _lib._sel_takeValue_forKeyPath_1,
        value._id, keyPath?._id ?? ffi.nullptr);
  }

  NSObject handleQueryWithUnboundKey_(NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_handleQueryWithUnboundKey_1, key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void handleTakeValue_forUnboundKey_(NSObject value, NSObject? key) {
    return _lib._objc_msgSend_19(_id, _lib._sel_handleTakeValue_forUnboundKey_1,
        value._id, key?._id ?? ffi.nullptr);
  }

  void unableToSetNilForKey_(NSObject? key) {
    return _lib._objc_msgSend_8(
        _id, _lib._sel_unableToSetNilForKey_1, key?._id ?? ffi.nullptr);
  }

  NSObject valuesForKeys_(NSObject? keys) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_valuesForKeys_1, keys?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void takeValuesFromDictionary_(NSObject? properties) {
    return _lib._objc_msgSend_8(_id, _lib._sel_takeValuesFromDictionary_1,
        properties?._id ?? ffi.nullptr);
  }

  void observeValueForKeyPath_ofObject_change_context_(NSObject? keyPath,
      NSObject object, NSObject? change, ffi.Pointer<ffi.Void> context) {
    return _lib._objc_msgSend_22(
        _id,
        _lib._sel_observeValueForKeyPath_ofObject_change_context_1,
        keyPath?._id ?? ffi.nullptr,
        object._id,
        change?._id ?? ffi.nullptr,
        context);
  }

  void addObserver_forKeyPath_options_context_(NSObject? observer,
      NSObject? keyPath, int options, ffi.Pointer<ffi.Void> context) {
    return _lib._objc_msgSend_23(
        _id,
        _lib._sel_addObserver_forKeyPath_options_context_1,
        observer?._id ?? ffi.nullptr,
        keyPath?._id ?? ffi.nullptr,
        options,
        context);
  }

  void removeObserver_forKeyPath_context_(
      NSObject? observer, NSObject? keyPath, ffi.Pointer<ffi.Void> context) {
    return _lib._objc_msgSend_24(
        _id,
        _lib._sel_removeObserver_forKeyPath_context_1,
        observer?._id ?? ffi.nullptr,
        keyPath?._id ?? ffi.nullptr,
        context);
  }

  void removeObserver_forKeyPath_(NSObject? observer, NSObject? keyPath) {
    return _lib._objc_msgSend_19(_id, _lib._sel_removeObserver_forKeyPath_1,
        observer?._id ?? ffi.nullptr, keyPath?._id ?? ffi.nullptr);
  }

  void willChangeValueForKey_(NSObject? key) {
    return _lib._objc_msgSend_8(
        _id, _lib._sel_willChangeValueForKey_1, key?._id ?? ffi.nullptr);
  }

  void didChangeValueForKey_(NSObject? key) {
    return _lib._objc_msgSend_8(
        _id, _lib._sel_didChangeValueForKey_1, key?._id ?? ffi.nullptr);
  }

  void willChange_valuesAtIndexes_forKey_(
      int changeKind, NSObject? indexes, NSObject? key) {
    return _lib._objc_msgSend_25(
        _id,
        _lib._sel_willChange_valuesAtIndexes_forKey_1,
        changeKind,
        indexes?._id ?? ffi.nullptr,
        key?._id ?? ffi.nullptr);
  }

  void didChange_valuesAtIndexes_forKey_(
      int changeKind, NSObject? indexes, NSObject? key) {
    return _lib._objc_msgSend_25(
        _id,
        _lib._sel_didChange_valuesAtIndexes_forKey_1,
        changeKind,
        indexes?._id ?? ffi.nullptr,
        key?._id ?? ffi.nullptr);
  }

  void willChangeValueForKey_withSetMutation_usingObjects_(
      NSObject? key, int mutationKind, NSObject? objects) {
    return _lib._objc_msgSend_26(
        _id,
        _lib._sel_willChangeValueForKey_withSetMutation_usingObjects_1,
        key?._id ?? ffi.nullptr,
        mutationKind,
        objects?._id ?? ffi.nullptr);
  }

  void didChangeValueForKey_withSetMutation_usingObjects_(
      NSObject? key, int mutationKind, NSObject? objects) {
    return _lib._objc_msgSend_26(
        _id,
        _lib._sel_didChangeValueForKey_withSetMutation_usingObjects_1,
        key?._id ?? ffi.nullptr,
        mutationKind,
        objects?._id ?? ffi.nullptr);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSObject1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSObject1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  ffi.Pointer<ffi.Void> get observationInfo {
    return _lib._objc_msgSend_27(_id, _lib._sel_observationInfo1);
  }

  set observationInfo(ffi.Pointer<ffi.Void> value) {
    _lib._objc_msgSend_28(_id, _lib._sel_setObservationInfo_1, value);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSObject1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  NSObject get classForKeyedArchiver {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_classForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject replacementObjectForKeyedArchiver_(NSObject? archiver) {
    final _ret = _lib._objc_msgSend_13(
        _id,
        _lib._sel_replacementObjectForKeyedArchiver_1,
        archiver?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSObject1, _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSObject1, _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void performSelectorOnMainThread_withObject_waitUntilDone_modes_(
      ffi.Pointer<ObjCSel> aSelector,
      NSObject arg,
      bool wait,
      NSObject? array) {
    return _lib._objc_msgSend_29(
        _id,
        _lib._sel_performSelectorOnMainThread_withObject_waitUntilDone_modes_1,
        aSelector,
        arg._id,
        wait,
        array?._id ?? ffi.nullptr);
  }

  void performSelectorOnMainThread_withObject_waitUntilDone_(
      ffi.Pointer<ObjCSel> aSelector, NSObject arg, bool wait) {
    return _lib._objc_msgSend_30(
        _id,
        _lib._sel_performSelectorOnMainThread_withObject_waitUntilDone_1,
        aSelector,
        arg._id,
        wait);
  }

  void performSelector_onThread_withObject_waitUntilDone_modes_(
      ffi.Pointer<ObjCSel> aSelector,
      NSObject? thr,
      NSObject arg,
      bool wait,
      NSObject? array) {
    return _lib._objc_msgSend_31(
        _id,
        _lib._sel_performSelector_onThread_withObject_waitUntilDone_modes_1,
        aSelector,
        thr?._id ?? ffi.nullptr,
        arg._id,
        wait,
        array?._id ?? ffi.nullptr);
  }

  void performSelector_onThread_withObject_waitUntilDone_(
      ffi.Pointer<ObjCSel> aSelector, NSObject? thr, NSObject arg, bool wait) {
    return _lib._objc_msgSend_32(
        _id,
        _lib._sel_performSelector_onThread_withObject_waitUntilDone_1,
        aSelector,
        thr?._id ?? ffi.nullptr,
        arg._id,
        wait);
  }

  void performSelectorInBackground_withObject_(
      ffi.Pointer<ObjCSel> aSelector, NSObject arg) {
    return _lib._objc_msgSend_33(_id,
        _lib._sel_performSelectorInBackground_withObject_1, aSelector, arg._id);
  }

  NSObject get classForArchiver {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_classForArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject replacementObjectForArchiver_(NSObject? archiver) {
    final _ret = _lib._objc_msgSend_13(_id,
        _lib._sel_replacementObjectForArchiver_1, archiver?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject get classForPortCoder {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_classForPortCoder1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject replacementObjectForPortCoder_(NSObject? coder) {
    final _ret = _lib._objc_msgSend_13(_id,
        _lib._sel_replacementObjectForPortCoder_1, coder?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get classDescription {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_classDescription1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get attributeKeys {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_attributeKeys1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get toOneRelationshipKeys {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_toOneRelationshipKeys1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get toManyRelationshipKeys {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_toManyRelationshipKeys1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject inverseForRelationshipKey_(NSObject? relationshipKey) {
    final _ret = _lib._objc_msgSend_13(
        _id,
        _lib._sel_inverseForRelationshipKey_1,
        relationshipKey?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject scriptingValueForSpecifier_(NSObject? objectSpecifier) {
    final _ret = _lib._objc_msgSend_13(
        _id,
        _lib._sel_scriptingValueForSpecifier_1,
        objectSpecifier?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get scriptingProperties {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_scriptingProperties1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set scriptingProperties(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setScriptingProperties_1, value?._id ?? ffi.nullptr);
  }

  NSObject copyScriptingValue_forKey_withProperties_(
      NSObject value, NSObject? key, NSObject? properties) {
    final _ret = _lib._objc_msgSend_35(
        _id,
        _lib._sel_copyScriptingValue_forKey_withProperties_1,
        value._id,
        key?._id ?? ffi.nullptr,
        properties?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  NSObject
      newScriptingObjectOfClass_forValueForKey_withContentsValue_properties_(
          NSObject objectClass,
          NSObject? key,
          NSObject contentsValue,
          NSObject? properties) {
    final _ret = _lib._objc_msgSend_36(
        _id,
        _lib._sel_newScriptingObjectOfClass_forValueForKey_withContentsValue_properties_1,
        objectClass._id,
        key?._id ?? ffi.nullptr,
        contentsValue._id,
        properties?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  int get classCode {
    return _lib._objc_msgSend_37(_id, _lib._sel_classCode1);
  }

  NSObject? get className {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_className1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject valueAtIndex_inPropertyWithKey_(int index, NSObject? key) {
    final _ret = _lib._objc_msgSend_38(
        _id,
        _lib._sel_valueAtIndex_inPropertyWithKey_1,
        index,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject valueWithName_inPropertyWithKey_(NSObject? name, NSObject? key) {
    final _ret = _lib._objc_msgSend_39(
        _id,
        _lib._sel_valueWithName_inPropertyWithKey_1,
        name?._id ?? ffi.nullptr,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject valueWithUniqueID_inPropertyWithKey_(
      NSObject uniqueID, NSObject? key) {
    final _ret = _lib._objc_msgSend_39(
        _id,
        _lib._sel_valueWithUniqueID_inPropertyWithKey_1,
        uniqueID._id,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void insertValue_atIndex_inPropertyWithKey_(
      NSObject value, int index, NSObject? key) {
    return _lib._objc_msgSend_40(
        _id,
        _lib._sel_insertValue_atIndex_inPropertyWithKey_1,
        value._id,
        index,
        key?._id ?? ffi.nullptr);
  }

  void removeValueAtIndex_fromPropertyWithKey_(int index, NSObject? key) {
    return _lib._objc_msgSend_41(
        _id,
        _lib._sel_removeValueAtIndex_fromPropertyWithKey_1,
        index,
        key?._id ?? ffi.nullptr);
  }

  void replaceValueAtIndex_inPropertyWithKey_withValue_(
      int index, NSObject? key, NSObject value) {
    return _lib._objc_msgSend_42(
        _id,
        _lib._sel_replaceValueAtIndex_inPropertyWithKey_withValue_1,
        index,
        key?._id ?? ffi.nullptr,
        value._id);
  }

  void insertValue_inPropertyWithKey_(NSObject value, NSObject? key) {
    return _lib._objc_msgSend_19(_id, _lib._sel_insertValue_inPropertyWithKey_1,
        value._id, key?._id ?? ffi.nullptr);
  }

  NSObject coerceValue_forKey_(NSObject value, NSObject? key) {
    final _ret = _lib._objc_msgSend_39(_id, _lib._sel_coerceValue_forKey_1,
        value._id, key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get objectSpecifier {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_objectSpecifier1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject indicesOfObjectsByEvaluatingObjectSpecifier_(NSObject? specifier) {
    final _ret = _lib._objc_msgSend_13(
        _id,
        _lib._sel_indicesOfObjectsByEvaluatingObjectSpecifier_1,
        specifier?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool isEqualTo_(NSObject object) {
    return _lib._objc_msgSend_0(_id, _lib._sel_isEqualTo_1, object._id);
  }

  bool isLessThanOrEqualTo_(NSObject object) {
    return _lib._objc_msgSend_0(
        _id, _lib._sel_isLessThanOrEqualTo_1, object._id);
  }

  bool isLessThan_(NSObject object) {
    return _lib._objc_msgSend_0(_id, _lib._sel_isLessThan_1, object._id);
  }

  bool isGreaterThanOrEqualTo_(NSObject object) {
    return _lib._objc_msgSend_0(
        _id, _lib._sel_isGreaterThanOrEqualTo_1, object._id);
  }

  bool isGreaterThan_(NSObject object) {
    return _lib._objc_msgSend_0(_id, _lib._sel_isGreaterThan_1, object._id);
  }

  bool isNotEqualTo_(NSObject object) {
    return _lib._objc_msgSend_0(_id, _lib._sel_isNotEqualTo_1, object._id);
  }

  bool doesContain_(NSObject object) {
    return _lib._objc_msgSend_0(_id, _lib._sel_doesContain_1, object._id);
  }

  bool isLike_(NSObject? object) {
    return _lib._objc_msgSend_0(
        _id, _lib._sel_isLike_1, object?._id ?? ffi.nullptr);
  }

  bool isCaseInsensitiveLike_(NSObject? object) {
    return _lib._objc_msgSend_0(
        _id, _lib._sel_isCaseInsensitiveLike_1, object?._id ?? ffi.nullptr);
  }

  bool scriptingIsEqualTo_(NSObject object) {
    return _lib._objc_msgSend_0(
        _id, _lib._sel_scriptingIsEqualTo_1, object._id);
  }

  bool scriptingIsLessThanOrEqualTo_(NSObject object) {
    return _lib._objc_msgSend_0(
        _id, _lib._sel_scriptingIsLessThanOrEqualTo_1, object._id);
  }

  bool scriptingIsLessThan_(NSObject object) {
    return _lib._objc_msgSend_0(
        _id, _lib._sel_scriptingIsLessThan_1, object._id);
  }

  bool scriptingIsGreaterThanOrEqualTo_(NSObject object) {
    return _lib._objc_msgSend_0(
        _id, _lib._sel_scriptingIsGreaterThanOrEqualTo_1, object._id);
  }

  bool scriptingIsGreaterThan_(NSObject object) {
    return _lib._objc_msgSend_0(
        _id, _lib._sel_scriptingIsGreaterThan_1, object._id);
  }

  bool scriptingBeginsWith_(NSObject object) {
    return _lib._objc_msgSend_0(
        _id, _lib._sel_scriptingBeginsWith_1, object._id);
  }

  bool scriptingEndsWith_(NSObject object) {
    return _lib._objc_msgSend_0(_id, _lib._sel_scriptingEndsWith_1, object._id);
  }

  bool scriptingContains_(NSObject object) {
    return _lib._objc_msgSend_0(_id, _lib._sel_scriptingContains_1, object._id);
  }
}

class ObjCSel extends ffi.Opaque {}

class ObjCObject extends ffi.Opaque {}

typedef instancetype = ffi.Pointer<ObjCObject>;

class _NSZone extends ffi.Opaque {}

typedef IMP = ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>;
typedef NSUInteger = ffi.UnsignedLong;
typedef NSInteger = ffi.Long;
typedef NSTimeInterval = ffi.Double;

abstract class NSKeyValueObservingOptions {
  static const int NSKeyValueObservingOptionNew = 1;
  static const int NSKeyValueObservingOptionOld = 2;
  static const int NSKeyValueObservingOptionInitial = 4;
  static const int NSKeyValueObservingOptionPrior = 8;
}

abstract class NSKeyValueChange {
  static const int NSKeyValueChangeSetting = 1;
  static const int NSKeyValueChangeInsertion = 2;
  static const int NSKeyValueChangeRemoval = 3;
  static const int NSKeyValueChangeReplacement = 4;
}

abstract class NSKeyValueSetMutationKind {
  static const int NSKeyValueUnionSetMutation = 1;
  static const int NSKeyValueMinusSetMutation = 2;
  static const int NSKeyValueIntersectSetMutation = 3;
  static const int NSKeyValueSetSetMutation = 4;
}

typedef FourCharCode = UInt32;
typedef UInt32 = ffi.UnsignedInt;

class NSEnumerator extends NSObject {
  NSEnumerator._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSEnumerator] that points to the same underlying object as [other].
  static NSEnumerator castFrom<T extends _ObjCWrapper>(T other) {
    return NSEnumerator._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSEnumerator] that wraps the given raw object pointer.
  static NSEnumerator castFromPointer(
      AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSEnumerator._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSEnumerator].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSEnumerator1);
  }

  NSObject nextObject() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_nextObject1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get allObjects {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_allObjects1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSEnumerator new1(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSEnumerator1, _lib._sel_new1);
    return NSEnumerator._(_ret, _lib, retain: false, release: true);
  }

  static NSEnumerator alloc(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSEnumerator1, _lib._sel_alloc1);
    return NSEnumerator._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSEnumerator1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSEnumerator1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSEnumerator1, _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSEnumerator1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSEnumerator1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSEnumerator1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSEnumerator1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSEnumerator1, _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSEnumerator1, _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSValue extends NSObject {
  NSValue._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSValue] that points to the same underlying object as [other].
  static NSValue castFrom<T extends _ObjCWrapper>(T other) {
    return NSValue._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSValue] that wraps the given raw object pointer.
  static NSValue castFromPointer(AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSValue._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSValue].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSValue1);
  }

  void getValue_size_(ffi.Pointer<ffi.Void> value, int size) {
    return _lib._objc_msgSend_43(_id, _lib._sel_getValue_size_1, value, size);
  }

  ffi.Pointer<ffi.Char> get objCType {
    return _lib._objc_msgSend_44(_id, _lib._sel_objCType1);
  }

  NSValue initWithBytes_objCType_(
      ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _lib._objc_msgSend_45(
        _id, _lib._sel_initWithBytes_objCType_1, value, type);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  NSValue initWithCoder_(NSObject? coder) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_initWithCoder_1, coder?._id ?? ffi.nullptr);
    return NSValue._(_ret, _lib, retain: true, release: true);
  }

  static NSObject valueWithBytes_objCType_(
      AVFAudio _lib, ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _lib._objc_msgSend_45(
        _lib._class_NSValue1, _lib._sel_valueWithBytes_objCType_1, value, type);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject value_withObjCType_(
      AVFAudio _lib, ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _lib._objc_msgSend_45(
        _lib._class_NSValue1, _lib._sel_value_withObjCType_1, value, type);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject valueWithNonretainedObject_(
      AVFAudio _lib, NSObject anObject) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSValue1,
        _lib._sel_valueWithNonretainedObject_1, anObject._id);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject get nonretainedObjectValue {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_nonretainedObjectValue1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject valueWithPointer_(
      AVFAudio _lib, ffi.Pointer<ffi.Void> pointer) {
    final _ret = _lib._objc_msgSend_46(
        _lib._class_NSValue1, _lib._sel_valueWithPointer_1, pointer);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  ffi.Pointer<ffi.Void> get pointerValue {
    return _lib._objc_msgSend_27(_id, _lib._sel_pointerValue1);
  }

  bool isEqualToValue_(NSObject? value) {
    return _lib._objc_msgSend_0(
        _id, _lib._sel_isEqualToValue_1, value?._id ?? ffi.nullptr);
  }

  void getValue_(ffi.Pointer<ffi.Void> value) {
    return _lib._objc_msgSend_47(_id, _lib._sel_getValue_1, value);
  }

  static NSObject valueWithRange_(AVFAudio _lib, NSRange range) {
    final _ret = _lib._objc_msgSend_48(
        _lib._class_NSValue1, _lib._sel_valueWithRange_1, range);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSRange get rangeValue {
    return _lib._objc_msgSend_49(_id, _lib._sel_rangeValue1);
  }

  static NSObject valueWithPoint_(AVFAudio _lib, NSPoint point) {
    final _ret = _lib._objc_msgSend_50(
        _lib._class_NSValue1, _lib._sel_valueWithPoint_1, point);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject valueWithSize_(AVFAudio _lib, NSSize size) {
    final _ret = _lib._objc_msgSend_51(
        _lib._class_NSValue1, _lib._sel_valueWithSize_1, size);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject valueWithRect_(AVFAudio _lib, NSRect rect) {
    final _ret = _lib._objc_msgSend_52(
        _lib._class_NSValue1, _lib._sel_valueWithRect_1, rect);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject valueWithEdgeInsets_(AVFAudio _lib, NSEdgeInsets insets) {
    final _ret = _lib._objc_msgSend_53(
        _lib._class_NSValue1, _lib._sel_valueWithEdgeInsets_1, insets);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSPoint get pointValue {
    return _lib._objc_msgSend_54(_id, _lib._sel_pointValue1);
  }

  NSSize get sizeValue {
    return _lib._objc_msgSend_55(_id, _lib._sel_sizeValue1);
  }

  NSRect get rectValue {
    return _lib._objc_msgSend_56(_id, _lib._sel_rectValue1);
  }

  NSEdgeInsets get edgeInsetsValue {
    return _lib._objc_msgSend_57(_id, _lib._sel_edgeInsetsValue1);
  }

  static NSValue new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSValue1, _lib._sel_new1);
    return NSValue._(_ret, _lib, retain: false, release: true);
  }

  static NSValue alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSValue1, _lib._sel_alloc1);
    return NSValue._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSValue1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSValue1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSValue1, _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSValue1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSValue1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSValue1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSValue1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSValue1, _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSValue1, _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

typedef NSRange = _NSRange;

class _NSRange extends ffi.Struct {
  @NSUInteger()
  external int location;

  @NSUInteger()
  external int length;
}

typedef NSPoint = CGPoint;

class CGPoint extends ffi.Struct {
  @CGFloat()
  external double x;

  @CGFloat()
  external double y;
}

typedef CGFloat = ffi.Double;
typedef NSSize = CGSize;

class CGSize extends ffi.Struct {
  @CGFloat()
  external double width;

  @CGFloat()
  external double height;
}

typedef NSRect = CGRect;

class CGRect extends ffi.Struct {
  external CGPoint origin;

  external CGSize size;
}

class NSEdgeInsets extends ffi.Struct {
  @CGFloat()
  external double top;

  @CGFloat()
  external double left;

  @CGFloat()
  external double bottom;

  @CGFloat()
  external double right;
}

class NSNumber extends NSValue {
  NSNumber._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSNumber] that points to the same underlying object as [other].
  static NSNumber castFrom<T extends _ObjCWrapper>(T other) {
    return NSNumber._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSNumber] that wraps the given raw object pointer.
  static NSNumber castFromPointer(AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSNumber._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSNumber].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSNumber1);
  }

  @override
  NSNumber initWithCoder_(NSObject? coder) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_initWithCoder_1, coder?._id ?? ffi.nullptr);
    return NSNumber._(_ret, _lib, retain: true, release: true);
  }

  NSObject initWithChar_(int value) {
    final _ret = _lib._objc_msgSend_58(_id, _lib._sel_initWithChar_1, value);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject initWithUnsignedChar_(int value) {
    final _ret =
        _lib._objc_msgSend_59(_id, _lib._sel_initWithUnsignedChar_1, value);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject initWithShort_(int value) {
    final _ret = _lib._objc_msgSend_60(_id, _lib._sel_initWithShort_1, value);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject initWithUnsignedShort_(int value) {
    final _ret =
        _lib._objc_msgSend_61(_id, _lib._sel_initWithUnsignedShort_1, value);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject initWithInt_(int value) {
    final _ret = _lib._objc_msgSend_62(_id, _lib._sel_initWithInt_1, value);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject initWithUnsignedInt_(int value) {
    final _ret =
        _lib._objc_msgSend_63(_id, _lib._sel_initWithUnsignedInt_1, value);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject initWithLong_(int value) {
    final _ret = _lib._objc_msgSend_64(_id, _lib._sel_initWithLong_1, value);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject initWithUnsignedLong_(int value) {
    final _ret =
        _lib._objc_msgSend_65(_id, _lib._sel_initWithUnsignedLong_1, value);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject initWithLongLong_(int value) {
    final _ret =
        _lib._objc_msgSend_66(_id, _lib._sel_initWithLongLong_1, value);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject initWithUnsignedLongLong_(int value) {
    final _ret =
        _lib._objc_msgSend_67(_id, _lib._sel_initWithUnsignedLongLong_1, value);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject initWithFloat_(double value) {
    final _ret = _lib._objc_msgSend_68(_id, _lib._sel_initWithFloat_1, value);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject initWithDouble_(double value) {
    final _ret = _lib._objc_msgSend_69(_id, _lib._sel_initWithDouble_1, value);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject initWithBool_(bool value) {
    final _ret = _lib._objc_msgSend_70(_id, _lib._sel_initWithBool_1, value);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject initWithInteger_(int value) {
    final _ret = _lib._objc_msgSend_64(_id, _lib._sel_initWithInteger_1, value);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject initWithUnsignedInteger_(int value) {
    final _ret =
        _lib._objc_msgSend_65(_id, _lib._sel_initWithUnsignedInteger_1, value);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  int get charValue {
    return _lib._objc_msgSend_71(_id, _lib._sel_charValue1);
  }

  int get unsignedCharValue {
    return _lib._objc_msgSend_72(_id, _lib._sel_unsignedCharValue1);
  }

  int get shortValue {
    return _lib._objc_msgSend_73(_id, _lib._sel_shortValue1);
  }

  int get unsignedShortValue {
    return _lib._objc_msgSend_74(_id, _lib._sel_unsignedShortValue1);
  }

  int get intValue {
    return _lib._objc_msgSend_75(_id, _lib._sel_intValue1);
  }

  int get unsignedIntValue {
    return _lib._objc_msgSend_37(_id, _lib._sel_unsignedIntValue1);
  }

  int get longValue {
    return _lib._objc_msgSend_11(_id, _lib._sel_longValue1);
  }

  int get unsignedLongValue {
    return _lib._objc_msgSend_10(_id, _lib._sel_unsignedLongValue1);
  }

  int get longLongValue {
    return _lib._objc_msgSend_76(_id, _lib._sel_longLongValue1);
  }

  int get unsignedLongLongValue {
    return _lib._objc_msgSend_77(_id, _lib._sel_unsignedLongLongValue1);
  }

  double get floatValue {
    return _lib._objc_msgSend_78(_id, _lib._sel_floatValue1);
  }

  double get doubleValue {
    return _lib._objc_msgSend_79(_id, _lib._sel_doubleValue1);
  }

  bool get boolValue {
    return _lib._objc_msgSend_9(_id, _lib._sel_boolValue1);
  }

  int get integerValue {
    return _lib._objc_msgSend_11(_id, _lib._sel_integerValue1);
  }

  int get unsignedIntegerValue {
    return _lib._objc_msgSend_10(_id, _lib._sel_unsignedIntegerValue1);
  }

  NSObject? get stringValue {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_stringValue1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  int compare_(NSObject? otherNumber) {
    return _lib._objc_msgSend_80(
        _id, _lib._sel_compare_1, otherNumber?._id ?? ffi.nullptr);
  }

  bool isEqualToNumber_(NSObject? number) {
    return _lib._objc_msgSend_0(
        _id, _lib._sel_isEqualToNumber_1, number?._id ?? ffi.nullptr);
  }

  NSObject descriptionWithLocale_(NSObject locale) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_descriptionWithLocale_1, locale._id);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject numberWithChar_(AVFAudio _lib, int value) {
    final _ret = _lib._objc_msgSend_58(
        _lib._class_NSNumber1, _lib._sel_numberWithChar_1, value);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject numberWithUnsignedChar_(AVFAudio _lib, int value) {
    final _ret = _lib._objc_msgSend_59(
        _lib._class_NSNumber1, _lib._sel_numberWithUnsignedChar_1, value);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject numberWithShort_(AVFAudio _lib, int value) {
    final _ret = _lib._objc_msgSend_60(
        _lib._class_NSNumber1, _lib._sel_numberWithShort_1, value);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject numberWithUnsignedShort_(AVFAudio _lib, int value) {
    final _ret = _lib._objc_msgSend_61(
        _lib._class_NSNumber1, _lib._sel_numberWithUnsignedShort_1, value);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject numberWithInt_(AVFAudio _lib, int value) {
    final _ret = _lib._objc_msgSend_62(
        _lib._class_NSNumber1, _lib._sel_numberWithInt_1, value);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject numberWithUnsignedInt_(AVFAudio _lib, int value) {
    final _ret = _lib._objc_msgSend_63(
        _lib._class_NSNumber1, _lib._sel_numberWithUnsignedInt_1, value);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject numberWithLong_(AVFAudio _lib, int value) {
    final _ret = _lib._objc_msgSend_64(
        _lib._class_NSNumber1, _lib._sel_numberWithLong_1, value);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject numberWithUnsignedLong_(AVFAudio _lib, int value) {
    final _ret = _lib._objc_msgSend_65(
        _lib._class_NSNumber1, _lib._sel_numberWithUnsignedLong_1, value);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject numberWithLongLong_(AVFAudio _lib, int value) {
    final _ret = _lib._objc_msgSend_66(
        _lib._class_NSNumber1, _lib._sel_numberWithLongLong_1, value);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject numberWithUnsignedLongLong_(AVFAudio _lib, int value) {
    final _ret = _lib._objc_msgSend_67(
        _lib._class_NSNumber1, _lib._sel_numberWithUnsignedLongLong_1, value);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject numberWithFloat_(AVFAudio _lib, double value) {
    final _ret = _lib._objc_msgSend_68(
        _lib._class_NSNumber1, _lib._sel_numberWithFloat_1, value);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject numberWithDouble_(AVFAudio _lib, double value) {
    final _ret = _lib._objc_msgSend_69(
        _lib._class_NSNumber1, _lib._sel_numberWithDouble_1, value);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject numberWithBool_(AVFAudio _lib, bool value) {
    final _ret = _lib._objc_msgSend_70(
        _lib._class_NSNumber1, _lib._sel_numberWithBool_1, value);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject numberWithInteger_(AVFAudio _lib, int value) {
    final _ret = _lib._objc_msgSend_64(
        _lib._class_NSNumber1, _lib._sel_numberWithInteger_1, value);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject numberWithUnsignedInteger_(AVFAudio _lib, int value) {
    final _ret = _lib._objc_msgSend_65(
        _lib._class_NSNumber1, _lib._sel_numberWithUnsignedInteger_1, value);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSDecimal get decimalValue {
    return _lib._objc_msgSend_81(_id, _lib._sel_decimalValue1);
  }

  static NSObject valueWithBytes_objCType_(
      AVFAudio _lib, ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _lib._objc_msgSend_45(_lib._class_NSNumber1,
        _lib._sel_valueWithBytes_objCType_1, value, type);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject value_withObjCType_(
      AVFAudio _lib, ffi.Pointer<ffi.Void> value, ffi.Pointer<ffi.Char> type) {
    final _ret = _lib._objc_msgSend_45(
        _lib._class_NSNumber1, _lib._sel_value_withObjCType_1, value, type);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject valueWithNonretainedObject_(
      AVFAudio _lib, NSObject anObject) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSNumber1,
        _lib._sel_valueWithNonretainedObject_1, anObject._id);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject valueWithPointer_(
      AVFAudio _lib, ffi.Pointer<ffi.Void> pointer) {
    final _ret = _lib._objc_msgSend_46(
        _lib._class_NSNumber1, _lib._sel_valueWithPointer_1, pointer);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject valueWithRange_(AVFAudio _lib, NSRange range) {
    final _ret = _lib._objc_msgSend_48(
        _lib._class_NSNumber1, _lib._sel_valueWithRange_1, range);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject valueWithPoint_(AVFAudio _lib, NSPoint point) {
    final _ret = _lib._objc_msgSend_50(
        _lib._class_NSNumber1, _lib._sel_valueWithPoint_1, point);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject valueWithSize_(AVFAudio _lib, NSSize size) {
    final _ret = _lib._objc_msgSend_51(
        _lib._class_NSNumber1, _lib._sel_valueWithSize_1, size);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject valueWithRect_(AVFAudio _lib, NSRect rect) {
    final _ret = _lib._objc_msgSend_52(
        _lib._class_NSNumber1, _lib._sel_valueWithRect_1, rect);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject valueWithEdgeInsets_(AVFAudio _lib, NSEdgeInsets insets) {
    final _ret = _lib._objc_msgSend_53(
        _lib._class_NSNumber1, _lib._sel_valueWithEdgeInsets_1, insets);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSNumber new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSNumber1, _lib._sel_new1);
    return NSNumber._(_ret, _lib, retain: false, release: true);
  }

  static NSNumber alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSNumber1, _lib._sel_alloc1);
    return NSNumber._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSNumber1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSNumber1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSNumber1, _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSNumber1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSNumber1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSNumber1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSNumber1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSNumber1, _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSNumber1, _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

abstract class NSComparisonResult {
  static const int NSOrderedAscending = -1;
  static const int NSOrderedSame = 0;
  static const int NSOrderedDescending = 1;
}

class NSDecimal extends ffi.Opaque {}

class NSArray extends NSObject {
  NSArray._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSArray] that points to the same underlying object as [other].
  static NSArray castFrom<T extends _ObjCWrapper>(T other) {
    return NSArray._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSArray] that wraps the given raw object pointer.
  static NSArray castFromPointer(AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSArray._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSArray].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSArray1);
  }

  int get count {
    return _lib._objc_msgSend_10(_id, _lib._sel_count1);
  }

  NSObject objectAtIndex_(int index) {
    final _ret = _lib._objc_msgSend_65(_id, _lib._sel_objectAtIndex_1, index);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSArray init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray initWithObjects_count_(
      ffi.Pointer<ffi.Pointer<ObjCObject>> objects, int cnt) {
    final _ret = _lib._objc_msgSend_82(
        _id, _lib._sel_initWithObjects_count_1, objects, cnt);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray initWithCoder_(NSObject? coder) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_initWithCoder_1, coder?._id ?? ffi.nullptr);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSObject arrayByAddingObject_(NSObject anObject) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_arrayByAddingObject_1, anObject._id);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject arrayByAddingObjectsFromArray_(NSObject? otherArray) {
    final _ret = _lib._objc_msgSend_13(
        _id,
        _lib._sel_arrayByAddingObjectsFromArray_1,
        otherArray?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject componentsJoinedByString_(NSObject? separator) {
    final _ret = _lib._objc_msgSend_13(_id,
        _lib._sel_componentsJoinedByString_1, separator?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool containsObject_(NSObject anObject) {
    return _lib._objc_msgSend_0(_id, _lib._sel_containsObject_1, anObject._id);
  }

  NSObject? get description {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_description1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject descriptionWithLocale_(NSObject locale) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_descriptionWithLocale_1, locale._id);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject descriptionWithLocale_indent_(NSObject locale, int level) {
    final _ret = _lib._objc_msgSend_83(
        _id, _lib._sel_descriptionWithLocale_indent_1, locale._id, level);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject firstObjectCommonWithArray_(NSObject? otherArray) {
    final _ret = _lib._objc_msgSend_13(_id,
        _lib._sel_firstObjectCommonWithArray_1, otherArray?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void getObjects_range_(
      ffi.Pointer<ffi.Pointer<ObjCObject>> objects, NSRange range) {
    return _lib._objc_msgSend_84(
        _id, _lib._sel_getObjects_range_1, objects, range);
  }

  int indexOfObject_(NSObject anObject) {
    return _lib._objc_msgSend_85(_id, _lib._sel_indexOfObject_1, anObject._id);
  }

  int indexOfObject_inRange_(NSObject anObject, NSRange range) {
    return _lib._objc_msgSend_86(
        _id, _lib._sel_indexOfObject_inRange_1, anObject._id, range);
  }

  int indexOfObjectIdenticalTo_(NSObject anObject) {
    return _lib._objc_msgSend_85(
        _id, _lib._sel_indexOfObjectIdenticalTo_1, anObject._id);
  }

  int indexOfObjectIdenticalTo_inRange_(NSObject anObject, NSRange range) {
    return _lib._objc_msgSend_86(
        _id, _lib._sel_indexOfObjectIdenticalTo_inRange_1, anObject._id, range);
  }

  bool isEqualToArray_(NSObject? otherArray) {
    return _lib._objc_msgSend_0(
        _id, _lib._sel_isEqualToArray_1, otherArray?._id ?? ffi.nullptr);
  }

  NSObject get firstObject {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_firstObject1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject get lastObject {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_lastObject1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject objectEnumerator() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_objectEnumerator1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject reverseObjectEnumerator() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_reverseObjectEnumerator1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get sortedArrayHint {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_sortedArrayHint1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject sortedArrayUsingFunction_context_(
      ffi.Pointer<
              ffi.NativeFunction<
                  NSInteger Function(ffi.Pointer<ObjCObject>,
                      ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Void>)>>
          comparator,
      ffi.Pointer<ffi.Void> context) {
    final _ret = _lib._objc_msgSend_87(
        _id, _lib._sel_sortedArrayUsingFunction_context_1, comparator, context);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject sortedArrayUsingFunction_context_hint_(
      ffi.Pointer<
              ffi.NativeFunction<
                  NSInteger Function(ffi.Pointer<ObjCObject>,
                      ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Void>)>>
          comparator,
      ffi.Pointer<ffi.Void> context,
      NSObject? hint) {
    final _ret = _lib._objc_msgSend_88(
        _id,
        _lib._sel_sortedArrayUsingFunction_context_hint_1,
        comparator,
        context,
        hint?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject sortedArrayUsingSelector_(ffi.Pointer<ObjCSel> comparator) {
    final _ret = _lib._objc_msgSend_7(
        _id, _lib._sel_sortedArrayUsingSelector_1, comparator);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject subarrayWithRange_(NSRange range) {
    final _ret =
        _lib._objc_msgSend_48(_id, _lib._sel_subarrayWithRange_1, range);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool writeToURL_error_(
      NSObject? url, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_89(
        _id, _lib._sel_writeToURL_error_1, url?._id ?? ffi.nullptr, error);
  }

  void makeObjectsPerformSelector_(ffi.Pointer<ObjCSel> aSelector) {
    return _lib._objc_msgSend_6(
        _id, _lib._sel_makeObjectsPerformSelector_1, aSelector);
  }

  void makeObjectsPerformSelector_withObject_(
      ffi.Pointer<ObjCSel> aSelector, NSObject argument) {
    return _lib._objc_msgSend_33(
        _id,
        _lib._sel_makeObjectsPerformSelector_withObject_1,
        aSelector,
        argument._id);
  }

  NSObject objectsAtIndexes_(NSObject? indexes) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_objectsAtIndexes_1, indexes?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject objectAtIndexedSubscript_(int idx) {
    final _ret =
        _lib._objc_msgSend_65(_id, _lib._sel_objectAtIndexedSubscript_1, idx);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void enumerateObjectsUsingBlock_(ObjCBlock block) {
    return _lib._objc_msgSend_90(
        _id, _lib._sel_enumerateObjectsUsingBlock_1, block._impl);
  }

  void enumerateObjectsWithOptions_usingBlock_(int opts, ObjCBlock block) {
    return _lib._objc_msgSend_91(_id,
        _lib._sel_enumerateObjectsWithOptions_usingBlock_1, opts, block._impl);
  }

  void enumerateObjectsAtIndexes_options_usingBlock_(
      NSObject? s, int opts, ObjCBlock block) {
    return _lib._objc_msgSend_92(
        _id,
        _lib._sel_enumerateObjectsAtIndexes_options_usingBlock_1,
        s?._id ?? ffi.nullptr,
        opts,
        block._impl);
  }

  int indexOfObjectPassingTest_(ObjCBlock1 predicate) {
    return _lib._objc_msgSend_93(
        _id, _lib._sel_indexOfObjectPassingTest_1, predicate._impl);
  }

  int indexOfObjectWithOptions_passingTest_(int opts, ObjCBlock1 predicate) {
    return _lib._objc_msgSend_94(
        _id,
        _lib._sel_indexOfObjectWithOptions_passingTest_1,
        opts,
        predicate._impl);
  }

  int indexOfObjectAtIndexes_options_passingTest_(
      NSObject? s, int opts, ObjCBlock1 predicate) {
    return _lib._objc_msgSend_95(
        _id,
        _lib._sel_indexOfObjectAtIndexes_options_passingTest_1,
        s?._id ?? ffi.nullptr,
        opts,
        predicate._impl);
  }

  NSObject indexesOfObjectsPassingTest_(ObjCBlock1 predicate) {
    final _ret = _lib._objc_msgSend_96(
        _id, _lib._sel_indexesOfObjectsPassingTest_1, predicate._impl);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject indexesOfObjectsWithOptions_passingTest_(
      int opts, ObjCBlock1 predicate) {
    final _ret = _lib._objc_msgSend_97(
        _id,
        _lib._sel_indexesOfObjectsWithOptions_passingTest_1,
        opts,
        predicate._impl);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject indexesOfObjectsAtIndexes_options_passingTest_(
      NSObject? s, int opts, ObjCBlock1 predicate) {
    final _ret = _lib._objc_msgSend_98(
        _id,
        _lib._sel_indexesOfObjectsAtIndexes_options_passingTest_1,
        s?._id ?? ffi.nullptr,
        opts,
        predicate._impl);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject sortedArrayUsingComparator_(NSComparator cmptr) {
    final _ret = _lib._objc_msgSend_99(
        _id, _lib._sel_sortedArrayUsingComparator_1, cmptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject sortedArrayWithOptions_usingComparator_(
      int opts, NSComparator cmptr) {
    final _ret = _lib._objc_msgSend_100(
        _id, _lib._sel_sortedArrayWithOptions_usingComparator_1, opts, cmptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  int indexOfObject_inSortedRange_options_usingComparator_(
      NSObject obj, NSRange r, int opts, NSComparator cmp) {
    return _lib._objc_msgSend_101(
        _id,
        _lib._sel_indexOfObject_inSortedRange_options_usingComparator_1,
        obj._id,
        r,
        opts,
        cmp);
  }

  static NSArray array(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSArray1, _lib._sel_array1);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSArray arrayWithObject_(AVFAudio _lib, NSObject anObject) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSArray1, _lib._sel_arrayWithObject_1, anObject._id);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSArray arrayWithObjects_count_(
      AVFAudio _lib, ffi.Pointer<ffi.Pointer<ObjCObject>> objects, int cnt) {
    final _ret = _lib._objc_msgSend_82(
        _lib._class_NSArray1, _lib._sel_arrayWithObjects_count_1, objects, cnt);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSArray arrayWithObjects_(AVFAudio _lib, NSObject firstObj) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSArray1, _lib._sel_arrayWithObjects_1, firstObj._id);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  static NSArray arrayWithArray_(AVFAudio _lib, NSObject? array) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSArray1,
        _lib._sel_arrayWithArray_1, array?._id ?? ffi.nullptr);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray initWithObjects_(NSObject firstObj) {
    final _ret =
        _lib._objc_msgSend_13(_id, _lib._sel_initWithObjects_1, firstObj._id);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray initWithArray_(NSObject? array) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_initWithArray_1, array?._id ?? ffi.nullptr);
    return NSArray._(_ret, _lib, retain: true, release: true);
  }

  NSArray initWithArray_copyItems_(NSObject? array, bool flag) {
    final _ret = _lib._objc_msgSend_102(_id,
        _lib._sel_initWithArray_copyItems_1, array?._id ?? ffi.nullptr, flag);
    return NSArray._(_ret, _lib, retain: false, release: true);
  }

  NSObject initWithContentsOfURL_error_(
      NSObject? url, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_103(
        _id,
        _lib._sel_initWithContentsOfURL_error_1,
        url?._id ?? ffi.nullptr,
        error);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject arrayWithContentsOfURL_error_(AVFAudio _lib, NSObject? url,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_103(
        _lib._class_NSArray1,
        _lib._sel_arrayWithContentsOfURL_error_1,
        url?._id ?? ffi.nullptr,
        error);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject differenceFromArray_withOptions_usingEquivalenceTest_(
      NSObject? other, int options, ObjCBlock3 block) {
    final _ret = _lib._objc_msgSend_104(
        _id,
        _lib._sel_differenceFromArray_withOptions_usingEquivalenceTest_1,
        other?._id ?? ffi.nullptr,
        options,
        block._impl);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject differenceFromArray_withOptions_(NSObject? other, int options) {
    final _ret = _lib._objc_msgSend_105(
        _id,
        _lib._sel_differenceFromArray_withOptions_1,
        other?._id ?? ffi.nullptr,
        options);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject differenceFromArray_(NSObject? other) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_differenceFromArray_1, other?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject arrayByApplyingDifference_(NSObject? difference) {
    final _ret = _lib._objc_msgSend_13(_id,
        _lib._sel_arrayByApplyingDifference_1, difference?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void getObjects_(ffi.Pointer<ffi.Pointer<ObjCObject>> objects) {
    return _lib._objc_msgSend_106(_id, _lib._sel_getObjects_1, objects);
  }

  static NSObject arrayWithContentsOfFile_(AVFAudio _lib, NSObject? path) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSArray1,
        _lib._sel_arrayWithContentsOfFile_1, path?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject arrayWithContentsOfURL_(AVFAudio _lib, NSObject? url) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSArray1,
        _lib._sel_arrayWithContentsOfURL_1, url?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject initWithContentsOfFile_(NSObject? path) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_initWithContentsOfFile_1, path?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject initWithContentsOfURL_(NSObject? url) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_initWithContentsOfURL_1, url?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool writeToFile_atomically_(NSObject? path, bool useAuxiliaryFile) {
    return _lib._objc_msgSend_107(_id, _lib._sel_writeToFile_atomically_1,
        path?._id ?? ffi.nullptr, useAuxiliaryFile);
  }

  bool writeToURL_atomically_(NSObject? url, bool atomically) {
    return _lib._objc_msgSend_107(_id, _lib._sel_writeToURL_atomically_1,
        url?._id ?? ffi.nullptr, atomically);
  }

  NSObject pathsMatchingExtensions_(NSObject? filterTypes) {
    final _ret = _lib._objc_msgSend_13(_id, _lib._sel_pathsMatchingExtensions_1,
        filterTypes?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSObject valueForKey_(NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_valueForKey_1, key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  @override
  void setValue_forKey_(NSObject value, NSObject? key) {
    return _lib._objc_msgSend_19(
        _id, _lib._sel_setValue_forKey_1, value._id, key?._id ?? ffi.nullptr);
  }

  void addObserver_toObjectsAtIndexes_forKeyPath_options_context_(
      NSObject? observer,
      NSObject? indexes,
      NSObject? keyPath,
      int options,
      ffi.Pointer<ffi.Void> context) {
    return _lib._objc_msgSend_108(
        _id,
        _lib._sel_addObserver_toObjectsAtIndexes_forKeyPath_options_context_1,
        observer?._id ?? ffi.nullptr,
        indexes?._id ?? ffi.nullptr,
        keyPath?._id ?? ffi.nullptr,
        options,
        context);
  }

  void removeObserver_fromObjectsAtIndexes_forKeyPath_context_(
      NSObject? observer,
      NSObject? indexes,
      NSObject? keyPath,
      ffi.Pointer<ffi.Void> context) {
    return _lib._objc_msgSend_22(
        _id,
        _lib._sel_removeObserver_fromObjectsAtIndexes_forKeyPath_context_1,
        observer?._id ?? ffi.nullptr,
        indexes?._id ?? ffi.nullptr,
        keyPath?._id ?? ffi.nullptr,
        context);
  }

  void removeObserver_fromObjectsAtIndexes_forKeyPath_(
      NSObject? observer, NSObject? indexes, NSObject? keyPath) {
    return _lib._objc_msgSend_109(
        _id,
        _lib._sel_removeObserver_fromObjectsAtIndexes_forKeyPath_1,
        observer?._id ?? ffi.nullptr,
        indexes?._id ?? ffi.nullptr,
        keyPath?._id ?? ffi.nullptr);
  }

  @override
  void addObserver_forKeyPath_options_context_(NSObject? observer,
      NSObject? keyPath, int options, ffi.Pointer<ffi.Void> context) {
    return _lib._objc_msgSend_23(
        _id,
        _lib._sel_addObserver_forKeyPath_options_context_1,
        observer?._id ?? ffi.nullptr,
        keyPath?._id ?? ffi.nullptr,
        options,
        context);
  }

  @override
  void removeObserver_forKeyPath_context_(
      NSObject? observer, NSObject? keyPath, ffi.Pointer<ffi.Void> context) {
    return _lib._objc_msgSend_24(
        _id,
        _lib._sel_removeObserver_forKeyPath_context_1,
        observer?._id ?? ffi.nullptr,
        keyPath?._id ?? ffi.nullptr,
        context);
  }

  @override
  void removeObserver_forKeyPath_(NSObject? observer, NSObject? keyPath) {
    return _lib._objc_msgSend_19(_id, _lib._sel_removeObserver_forKeyPath_1,
        observer?._id ?? ffi.nullptr, keyPath?._id ?? ffi.nullptr);
  }

  NSObject sortedArrayUsingDescriptors_(NSObject? sortDescriptors) {
    final _ret = _lib._objc_msgSend_13(
        _id,
        _lib._sel_sortedArrayUsingDescriptors_1,
        sortDescriptors?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject filteredArrayUsingPredicate_(NSObject? predicate) {
    final _ret = _lib._objc_msgSend_13(_id,
        _lib._sel_filteredArrayUsingPredicate_1, predicate?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSArray new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSArray1, _lib._sel_new1);
    return NSArray._(_ret, _lib, retain: false, release: true);
  }

  static NSArray alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSArray1, _lib._sel_alloc1);
    return NSArray._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSArray1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSArray1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSArray1, _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSArray1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSArray1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSArray1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSArray1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSArray1, _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSArray1, _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

void _ObjCBlock_fnPtrTrampoline(ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0, int arg1, ffi.Pointer<ffi.Bool> arg2) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ObjCObject> arg0, NSUInteger arg1,
                  ffi.Pointer<ffi.Bool> arg2)>>()
      .asFunction<
          void Function(ffi.Pointer<ObjCObject> arg0, int arg1,
              ffi.Pointer<ffi.Bool> arg2)>()(arg0, arg1, arg2);
}

final _ObjCBlock_closureRegistry = <int, Function>{};
int _ObjCBlock_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock_registerClosure(Function fn) {
  final id = ++_ObjCBlock_closureRegistryIndex;
  _ObjCBlock_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock_closureTrampoline(ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0, int arg1, ffi.Pointer<ffi.Bool> arg2) {
  return _ObjCBlock_closureRegistry[block.ref.target.address]!(
      arg0, arg1, arg2);
}

class ObjCBlock {
  final ffi.Pointer<_ObjCBlock> _impl;
  final AVFAudio _lib;
  ObjCBlock._(this._impl, this._lib);
  ObjCBlock.fromFunctionPointer(
      this._lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ObjCObject> arg0,
                      NSUInteger arg1, ffi.Pointer<ffi.Bool> arg2)>>
          ptr)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                    ffi.Void Function(
                        ffi.Pointer<_ObjCBlock> block,
                        ffi.Pointer<ObjCObject> arg0,
                        NSUInteger arg1,
                        ffi.Pointer<ffi.Bool> arg2)>(_ObjCBlock_fnPtrTrampoline)
                .cast(),
            ptr.cast());
  ObjCBlock.fromFunction(
      this._lib,
      void Function(ffi.Pointer<ObjCObject> arg0, int arg1,
              ffi.Pointer<ffi.Bool> arg2)
          fn)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<_ObjCBlock> block,
                            ffi.Pointer<ObjCObject> arg0,
                            NSUInteger arg1,
                            ffi.Pointer<ffi.Bool> arg2)>(
                    _ObjCBlock_closureTrampoline)
                .cast(),
            _ObjCBlock_registerClosure(fn));
  void call(
      ffi.Pointer<ObjCObject> arg0, int arg1, ffi.Pointer<ffi.Bool> arg2) {
    return _impl.ref.invoke
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<_ObjCBlock> block,
                    ffi.Pointer<ObjCObject> arg0,
                    NSUInteger arg1,
                    ffi.Pointer<ffi.Bool> arg2)>>()
        .asFunction<
            void Function(
                ffi.Pointer<_ObjCBlock> block,
                ffi.Pointer<ObjCObject> arg0,
                int arg1,
                ffi.Pointer<ffi.Bool> arg2)>()(_impl, arg0, arg1, arg2);
  }

  ffi.Pointer<_ObjCBlock> get pointer => _impl;
}

class _ObjCBlockDesc extends ffi.Struct {
  @ffi.UnsignedLong()
  external int reserved;

  @ffi.UnsignedLong()
  external int size;

  external ffi.Pointer<ffi.Void> copy_helper;

  external ffi.Pointer<ffi.Void> dispose_helper;

  external ffi.Pointer<ffi.Char> signature;
}

class _ObjCBlock extends ffi.Struct {
  external ffi.Pointer<ffi.Void> isa;

  @ffi.Int()
  external int flags;

  @ffi.Int()
  external int reserved;

  external ffi.Pointer<ffi.Void> invoke;

  external ffi.Pointer<_ObjCBlockDesc> descriptor;

  external ffi.Pointer<ffi.Void> target;
}

abstract class NSEnumerationOptions {
  static const int NSEnumerationConcurrent = 1;
  static const int NSEnumerationReverse = 2;
}

bool _ObjCBlock1_fnPtrTrampoline(ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0, int arg1, ffi.Pointer<ffi.Bool> arg2) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Bool Function(ffi.Pointer<ObjCObject> arg0, NSUInteger arg1,
                  ffi.Pointer<ffi.Bool> arg2)>>()
      .asFunction<
          bool Function(ffi.Pointer<ObjCObject> arg0, int arg1,
              ffi.Pointer<ffi.Bool> arg2)>()(arg0, arg1, arg2);
}

final _ObjCBlock1_closureRegistry = <int, Function>{};
int _ObjCBlock1_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock1_registerClosure(Function fn) {
  final id = ++_ObjCBlock1_closureRegistryIndex;
  _ObjCBlock1_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

bool _ObjCBlock1_closureTrampoline(ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0, int arg1, ffi.Pointer<ffi.Bool> arg2) {
  return _ObjCBlock1_closureRegistry[block.ref.target.address]!(
      arg0, arg1, arg2);
}

class ObjCBlock1 {
  final ffi.Pointer<_ObjCBlock> _impl;
  final AVFAudio _lib;
  ObjCBlock1._(this._impl, this._lib);
  ObjCBlock1.fromFunctionPointer(
      this._lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Bool Function(ffi.Pointer<ObjCObject> arg0,
                      NSUInteger arg1, ffi.Pointer<ffi.Bool> arg2)>>
          ptr)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                        ffi.Bool Function(
                            ffi.Pointer<_ObjCBlock> block,
                            ffi.Pointer<ObjCObject> arg0,
                            NSUInteger arg1,
                            ffi.Pointer<ffi.Bool> arg2)>(
                    _ObjCBlock1_fnPtrTrampoline, false)
                .cast(),
            ptr.cast());
  ObjCBlock1.fromFunction(
      this._lib,
      bool Function(ffi.Pointer<ObjCObject> arg0, int arg1,
              ffi.Pointer<ffi.Bool> arg2)
          fn)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                        ffi.Bool Function(
                            ffi.Pointer<_ObjCBlock> block,
                            ffi.Pointer<ObjCObject> arg0,
                            NSUInteger arg1,
                            ffi.Pointer<ffi.Bool> arg2)>(
                    _ObjCBlock1_closureTrampoline, false)
                .cast(),
            _ObjCBlock1_registerClosure(fn));
  bool call(
      ffi.Pointer<ObjCObject> arg0, int arg1, ffi.Pointer<ffi.Bool> arg2) {
    return _impl.ref.invoke
        .cast<
            ffi.NativeFunction<
                ffi.Bool Function(
                    ffi.Pointer<_ObjCBlock> block,
                    ffi.Pointer<ObjCObject> arg0,
                    NSUInteger arg1,
                    ffi.Pointer<ffi.Bool> arg2)>>()
        .asFunction<
            bool Function(
                ffi.Pointer<_ObjCBlock> block,
                ffi.Pointer<ObjCObject> arg0,
                int arg1,
                ffi.Pointer<ffi.Bool> arg2)>()(_impl, arg0, arg1, arg2);
  }

  ffi.Pointer<_ObjCBlock> get pointer => _impl;
}

typedef NSComparator = ffi.Pointer<_ObjCBlock>;
int _ObjCBlock2_fnPtrTrampoline(ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ObjCObject> arg0,
                  ffi.Pointer<ObjCObject> arg1)>>()
      .asFunction<
          int Function(ffi.Pointer<ObjCObject> arg0,
              ffi.Pointer<ObjCObject> arg1)>()(arg0, arg1);
}

final _ObjCBlock2_closureRegistry = <int, Function>{};
int _ObjCBlock2_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock2_registerClosure(Function fn) {
  final id = ++_ObjCBlock2_closureRegistryIndex;
  _ObjCBlock2_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

int _ObjCBlock2_closureTrampoline(ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1) {
  return _ObjCBlock2_closureRegistry[block.ref.target.address]!(arg0, arg1);
}

class ObjCBlock2 {
  final ffi.Pointer<_ObjCBlock> _impl;
  final AVFAudio _lib;
  ObjCBlock2._(this._impl, this._lib);
  ObjCBlock2.fromFunctionPointer(
      this._lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int32 Function(ffi.Pointer<ObjCObject> arg0,
                      ffi.Pointer<ObjCObject> arg1)>>
          ptr)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                        ffi.Int32 Function(
                            ffi.Pointer<_ObjCBlock> block,
                            ffi.Pointer<ObjCObject> arg0,
                            ffi.Pointer<ObjCObject> arg1)>(
                    _ObjCBlock2_fnPtrTrampoline, 0)
                .cast(),
            ptr.cast());
  ObjCBlock2.fromFunction(
      this._lib,
      int Function(ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1)
          fn)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                        ffi.Int32 Function(
                            ffi.Pointer<_ObjCBlock> block,
                            ffi.Pointer<ObjCObject> arg0,
                            ffi.Pointer<ObjCObject> arg1)>(
                    _ObjCBlock2_closureTrampoline, 0)
                .cast(),
            _ObjCBlock2_registerClosure(fn));
  int call(ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1) {
    return _impl.ref.invoke
        .cast<
            ffi.NativeFunction<
                ffi.Int32 Function(
                    ffi.Pointer<_ObjCBlock> block,
                    ffi.Pointer<ObjCObject> arg0,
                    ffi.Pointer<ObjCObject> arg1)>>()
        .asFunction<
            int Function(
                ffi.Pointer<_ObjCBlock> block,
                ffi.Pointer<ObjCObject> arg0,
                ffi.Pointer<ObjCObject> arg1)>()(_impl, arg0, arg1);
  }

  ffi.Pointer<_ObjCBlock> get pointer => _impl;
}

abstract class NSSortOptions {
  static const int NSSortConcurrent = 1;
  static const int NSSortStable = 16;
}

abstract class NSBinarySearchingOptions {
  static const int NSBinarySearchingFirstEqual = 256;
  static const int NSBinarySearchingLastEqual = 512;
  static const int NSBinarySearchingInsertionIndex = 1024;
}

abstract class NSOrderedCollectionDifferenceCalculationOptions {
  static const int NSOrderedCollectionDifferenceCalculationOmitInsertedObjects =
      1;
  static const int NSOrderedCollectionDifferenceCalculationOmitRemovedObjects =
      2;
  static const int NSOrderedCollectionDifferenceCalculationInferMoves = 4;
}

bool _ObjCBlock3_fnPtrTrampoline(ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Bool Function(ffi.Pointer<ObjCObject> arg0,
                  ffi.Pointer<ObjCObject> arg1)>>()
      .asFunction<
          bool Function(ffi.Pointer<ObjCObject> arg0,
              ffi.Pointer<ObjCObject> arg1)>()(arg0, arg1);
}

final _ObjCBlock3_closureRegistry = <int, Function>{};
int _ObjCBlock3_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock3_registerClosure(Function fn) {
  final id = ++_ObjCBlock3_closureRegistryIndex;
  _ObjCBlock3_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

bool _ObjCBlock3_closureTrampoline(ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1) {
  return _ObjCBlock3_closureRegistry[block.ref.target.address]!(arg0, arg1);
}

class ObjCBlock3 {
  final ffi.Pointer<_ObjCBlock> _impl;
  final AVFAudio _lib;
  ObjCBlock3._(this._impl, this._lib);
  ObjCBlock3.fromFunctionPointer(
      this._lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Bool Function(ffi.Pointer<ObjCObject> arg0,
                      ffi.Pointer<ObjCObject> arg1)>>
          ptr)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                        ffi.Bool Function(
                            ffi.Pointer<_ObjCBlock> block,
                            ffi.Pointer<ObjCObject> arg0,
                            ffi.Pointer<ObjCObject> arg1)>(
                    _ObjCBlock3_fnPtrTrampoline, false)
                .cast(),
            ptr.cast());
  ObjCBlock3.fromFunction(
      this._lib,
      bool Function(ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1)
          fn)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                        ffi.Bool Function(
                            ffi.Pointer<_ObjCBlock> block,
                            ffi.Pointer<ObjCObject> arg0,
                            ffi.Pointer<ObjCObject> arg1)>(
                    _ObjCBlock3_closureTrampoline, false)
                .cast(),
            _ObjCBlock3_registerClosure(fn));
  bool call(ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1) {
    return _impl.ref.invoke
        .cast<
            ffi.NativeFunction<
                ffi.Bool Function(
                    ffi.Pointer<_ObjCBlock> block,
                    ffi.Pointer<ObjCObject> arg0,
                    ffi.Pointer<ObjCObject> arg1)>>()
        .asFunction<
            bool Function(
                ffi.Pointer<_ObjCBlock> block,
                ffi.Pointer<ObjCObject> arg0,
                ffi.Pointer<ObjCObject> arg1)>()(_impl, arg0, arg1);
  }

  ffi.Pointer<_ObjCBlock> get pointer => _impl;
}

class NSMutableArray extends NSArray {
  NSMutableArray._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSMutableArray] that points to the same underlying object as [other].
  static NSMutableArray castFrom<T extends _ObjCWrapper>(T other) {
    return NSMutableArray._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSMutableArray] that wraps the given raw object pointer.
  static NSMutableArray castFromPointer(
      AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSMutableArray._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSMutableArray].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSMutableArray1);
  }

  void addObject_(NSObject anObject) {
    return _lib._objc_msgSend_8(_id, _lib._sel_addObject_1, anObject._id);
  }

  void insertObject_atIndex_(NSObject anObject, int index) {
    return _lib._objc_msgSend_110(
        _id, _lib._sel_insertObject_atIndex_1, anObject._id, index);
  }

  void removeLastObject() {
    return _lib._objc_msgSend_1(_id, _lib._sel_removeLastObject1);
  }

  void removeObjectAtIndex_(int index) {
    return _lib._objc_msgSend_111(_id, _lib._sel_removeObjectAtIndex_1, index);
  }

  void replaceObjectAtIndex_withObject_(int index, NSObject anObject) {
    return _lib._objc_msgSend_41(
        _id, _lib._sel_replaceObjectAtIndex_withObject_1, index, anObject._id);
  }

  @override
  NSMutableArray init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  NSMutableArray initWithCapacity_(int numItems) {
    final _ret =
        _lib._objc_msgSend_65(_id, _lib._sel_initWithCapacity_1, numItems);
    return NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableArray initWithCoder_(NSObject? coder) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_initWithCoder_1, coder?._id ?? ffi.nullptr);
    return NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  void addObjectsFromArray_(NSObject? otherArray) {
    return _lib._objc_msgSend_8(
        _id, _lib._sel_addObjectsFromArray_1, otherArray?._id ?? ffi.nullptr);
  }

  void exchangeObjectAtIndex_withObjectAtIndex_(int idx1, int idx2) {
    return _lib._objc_msgSend_112(
        _id, _lib._sel_exchangeObjectAtIndex_withObjectAtIndex_1, idx1, idx2);
  }

  void removeAllObjects() {
    return _lib._objc_msgSend_1(_id, _lib._sel_removeAllObjects1);
  }

  void removeObject_inRange_(NSObject anObject, NSRange range) {
    return _lib._objc_msgSend_113(
        _id, _lib._sel_removeObject_inRange_1, anObject._id, range);
  }

  void removeObject_(NSObject anObject) {
    return _lib._objc_msgSend_8(_id, _lib._sel_removeObject_1, anObject._id);
  }

  void removeObjectIdenticalTo_inRange_(NSObject anObject, NSRange range) {
    return _lib._objc_msgSend_113(
        _id, _lib._sel_removeObjectIdenticalTo_inRange_1, anObject._id, range);
  }

  void removeObjectIdenticalTo_(NSObject anObject) {
    return _lib._objc_msgSend_8(
        _id, _lib._sel_removeObjectIdenticalTo_1, anObject._id);
  }

  void removeObjectsFromIndices_numIndices_(
      ffi.Pointer<NSUInteger> indices, int cnt) {
    return _lib._objc_msgSend_114(
        _id, _lib._sel_removeObjectsFromIndices_numIndices_1, indices, cnt);
  }

  void removeObjectsInArray_(NSObject? otherArray) {
    return _lib._objc_msgSend_8(
        _id, _lib._sel_removeObjectsInArray_1, otherArray?._id ?? ffi.nullptr);
  }

  void removeObjectsInRange_(NSRange range) {
    return _lib._objc_msgSend_115(_id, _lib._sel_removeObjectsInRange_1, range);
  }

  void replaceObjectsInRange_withObjectsFromArray_range_(
      NSRange range, NSObject? otherArray, NSRange otherRange) {
    return _lib._objc_msgSend_116(
        _id,
        _lib._sel_replaceObjectsInRange_withObjectsFromArray_range_1,
        range,
        otherArray?._id ?? ffi.nullptr,
        otherRange);
  }

  void replaceObjectsInRange_withObjectsFromArray_(
      NSRange range, NSObject? otherArray) {
    return _lib._objc_msgSend_117(
        _id,
        _lib._sel_replaceObjectsInRange_withObjectsFromArray_1,
        range,
        otherArray?._id ?? ffi.nullptr);
  }

  void setArray_(NSObject? otherArray) {
    return _lib._objc_msgSend_8(
        _id, _lib._sel_setArray_1, otherArray?._id ?? ffi.nullptr);
  }

  void sortUsingFunction_context_(
      ffi.Pointer<
              ffi.NativeFunction<
                  NSInteger Function(ffi.Pointer<ObjCObject>,
                      ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Void>)>>
          compare,
      ffi.Pointer<ffi.Void> context) {
    return _lib._objc_msgSend_118(
        _id, _lib._sel_sortUsingFunction_context_1, compare, context);
  }

  void sortUsingSelector_(ffi.Pointer<ObjCSel> comparator) {
    return _lib._objc_msgSend_6(_id, _lib._sel_sortUsingSelector_1, comparator);
  }

  void insertObjects_atIndexes_(NSObject? objects, NSObject? indexes) {
    return _lib._objc_msgSend_19(_id, _lib._sel_insertObjects_atIndexes_1,
        objects?._id ?? ffi.nullptr, indexes?._id ?? ffi.nullptr);
  }

  void removeObjectsAtIndexes_(NSObject? indexes) {
    return _lib._objc_msgSend_8(
        _id, _lib._sel_removeObjectsAtIndexes_1, indexes?._id ?? ffi.nullptr);
  }

  void replaceObjectsAtIndexes_withObjects_(
      NSObject? indexes, NSObject? objects) {
    return _lib._objc_msgSend_19(
        _id,
        _lib._sel_replaceObjectsAtIndexes_withObjects_1,
        indexes?._id ?? ffi.nullptr,
        objects?._id ?? ffi.nullptr);
  }

  void setObject_atIndexedSubscript_(NSObject obj, int idx) {
    return _lib._objc_msgSend_110(
        _id, _lib._sel_setObject_atIndexedSubscript_1, obj._id, idx);
  }

  void sortUsingComparator_(NSComparator cmptr) {
    return _lib._objc_msgSend_119(_id, _lib._sel_sortUsingComparator_1, cmptr);
  }

  void sortWithOptions_usingComparator_(int opts, NSComparator cmptr) {
    return _lib._objc_msgSend_120(
        _id, _lib._sel_sortWithOptions_usingComparator_1, opts, cmptr);
  }

  static NSMutableArray arrayWithCapacity_(AVFAudio _lib, int numItems) {
    final _ret = _lib._objc_msgSend_65(
        _lib._class_NSMutableArray1, _lib._sel_arrayWithCapacity_1, numItems);
    return NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject arrayWithContentsOfFile_(AVFAudio _lib, NSObject? path) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSMutableArray1,
        _lib._sel_arrayWithContentsOfFile_1, path?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject arrayWithContentsOfURL_(AVFAudio _lib, NSObject? url) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSMutableArray1,
        _lib._sel_arrayWithContentsOfURL_1, url?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSObject initWithContentsOfFile_(NSObject? path) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_initWithContentsOfFile_1, path?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSObject initWithContentsOfURL_(NSObject? url) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_initWithContentsOfURL_1, url?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void applyDifference_(NSObject? difference) {
    return _lib._objc_msgSend_8(
        _id, _lib._sel_applyDifference_1, difference?._id ?? ffi.nullptr);
  }

  void sortUsingDescriptors_(NSObject? sortDescriptors) {
    return _lib._objc_msgSend_8(_id, _lib._sel_sortUsingDescriptors_1,
        sortDescriptors?._id ?? ffi.nullptr);
  }

  void filterUsingPredicate_(NSObject? predicate) {
    return _lib._objc_msgSend_8(
        _id, _lib._sel_filterUsingPredicate_1, predicate?._id ?? ffi.nullptr);
  }

  static NSMutableArray array(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSMutableArray1, _lib._sel_array1);
    return NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableArray arrayWithObject_(AVFAudio _lib, NSObject anObject) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSMutableArray1, _lib._sel_arrayWithObject_1, anObject._id);
    return NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableArray arrayWithObjects_count_(
      AVFAudio _lib, ffi.Pointer<ffi.Pointer<ObjCObject>> objects, int cnt) {
    final _ret = _lib._objc_msgSend_82(_lib._class_NSMutableArray1,
        _lib._sel_arrayWithObjects_count_1, objects, cnt);
    return NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableArray arrayWithObjects_(AVFAudio _lib, NSObject firstObj) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSMutableArray1,
        _lib._sel_arrayWithObjects_1, firstObj._id);
    return NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableArray arrayWithArray_(AVFAudio _lib, NSObject? array) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSMutableArray1,
        _lib._sel_arrayWithArray_1, array?._id ?? ffi.nullptr);
    return NSMutableArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject arrayWithContentsOfURL_error_(AVFAudio _lib, NSObject? url,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_103(
        _lib._class_NSMutableArray1,
        _lib._sel_arrayWithContentsOfURL_error_1,
        url?._id ?? ffi.nullptr,
        error);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableArray new1(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSMutableArray1, _lib._sel_new1);
    return NSMutableArray._(_ret, _lib, retain: false, release: true);
  }

  static NSMutableArray alloc(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSMutableArray1, _lib._sel_alloc1);
    return NSMutableArray._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSMutableArray1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSMutableArray1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(_lib._class_NSMutableArray1,
        _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSMutableArray1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSMutableArray1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSMutableArray1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSMutableArray1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSMutableArray1, _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSMutableArray1, _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSItemProvider extends NSObject {
  NSItemProvider._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSItemProvider] that points to the same underlying object as [other].
  static NSItemProvider castFrom<T extends _ObjCWrapper>(T other) {
    return NSItemProvider._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSItemProvider] that wraps the given raw object pointer.
  static NSItemProvider castFromPointer(
      AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSItemProvider._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSItemProvider].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSItemProvider1);
  }

  @override
  NSItemProvider init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSItemProvider._(_ret, _lib, retain: true, release: true);
  }

  void registerDataRepresentationForTypeIdentifier_visibility_loadHandler_(
      NSObject? typeIdentifier, int visibility, ObjCBlock4 loadHandler) {
    return _lib._objc_msgSend_121(
        _id,
        _lib._sel_registerDataRepresentationForTypeIdentifier_visibility_loadHandler_1,
        typeIdentifier?._id ?? ffi.nullptr,
        visibility,
        loadHandler._impl);
  }

  void
      registerFileRepresentationForTypeIdentifier_fileOptions_visibility_loadHandler_(
          NSObject? typeIdentifier,
          int fileOptions,
          int visibility,
          ObjCBlock6 loadHandler) {
    return _lib._objc_msgSend_122(
        _id,
        _lib._sel_registerFileRepresentationForTypeIdentifier_fileOptions_visibility_loadHandler_1,
        typeIdentifier?._id ?? ffi.nullptr,
        fileOptions,
        visibility,
        loadHandler._impl);
  }

  NSObject? get registeredTypeIdentifiers {
    final _ret =
        _lib._objc_msgSend_2(_id, _lib._sel_registeredTypeIdentifiers1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject registeredTypeIdentifiersWithFileOptions_(int fileOptions) {
    final _ret = _lib._objc_msgSend_123(
        _id, _lib._sel_registeredTypeIdentifiersWithFileOptions_1, fileOptions);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool hasItemConformingToTypeIdentifier_(NSObject? typeIdentifier) {
    return _lib._objc_msgSend_0(
        _id,
        _lib._sel_hasItemConformingToTypeIdentifier_1,
        typeIdentifier?._id ?? ffi.nullptr);
  }

  bool hasRepresentationConformingToTypeIdentifier_fileOptions_(
      NSObject? typeIdentifier, int fileOptions) {
    return _lib._objc_msgSend_124(
        _id,
        _lib._sel_hasRepresentationConformingToTypeIdentifier_fileOptions_1,
        typeIdentifier?._id ?? ffi.nullptr,
        fileOptions);
  }

  NSObject loadDataRepresentationForTypeIdentifier_completionHandler_(
      NSObject? typeIdentifier, ObjCBlock5 completionHandler) {
    final _ret = _lib._objc_msgSend_125(
        _id,
        _lib._sel_loadDataRepresentationForTypeIdentifier_completionHandler_1,
        typeIdentifier?._id ?? ffi.nullptr,
        completionHandler._impl);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject loadFileRepresentationForTypeIdentifier_completionHandler_(
      NSObject? typeIdentifier, ObjCBlock5 completionHandler) {
    final _ret = _lib._objc_msgSend_125(
        _id,
        _lib._sel_loadFileRepresentationForTypeIdentifier_completionHandler_1,
        typeIdentifier?._id ?? ffi.nullptr,
        completionHandler._impl);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject loadInPlaceFileRepresentationForTypeIdentifier_completionHandler_(
      NSObject? typeIdentifier, ObjCBlock7 completionHandler) {
    final _ret = _lib._objc_msgSend_126(
        _id,
        _lib._sel_loadInPlaceFileRepresentationForTypeIdentifier_completionHandler_1,
        typeIdentifier?._id ?? ffi.nullptr,
        completionHandler._impl);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get suggestedName {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_suggestedName1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set suggestedName(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setSuggestedName_1, value?._id ?? ffi.nullptr);
  }

  NSItemProvider initWithObject_(NSObject? object) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_initWithObject_1, object?._id ?? ffi.nullptr);
    return NSItemProvider._(_ret, _lib, retain: true, release: true);
  }

  void registerObject_visibility_(NSObject? object, int visibility) {
    return _lib._objc_msgSend_127(_id, _lib._sel_registerObject_visibility_1,
        object?._id ?? ffi.nullptr, visibility);
  }

  void registerObjectOfClass_visibility_loadHandler_(
      NSObject? aClass, int visibility, ObjCBlock4 loadHandler) {
    return _lib._objc_msgSend_121(
        _id,
        _lib._sel_registerObjectOfClass_visibility_loadHandler_1,
        aClass?._id ?? ffi.nullptr,
        visibility,
        loadHandler._impl);
  }

  bool canLoadObjectOfClass_(NSObject? aClass) {
    return _lib._objc_msgSend_0(
        _id, _lib._sel_canLoadObjectOfClass_1, aClass?._id ?? ffi.nullptr);
  }

  NSObject loadObjectOfClass_completionHandler_(
      NSObject? aClass, ObjCBlock5 completionHandler) {
    final _ret = _lib._objc_msgSend_125(
        _id,
        _lib._sel_loadObjectOfClass_completionHandler_1,
        aClass?._id ?? ffi.nullptr,
        completionHandler._impl);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSItemProvider initWithItem_typeIdentifier_(
      NSObject? item, NSObject? typeIdentifier) {
    final _ret = _lib._objc_msgSend_39(
        _id,
        _lib._sel_initWithItem_typeIdentifier_1,
        item?._id ?? ffi.nullptr,
        typeIdentifier?._id ?? ffi.nullptr);
    return NSItemProvider._(_ret, _lib, retain: true, release: true);
  }

  NSItemProvider initWithContentsOfURL_(NSObject? fileURL) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_initWithContentsOfURL_1, fileURL?._id ?? ffi.nullptr);
    return NSItemProvider._(_ret, _lib, retain: true, release: true);
  }

  void registerItemForTypeIdentifier_loadHandler_(
      NSObject? typeIdentifier, NSItemProviderLoadHandler loadHandler) {
    return _lib._objc_msgSend_128(
        _id,
        _lib._sel_registerItemForTypeIdentifier_loadHandler_1,
        typeIdentifier?._id ?? ffi.nullptr,
        loadHandler);
  }

  void loadItemForTypeIdentifier_options_completionHandler_(
      NSObject? typeIdentifier,
      NSObject? options,
      NSItemProviderCompletionHandler completionHandler) {
    return _lib._objc_msgSend_129(
        _id,
        _lib._sel_loadItemForTypeIdentifier_options_completionHandler_1,
        typeIdentifier?._id ?? ffi.nullptr,
        options?._id ?? ffi.nullptr,
        completionHandler);
  }

  NSItemProviderLoadHandler get previewImageHandler {
    return _lib._objc_msgSend_130(_id, _lib._sel_previewImageHandler1);
  }

  set previewImageHandler(NSItemProviderLoadHandler value) {
    _lib._objc_msgSend_131(_id, _lib._sel_setPreviewImageHandler_1, value);
  }

  void loadPreviewImageWithOptions_completionHandler_(
      NSObject? options, NSItemProviderCompletionHandler completionHandler) {
    return _lib._objc_msgSend_132(
        _id,
        _lib._sel_loadPreviewImageWithOptions_completionHandler_1,
        options?._id ?? ffi.nullptr,
        completionHandler);
  }

  static NSItemProvider new1(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSItemProvider1, _lib._sel_new1);
    return NSItemProvider._(_ret, _lib, retain: false, release: true);
  }

  static NSItemProvider alloc(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSItemProvider1, _lib._sel_alloc1);
    return NSItemProvider._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSItemProvider1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSItemProvider1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(_lib._class_NSItemProvider1,
        _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSItemProvider1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSItemProvider1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSItemProvider1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSItemProvider1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSItemProvider1, _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSItemProvider1, _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

abstract class NSItemProviderRepresentationVisibility {
  static const int NSItemProviderRepresentationVisibilityAll = 0;
  static const int NSItemProviderRepresentationVisibilityTeam = 1;
  static const int NSItemProviderRepresentationVisibilityGroup = 2;
  static const int NSItemProviderRepresentationVisibilityOwnProcess = 3;
}

ffi.Pointer<ObjCObject> _ObjCBlock4_fnPtrTrampoline(
    ffi.Pointer<_ObjCBlock> block, ffi.Pointer<_ObjCBlock> arg0) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Pointer<ObjCObject> Function(ffi.Pointer<_ObjCBlock> arg0)>>()
      .asFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<_ObjCBlock> arg0)>()(arg0);
}

final _ObjCBlock4_closureRegistry = <int, Function>{};
int _ObjCBlock4_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock4_registerClosure(Function fn) {
  final id = ++_ObjCBlock4_closureRegistryIndex;
  _ObjCBlock4_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

ffi.Pointer<ObjCObject> _ObjCBlock4_closureTrampoline(
    ffi.Pointer<_ObjCBlock> block, ffi.Pointer<_ObjCBlock> arg0) {
  return _ObjCBlock4_closureRegistry[block.ref.target.address]!(arg0);
}

class ObjCBlock4 {
  final ffi.Pointer<_ObjCBlock> _impl;
  final AVFAudio _lib;
  ObjCBlock4._(this._impl, this._lib);
  ObjCBlock4.fromFunctionPointer(
      this._lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<ObjCObject> Function(
                      ffi.Pointer<_ObjCBlock> arg0)>>
          ptr)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                        ffi.Pointer<ObjCObject> Function(
                            ffi.Pointer<_ObjCBlock> block,
                            ffi.Pointer<_ObjCBlock> arg0)>(
                    _ObjCBlock4_fnPtrTrampoline)
                .cast(),
            ptr.cast());
  ObjCBlock4.fromFunction(this._lib,
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<_ObjCBlock> arg0) fn)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                        ffi.Pointer<ObjCObject> Function(
                            ffi.Pointer<_ObjCBlock> block,
                            ffi.Pointer<_ObjCBlock> arg0)>(
                    _ObjCBlock4_closureTrampoline)
                .cast(),
            _ObjCBlock4_registerClosure(fn));
  ffi.Pointer<ObjCObject> call(ffi.Pointer<_ObjCBlock> arg0) {
    return _impl.ref.invoke
        .cast<
            ffi.NativeFunction<
                ffi.Pointer<ObjCObject> Function(ffi.Pointer<_ObjCBlock> block,
                    ffi.Pointer<_ObjCBlock> arg0)>>()
        .asFunction<
            ffi.Pointer<ObjCObject> Function(ffi.Pointer<_ObjCBlock> block,
                ffi.Pointer<_ObjCBlock> arg0)>()(_impl, arg0);
  }

  ffi.Pointer<_ObjCBlock> get pointer => _impl;
}

void _ObjCBlock5_fnPtrTrampoline(ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ObjCObject> arg0,
                  ffi.Pointer<ObjCObject> arg1)>>()
      .asFunction<
          void Function(ffi.Pointer<ObjCObject> arg0,
              ffi.Pointer<ObjCObject> arg1)>()(arg0, arg1);
}

final _ObjCBlock5_closureRegistry = <int, Function>{};
int _ObjCBlock5_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock5_registerClosure(Function fn) {
  final id = ++_ObjCBlock5_closureRegistryIndex;
  _ObjCBlock5_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock5_closureTrampoline(ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1) {
  return _ObjCBlock5_closureRegistry[block.ref.target.address]!(arg0, arg1);
}

class ObjCBlock5 {
  final ffi.Pointer<_ObjCBlock> _impl;
  final AVFAudio _lib;
  ObjCBlock5._(this._impl, this._lib);
  ObjCBlock5.fromFunctionPointer(
      this._lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ObjCObject> arg0,
                      ffi.Pointer<ObjCObject> arg1)>>
          ptr)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<_ObjCBlock> block,
                            ffi.Pointer<ObjCObject> arg0,
                            ffi.Pointer<ObjCObject> arg1)>(
                    _ObjCBlock5_fnPtrTrampoline)
                .cast(),
            ptr.cast());
  ObjCBlock5.fromFunction(
      this._lib,
      void Function(ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1)
          fn)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<_ObjCBlock> block,
                            ffi.Pointer<ObjCObject> arg0,
                            ffi.Pointer<ObjCObject> arg1)>(
                    _ObjCBlock5_closureTrampoline)
                .cast(),
            _ObjCBlock5_registerClosure(fn));
  void call(ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1) {
    return _impl.ref.invoke
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<_ObjCBlock> block,
                    ffi.Pointer<ObjCObject> arg0,
                    ffi.Pointer<ObjCObject> arg1)>>()
        .asFunction<
            void Function(
                ffi.Pointer<_ObjCBlock> block,
                ffi.Pointer<ObjCObject> arg0,
                ffi.Pointer<ObjCObject> arg1)>()(_impl, arg0, arg1);
  }

  ffi.Pointer<_ObjCBlock> get pointer => _impl;
}

abstract class NSItemProviderFileOptions {
  static const int NSItemProviderFileOptionOpenInPlace = 1;
}

ffi.Pointer<ObjCObject> _ObjCBlock6_fnPtrTrampoline(
    ffi.Pointer<_ObjCBlock> block, ffi.Pointer<_ObjCBlock> arg0) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Pointer<ObjCObject> Function(ffi.Pointer<_ObjCBlock> arg0)>>()
      .asFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<_ObjCBlock> arg0)>()(arg0);
}

final _ObjCBlock6_closureRegistry = <int, Function>{};
int _ObjCBlock6_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock6_registerClosure(Function fn) {
  final id = ++_ObjCBlock6_closureRegistryIndex;
  _ObjCBlock6_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

ffi.Pointer<ObjCObject> _ObjCBlock6_closureTrampoline(
    ffi.Pointer<_ObjCBlock> block, ffi.Pointer<_ObjCBlock> arg0) {
  return _ObjCBlock6_closureRegistry[block.ref.target.address]!(arg0);
}

class ObjCBlock6 {
  final ffi.Pointer<_ObjCBlock> _impl;
  final AVFAudio _lib;
  ObjCBlock6._(this._impl, this._lib);
  ObjCBlock6.fromFunctionPointer(
      this._lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<ObjCObject> Function(
                      ffi.Pointer<_ObjCBlock> arg0)>>
          ptr)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                        ffi.Pointer<ObjCObject> Function(
                            ffi.Pointer<_ObjCBlock> block,
                            ffi.Pointer<_ObjCBlock> arg0)>(
                    _ObjCBlock6_fnPtrTrampoline)
                .cast(),
            ptr.cast());
  ObjCBlock6.fromFunction(this._lib,
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<_ObjCBlock> arg0) fn)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                        ffi.Pointer<ObjCObject> Function(
                            ffi.Pointer<_ObjCBlock> block,
                            ffi.Pointer<_ObjCBlock> arg0)>(
                    _ObjCBlock6_closureTrampoline)
                .cast(),
            _ObjCBlock6_registerClosure(fn));
  ffi.Pointer<ObjCObject> call(ffi.Pointer<_ObjCBlock> arg0) {
    return _impl.ref.invoke
        .cast<
            ffi.NativeFunction<
                ffi.Pointer<ObjCObject> Function(ffi.Pointer<_ObjCBlock> block,
                    ffi.Pointer<_ObjCBlock> arg0)>>()
        .asFunction<
            ffi.Pointer<ObjCObject> Function(ffi.Pointer<_ObjCBlock> block,
                ffi.Pointer<_ObjCBlock> arg0)>()(_impl, arg0);
  }

  ffi.Pointer<_ObjCBlock> get pointer => _impl;
}

void _ObjCBlock7_fnPtrTrampoline(ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0, bool arg1, ffi.Pointer<ObjCObject> arg2) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ObjCObject> arg0, ffi.Bool arg1,
                  ffi.Pointer<ObjCObject> arg2)>>()
      .asFunction<
          void Function(ffi.Pointer<ObjCObject> arg0, bool arg1,
              ffi.Pointer<ObjCObject> arg2)>()(arg0, arg1, arg2);
}

final _ObjCBlock7_closureRegistry = <int, Function>{};
int _ObjCBlock7_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock7_registerClosure(Function fn) {
  final id = ++_ObjCBlock7_closureRegistryIndex;
  _ObjCBlock7_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock7_closureTrampoline(ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0, bool arg1, ffi.Pointer<ObjCObject> arg2) {
  return _ObjCBlock7_closureRegistry[block.ref.target.address]!(
      arg0, arg1, arg2);
}

class ObjCBlock7 {
  final ffi.Pointer<_ObjCBlock> _impl;
  final AVFAudio _lib;
  ObjCBlock7._(this._impl, this._lib);
  ObjCBlock7.fromFunctionPointer(
      this._lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ObjCObject> arg0, ffi.Bool arg1,
                      ffi.Pointer<ObjCObject> arg2)>>
          ptr)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<_ObjCBlock> block,
                            ffi.Pointer<ObjCObject> arg0,
                            ffi.Bool arg1,
                            ffi.Pointer<ObjCObject> arg2)>(
                    _ObjCBlock7_fnPtrTrampoline)
                .cast(),
            ptr.cast());
  ObjCBlock7.fromFunction(
      this._lib,
      void Function(ffi.Pointer<ObjCObject> arg0, bool arg1,
              ffi.Pointer<ObjCObject> arg2)
          fn)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<_ObjCBlock> block,
                            ffi.Pointer<ObjCObject> arg0,
                            ffi.Bool arg1,
                            ffi.Pointer<ObjCObject> arg2)>(
                    _ObjCBlock7_closureTrampoline)
                .cast(),
            _ObjCBlock7_registerClosure(fn));
  void call(
      ffi.Pointer<ObjCObject> arg0, bool arg1, ffi.Pointer<ObjCObject> arg2) {
    return _impl.ref.invoke
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<_ObjCBlock> block,
                    ffi.Pointer<ObjCObject> arg0,
                    ffi.Bool arg1,
                    ffi.Pointer<ObjCObject> arg2)>>()
        .asFunction<
            void Function(
                ffi.Pointer<_ObjCBlock> block,
                ffi.Pointer<ObjCObject> arg0,
                bool arg1,
                ffi.Pointer<ObjCObject> arg2)>()(_impl, arg0, arg1, arg2);
  }

  ffi.Pointer<_ObjCBlock> get pointer => _impl;
}

typedef NSItemProviderLoadHandler = ffi.Pointer<_ObjCBlock>;
void _ObjCBlock8_fnPtrTrampoline(
    ffi.Pointer<_ObjCBlock> block,
    NSItemProviderCompletionHandler arg0,
    ffi.Pointer<ObjCObject> arg1,
    ffi.Pointer<ObjCObject> arg2) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(
                  NSItemProviderCompletionHandler arg0,
                  ffi.Pointer<ObjCObject> arg1,
                  ffi.Pointer<ObjCObject> arg2)>>()
      .asFunction<
          void Function(
              NSItemProviderCompletionHandler arg0,
              ffi.Pointer<ObjCObject> arg1,
              ffi.Pointer<ObjCObject> arg2)>()(arg0, arg1, arg2);
}

final _ObjCBlock8_closureRegistry = <int, Function>{};
int _ObjCBlock8_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock8_registerClosure(Function fn) {
  final id = ++_ObjCBlock8_closureRegistryIndex;
  _ObjCBlock8_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock8_closureTrampoline(
    ffi.Pointer<_ObjCBlock> block,
    NSItemProviderCompletionHandler arg0,
    ffi.Pointer<ObjCObject> arg1,
    ffi.Pointer<ObjCObject> arg2) {
  return _ObjCBlock8_closureRegistry[block.ref.target.address]!(
      arg0, arg1, arg2);
}

class ObjCBlock8 {
  final ffi.Pointer<_ObjCBlock> _impl;
  final AVFAudio _lib;
  ObjCBlock8._(this._impl, this._lib);
  ObjCBlock8.fromFunctionPointer(
      this._lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      NSItemProviderCompletionHandler arg0,
                      ffi.Pointer<ObjCObject> arg1,
                      ffi.Pointer<ObjCObject> arg2)>>
          ptr)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<_ObjCBlock> block,
                            NSItemProviderCompletionHandler arg0,
                            ffi.Pointer<ObjCObject> arg1,
                            ffi.Pointer<ObjCObject> arg2)>(
                    _ObjCBlock8_fnPtrTrampoline)
                .cast(),
            ptr.cast());
  ObjCBlock8.fromFunction(
      this._lib,
      void Function(NSItemProviderCompletionHandler arg0,
              ffi.Pointer<ObjCObject> arg1, ffi.Pointer<ObjCObject> arg2)
          fn)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<_ObjCBlock> block,
                            NSItemProviderCompletionHandler arg0,
                            ffi.Pointer<ObjCObject> arg1,
                            ffi.Pointer<ObjCObject> arg2)>(
                    _ObjCBlock8_closureTrampoline)
                .cast(),
            _ObjCBlock8_registerClosure(fn));
  void call(NSItemProviderCompletionHandler arg0, ffi.Pointer<ObjCObject> arg1,
      ffi.Pointer<ObjCObject> arg2) {
    return _impl.ref.invoke
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<_ObjCBlock> block,
                    NSItemProviderCompletionHandler arg0,
                    ffi.Pointer<ObjCObject> arg1,
                    ffi.Pointer<ObjCObject> arg2)>>()
        .asFunction<
            void Function(
                ffi.Pointer<_ObjCBlock> block,
                NSItemProviderCompletionHandler arg0,
                ffi.Pointer<ObjCObject> arg1,
                ffi.Pointer<ObjCObject> arg2)>()(_impl, arg0, arg1, arg2);
  }

  ffi.Pointer<_ObjCBlock> get pointer => _impl;
}

typedef NSItemProviderCompletionHandler = ffi.Pointer<_ObjCBlock>;

class NSString extends NSObject {
  NSString._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSString] that points to the same underlying object as [other].
  static NSString castFrom<T extends _ObjCWrapper>(T other) {
    return NSString._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSString] that wraps the given raw object pointer.
  static NSString castFromPointer(AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSString._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSString].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSString1);
  }

  factory NSString(AVFAudio _lib, String str) {
    final cstr = str.toNativeUtf8();
    final nsstr = stringWithCString_encoding_(_lib, cstr.cast(), 4 /* UTF8 */);
    pkg_ffi.calloc.free(cstr);
    return nsstr;
  }

  @override
  String toString() => (UTF8String).cast<pkg_ffi.Utf8>().toDartString();

  int get length {
    return _lib._objc_msgSend_10(_id, _lib._sel_length1);
  }

  int characterAtIndex_(int index) {
    return _lib._objc_msgSend_133(_id, _lib._sel_characterAtIndex_1, index);
  }

  @override
  NSString init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString initWithCoder_(NSObject? coder) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_initWithCoder_1, coder?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSObject substringFromIndex_(int from) {
    final _ret =
        _lib._objc_msgSend_65(_id, _lib._sel_substringFromIndex_1, from);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject substringToIndex_(int to) {
    final _ret = _lib._objc_msgSend_65(_id, _lib._sel_substringToIndex_1, to);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject substringWithRange_(NSRange range) {
    final _ret =
        _lib._objc_msgSend_48(_id, _lib._sel_substringWithRange_1, range);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void getCharacters_range_(ffi.Pointer<unichar> buffer, NSRange range) {
    return _lib._objc_msgSend_134(
        _id, _lib._sel_getCharacters_range_1, buffer, range);
  }

  int compare_(NSObject? string) {
    return _lib._objc_msgSend_80(
        _id, _lib._sel_compare_1, string?._id ?? ffi.nullptr);
  }

  int compare_options_(NSObject? string, int mask) {
    return _lib._objc_msgSend_135(
        _id, _lib._sel_compare_options_1, string?._id ?? ffi.nullptr, mask);
  }

  int compare_options_range_(
      NSObject? string, int mask, NSRange rangeOfReceiverToCompare) {
    return _lib._objc_msgSend_136(_id, _lib._sel_compare_options_range_1,
        string?._id ?? ffi.nullptr, mask, rangeOfReceiverToCompare);
  }

  int compare_options_range_locale_(NSObject? string, int mask,
      NSRange rangeOfReceiverToCompare, NSObject locale) {
    return _lib._objc_msgSend_137(_id, _lib._sel_compare_options_range_locale_1,
        string?._id ?? ffi.nullptr, mask, rangeOfReceiverToCompare, locale._id);
  }

  int caseInsensitiveCompare_(NSObject? string) {
    return _lib._objc_msgSend_80(
        _id, _lib._sel_caseInsensitiveCompare_1, string?._id ?? ffi.nullptr);
  }

  int localizedCompare_(NSObject? string) {
    return _lib._objc_msgSend_80(
        _id, _lib._sel_localizedCompare_1, string?._id ?? ffi.nullptr);
  }

  int localizedCaseInsensitiveCompare_(NSObject? string) {
    return _lib._objc_msgSend_80(
        _id,
        _lib._sel_localizedCaseInsensitiveCompare_1,
        string?._id ?? ffi.nullptr);
  }

  int localizedStandardCompare_(NSObject? string) {
    return _lib._objc_msgSend_80(
        _id, _lib._sel_localizedStandardCompare_1, string?._id ?? ffi.nullptr);
  }

  bool isEqualToString_(NSObject? aString) {
    return _lib._objc_msgSend_0(
        _id, _lib._sel_isEqualToString_1, aString?._id ?? ffi.nullptr);
  }

  bool hasPrefix_(NSObject? str) {
    return _lib._objc_msgSend_0(
        _id, _lib._sel_hasPrefix_1, str?._id ?? ffi.nullptr);
  }

  bool hasSuffix_(NSObject? str) {
    return _lib._objc_msgSend_0(
        _id, _lib._sel_hasSuffix_1, str?._id ?? ffi.nullptr);
  }

  NSObject commonPrefixWithString_options_(NSObject? str, int mask) {
    final _ret = _lib._objc_msgSend_138(
        _id,
        _lib._sel_commonPrefixWithString_options_1,
        str?._id ?? ffi.nullptr,
        mask);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool containsString_(NSObject? str) {
    return _lib._objc_msgSend_0(
        _id, _lib._sel_containsString_1, str?._id ?? ffi.nullptr);
  }

  bool localizedCaseInsensitiveContainsString_(NSObject? str) {
    return _lib._objc_msgSend_0(
        _id,
        _lib._sel_localizedCaseInsensitiveContainsString_1,
        str?._id ?? ffi.nullptr);
  }

  bool localizedStandardContainsString_(NSObject? str) {
    return _lib._objc_msgSend_0(_id,
        _lib._sel_localizedStandardContainsString_1, str?._id ?? ffi.nullptr);
  }

  NSRange localizedStandardRangeOfString_(NSObject? str) {
    return _lib._objc_msgSend_139(_id,
        _lib._sel_localizedStandardRangeOfString_1, str?._id ?? ffi.nullptr);
  }

  NSRange rangeOfString_(NSObject? searchString) {
    return _lib._objc_msgSend_139(
        _id, _lib._sel_rangeOfString_1, searchString?._id ?? ffi.nullptr);
  }

  NSRange rangeOfString_options_(NSObject? searchString, int mask) {
    return _lib._objc_msgSend_140(_id, _lib._sel_rangeOfString_options_1,
        searchString?._id ?? ffi.nullptr, mask);
  }

  NSRange rangeOfString_options_range_(
      NSObject? searchString, int mask, NSRange rangeOfReceiverToSearch) {
    return _lib._objc_msgSend_141(_id, _lib._sel_rangeOfString_options_range_1,
        searchString?._id ?? ffi.nullptr, mask, rangeOfReceiverToSearch);
  }

  NSRange rangeOfString_options_range_locale_(NSObject? searchString, int mask,
      NSRange rangeOfReceiverToSearch, NSObject? locale) {
    return _lib._objc_msgSend_142(
        _id,
        _lib._sel_rangeOfString_options_range_locale_1,
        searchString?._id ?? ffi.nullptr,
        mask,
        rangeOfReceiverToSearch,
        locale?._id ?? ffi.nullptr);
  }

  NSRange rangeOfCharacterFromSet_(NSObject? searchSet) {
    return _lib._objc_msgSend_139(_id, _lib._sel_rangeOfCharacterFromSet_1,
        searchSet?._id ?? ffi.nullptr);
  }

  NSRange rangeOfCharacterFromSet_options_(NSObject? searchSet, int mask) {
    return _lib._objc_msgSend_140(
        _id,
        _lib._sel_rangeOfCharacterFromSet_options_1,
        searchSet?._id ?? ffi.nullptr,
        mask);
  }

  NSRange rangeOfCharacterFromSet_options_range_(
      NSObject? searchSet, int mask, NSRange rangeOfReceiverToSearch) {
    return _lib._objc_msgSend_141(
        _id,
        _lib._sel_rangeOfCharacterFromSet_options_range_1,
        searchSet?._id ?? ffi.nullptr,
        mask,
        rangeOfReceiverToSearch);
  }

  NSRange rangeOfComposedCharacterSequenceAtIndex_(int index) {
    return _lib._objc_msgSend_143(
        _id, _lib._sel_rangeOfComposedCharacterSequenceAtIndex_1, index);
  }

  NSRange rangeOfComposedCharacterSequencesForRange_(NSRange range) {
    return _lib._objc_msgSend_144(
        _id, _lib._sel_rangeOfComposedCharacterSequencesForRange_1, range);
  }

  NSObject stringByAppendingString_(NSObject? aString) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_stringByAppendingString_1, aString?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject stringByAppendingFormat_(NSObject? format) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_stringByAppendingFormat_1, format?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  double get doubleValue {
    return _lib._objc_msgSend_79(_id, _lib._sel_doubleValue1);
  }

  double get floatValue {
    return _lib._objc_msgSend_78(_id, _lib._sel_floatValue1);
  }

  int get intValue {
    return _lib._objc_msgSend_75(_id, _lib._sel_intValue1);
  }

  int get integerValue {
    return _lib._objc_msgSend_11(_id, _lib._sel_integerValue1);
  }

  int get longLongValue {
    return _lib._objc_msgSend_76(_id, _lib._sel_longLongValue1);
  }

  bool get boolValue {
    return _lib._objc_msgSend_9(_id, _lib._sel_boolValue1);
  }

  NSObject? get uppercaseString {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_uppercaseString1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get lowercaseString {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_lowercaseString1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get capitalizedString {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_capitalizedString1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get localizedUppercaseString {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_localizedUppercaseString1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get localizedLowercaseString {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_localizedLowercaseString1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get localizedCapitalizedString {
    final _ret =
        _lib._objc_msgSend_2(_id, _lib._sel_localizedCapitalizedString1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject uppercaseStringWithLocale_(NSObject? locale) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_uppercaseStringWithLocale_1, locale?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject lowercaseStringWithLocale_(NSObject? locale) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_lowercaseStringWithLocale_1, locale?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject capitalizedStringWithLocale_(NSObject? locale) {
    final _ret = _lib._objc_msgSend_13(_id,
        _lib._sel_capitalizedStringWithLocale_1, locale?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void getLineStart_end_contentsEnd_forRange_(
      ffi.Pointer<NSUInteger> startPtr,
      ffi.Pointer<NSUInteger> lineEndPtr,
      ffi.Pointer<NSUInteger> contentsEndPtr,
      NSRange range) {
    return _lib._objc_msgSend_145(
        _id,
        _lib._sel_getLineStart_end_contentsEnd_forRange_1,
        startPtr,
        lineEndPtr,
        contentsEndPtr,
        range);
  }

  NSRange lineRangeForRange_(NSRange range) {
    return _lib._objc_msgSend_144(_id, _lib._sel_lineRangeForRange_1, range);
  }

  void getParagraphStart_end_contentsEnd_forRange_(
      ffi.Pointer<NSUInteger> startPtr,
      ffi.Pointer<NSUInteger> parEndPtr,
      ffi.Pointer<NSUInteger> contentsEndPtr,
      NSRange range) {
    return _lib._objc_msgSend_145(
        _id,
        _lib._sel_getParagraphStart_end_contentsEnd_forRange_1,
        startPtr,
        parEndPtr,
        contentsEndPtr,
        range);
  }

  NSRange paragraphRangeForRange_(NSRange range) {
    return _lib._objc_msgSend_144(
        _id, _lib._sel_paragraphRangeForRange_1, range);
  }

  void enumerateSubstringsInRange_options_usingBlock_(
      NSRange range, int opts, ObjCBlock9 block) {
    return _lib._objc_msgSend_146(
        _id,
        _lib._sel_enumerateSubstringsInRange_options_usingBlock_1,
        range,
        opts,
        block._impl);
  }

  void enumerateLinesUsingBlock_(ObjCBlock10 block) {
    return _lib._objc_msgSend_147(
        _id, _lib._sel_enumerateLinesUsingBlock_1, block._impl);
  }

  ffi.Pointer<ffi.Char> get UTF8String {
    return _lib._objc_msgSend_44(_id, _lib._sel_UTF8String1);
  }

  int get fastestEncoding {
    return _lib._objc_msgSend_10(_id, _lib._sel_fastestEncoding1);
  }

  int get smallestEncoding {
    return _lib._objc_msgSend_10(_id, _lib._sel_smallestEncoding1);
  }

  NSObject dataUsingEncoding_allowLossyConversion_(int encoding, bool lossy) {
    final _ret = _lib._objc_msgSend_148(_id,
        _lib._sel_dataUsingEncoding_allowLossyConversion_1, encoding, lossy);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject dataUsingEncoding_(int encoding) {
    final _ret =
        _lib._objc_msgSend_65(_id, _lib._sel_dataUsingEncoding_1, encoding);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool canBeConvertedToEncoding_(int encoding) {
    return _lib._objc_msgSend_149(
        _id, _lib._sel_canBeConvertedToEncoding_1, encoding);
  }

  ffi.Pointer<ffi.Char> cStringUsingEncoding_(int encoding) {
    return _lib._objc_msgSend_150(
        _id, _lib._sel_cStringUsingEncoding_1, encoding);
  }

  bool getCString_maxLength_encoding_(
      ffi.Pointer<ffi.Char> buffer, int maxBufferCount, int encoding) {
    return _lib._objc_msgSend_151(
        _id,
        _lib._sel_getCString_maxLength_encoding_1,
        buffer,
        maxBufferCount,
        encoding);
  }

  bool getBytes_maxLength_usedLength_encoding_options_range_remainingRange_(
      ffi.Pointer<ffi.Void> buffer,
      int maxBufferCount,
      ffi.Pointer<NSUInteger> usedBufferCount,
      int encoding,
      int options,
      NSRange range,
      NSRangePointer leftover) {
    return _lib._objc_msgSend_152(
        _id,
        _lib._sel_getBytes_maxLength_usedLength_encoding_options_range_remainingRange_1,
        buffer,
        maxBufferCount,
        usedBufferCount,
        encoding,
        options,
        range,
        leftover);
  }

  int maximumLengthOfBytesUsingEncoding_(int enc) {
    return _lib._objc_msgSend_153(
        _id, _lib._sel_maximumLengthOfBytesUsingEncoding_1, enc);
  }

  int lengthOfBytesUsingEncoding_(int enc) {
    return _lib._objc_msgSend_153(
        _id, _lib._sel_lengthOfBytesUsingEncoding_1, enc);
  }

  static ffi.Pointer<NSStringEncoding> getAvailableStringEncodings(
      AVFAudio _lib) {
    return _lib._objc_msgSend_154(
        _lib._class_NSString1, _lib._sel_availableStringEncodings1);
  }

  static NSObject localizedNameOfStringEncoding_(AVFAudio _lib, int encoding) {
    final _ret = _lib._objc_msgSend_65(_lib._class_NSString1,
        _lib._sel_localizedNameOfStringEncoding_1, encoding);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static int getDefaultCStringEncoding(AVFAudio _lib) {
    return _lib._objc_msgSend_10(
        _lib._class_NSString1, _lib._sel_defaultCStringEncoding1);
  }

  NSObject? get decomposedStringWithCanonicalMapping {
    final _ret = _lib._objc_msgSend_2(
        _id, _lib._sel_decomposedStringWithCanonicalMapping1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get precomposedStringWithCanonicalMapping {
    final _ret = _lib._objc_msgSend_2(
        _id, _lib._sel_precomposedStringWithCanonicalMapping1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get decomposedStringWithCompatibilityMapping {
    final _ret = _lib._objc_msgSend_2(
        _id, _lib._sel_decomposedStringWithCompatibilityMapping1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get precomposedStringWithCompatibilityMapping {
    final _ret = _lib._objc_msgSend_2(
        _id, _lib._sel_precomposedStringWithCompatibilityMapping1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject componentsSeparatedByString_(NSObject? separator) {
    final _ret = _lib._objc_msgSend_13(_id,
        _lib._sel_componentsSeparatedByString_1, separator?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject componentsSeparatedByCharactersInSet_(NSObject? separator) {
    final _ret = _lib._objc_msgSend_13(
        _id,
        _lib._sel_componentsSeparatedByCharactersInSet_1,
        separator?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject stringByTrimmingCharactersInSet_(NSObject? set) {
    final _ret = _lib._objc_msgSend_13(_id,
        _lib._sel_stringByTrimmingCharactersInSet_1, set?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject stringByPaddingToLength_withString_startingAtIndex_(
      int newLength, NSObject? padString, int padIndex) {
    final _ret = _lib._objc_msgSend_155(
        _id,
        _lib._sel_stringByPaddingToLength_withString_startingAtIndex_1,
        newLength,
        padString?._id ?? ffi.nullptr,
        padIndex);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject stringByFoldingWithOptions_locale_(int options, NSObject? locale) {
    final _ret = _lib._objc_msgSend_156(
        _id,
        _lib._sel_stringByFoldingWithOptions_locale_1,
        options,
        locale?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject stringByReplacingOccurrencesOfString_withString_options_range_(
      NSObject? target,
      NSObject? replacement,
      int options,
      NSRange searchRange) {
    final _ret = _lib._objc_msgSend_157(
        _id,
        _lib._sel_stringByReplacingOccurrencesOfString_withString_options_range_1,
        target?._id ?? ffi.nullptr,
        replacement?._id ?? ffi.nullptr,
        options,
        searchRange);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject stringByReplacingOccurrencesOfString_withString_(
      NSObject? target, NSObject? replacement) {
    final _ret = _lib._objc_msgSend_39(
        _id,
        _lib._sel_stringByReplacingOccurrencesOfString_withString_1,
        target?._id ?? ffi.nullptr,
        replacement?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject stringByReplacingCharactersInRange_withString_(
      NSRange range, NSObject? replacement) {
    final _ret = _lib._objc_msgSend_158(
        _id,
        _lib._sel_stringByReplacingCharactersInRange_withString_1,
        range,
        replacement?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject stringByApplyingTransform_reverse_(
      NSStringTransform transform, bool reverse) {
    final _ret = _lib._objc_msgSend_102(
        _id, _lib._sel_stringByApplyingTransform_reverse_1, transform, reverse);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool writeToURL_atomically_encoding_error_(
      NSObject? url,
      bool useAuxiliaryFile,
      int enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_159(
        _id,
        _lib._sel_writeToURL_atomically_encoding_error_1,
        url?._id ?? ffi.nullptr,
        useAuxiliaryFile,
        enc,
        error);
  }

  bool writeToFile_atomically_encoding_error_(
      NSObject? path,
      bool useAuxiliaryFile,
      int enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_159(
        _id,
        _lib._sel_writeToFile_atomically_encoding_error_1,
        path?._id ?? ffi.nullptr,
        useAuxiliaryFile,
        enc,
        error);
  }

  NSObject? get description {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_description1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  int get hash {
    return _lib._objc_msgSend_10(_id, _lib._sel_hash1);
  }

  NSString initWithCharactersNoCopy_length_freeWhenDone_(
      ffi.Pointer<unichar> characters, int length, bool freeBuffer) {
    final _ret = _lib._objc_msgSend_160(
        _id,
        _lib._sel_initWithCharactersNoCopy_length_freeWhenDone_1,
        characters,
        length,
        freeBuffer);
    return NSString._(_ret, _lib, retain: false, release: true);
  }

  NSString initWithCharactersNoCopy_length_deallocator_(
      ffi.Pointer<unichar> chars, int len, ObjCBlock11 deallocator) {
    final _ret = _lib._objc_msgSend_161(
        _id,
        _lib._sel_initWithCharactersNoCopy_length_deallocator_1,
        chars,
        len,
        deallocator._impl);
    return NSString._(_ret, _lib, retain: false, release: true);
  }

  NSString initWithCharacters_length_(
      ffi.Pointer<unichar> characters, int length) {
    final _ret = _lib._objc_msgSend_162(
        _id, _lib._sel_initWithCharacters_length_1, characters, length);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString initWithUTF8String_(ffi.Pointer<ffi.Char> nullTerminatedCString) {
    final _ret = _lib._objc_msgSend_163(
        _id, _lib._sel_initWithUTF8String_1, nullTerminatedCString);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString initWithString_(NSObject? aString) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_initWithString_1, aString?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString initWithFormat_(NSObject? format) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_initWithFormat_1, format?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString initWithFormat_arguments_(
      NSObject? format, ffi.Pointer<__va_list_tag> argList) {
    final _ret = _lib._objc_msgSend_164(
        _id,
        _lib._sel_initWithFormat_arguments_1,
        format?._id ?? ffi.nullptr,
        argList);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString initWithFormat_locale_(NSObject? format, NSObject locale) {
    final _ret = _lib._objc_msgSend_39(_id, _lib._sel_initWithFormat_locale_1,
        format?._id ?? ffi.nullptr, locale._id);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString initWithFormat_locale_arguments_(
      NSObject? format, NSObject locale, ffi.Pointer<__va_list_tag> argList) {
    final _ret = _lib._objc_msgSend_165(
        _id,
        _lib._sel_initWithFormat_locale_arguments_1,
        format?._id ?? ffi.nullptr,
        locale._id,
        argList);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString initWithData_encoding_(NSObject? data, int encoding) {
    final _ret = _lib._objc_msgSend_83(_id, _lib._sel_initWithData_encoding_1,
        data?._id ?? ffi.nullptr, encoding);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString initWithBytes_length_encoding_(
      ffi.Pointer<ffi.Void> bytes, int len, int encoding) {
    final _ret = _lib._objc_msgSend_166(
        _id, _lib._sel_initWithBytes_length_encoding_1, bytes, len, encoding);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString initWithBytesNoCopy_length_encoding_freeWhenDone_(
      ffi.Pointer<ffi.Void> bytes, int len, int encoding, bool freeBuffer) {
    final _ret = _lib._objc_msgSend_167(
        _id,
        _lib._sel_initWithBytesNoCopy_length_encoding_freeWhenDone_1,
        bytes,
        len,
        encoding,
        freeBuffer);
    return NSString._(_ret, _lib, retain: false, release: true);
  }

  NSString initWithBytesNoCopy_length_encoding_deallocator_(
      ffi.Pointer<ffi.Void> bytes,
      int len,
      int encoding,
      ObjCBlock12 deallocator) {
    final _ret = _lib._objc_msgSend_168(
        _id,
        _lib._sel_initWithBytesNoCopy_length_encoding_deallocator_1,
        bytes,
        len,
        encoding,
        deallocator._impl);
    return NSString._(_ret, _lib, retain: false, release: true);
  }

  static NSString string(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSString1, _lib._sel_string1);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString stringWithString_(AVFAudio _lib, NSObject? string) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSString1,
        _lib._sel_stringWithString_1, string?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString stringWithCharacters_length_(
      AVFAudio _lib, ffi.Pointer<unichar> characters, int length) {
    final _ret = _lib._objc_msgSend_162(_lib._class_NSString1,
        _lib._sel_stringWithCharacters_length_1, characters, length);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString stringWithUTF8String_(
      AVFAudio _lib, ffi.Pointer<ffi.Char> nullTerminatedCString) {
    final _ret = _lib._objc_msgSend_163(_lib._class_NSString1,
        _lib._sel_stringWithUTF8String_1, nullTerminatedCString);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString stringWithFormat_(AVFAudio _lib, NSObject? format) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSString1,
        _lib._sel_stringWithFormat_1, format?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString localizedStringWithFormat_(AVFAudio _lib, NSObject? format) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSString1,
        _lib._sel_localizedStringWithFormat_1, format?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString initWithCString_encoding_(
      ffi.Pointer<ffi.Char> nullTerminatedCString, int encoding) {
    final _ret = _lib._objc_msgSend_169(_id,
        _lib._sel_initWithCString_encoding_1, nullTerminatedCString, encoding);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString stringWithCString_encoding_(
      AVFAudio _lib, ffi.Pointer<ffi.Char> cString, int enc) {
    final _ret = _lib._objc_msgSend_169(_lib._class_NSString1,
        _lib._sel_stringWithCString_encoding_1, cString, enc);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString initWithContentsOfURL_encoding_error_(
      NSObject? url, int enc, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_170(
        _id,
        _lib._sel_initWithContentsOfURL_encoding_error_1,
        url?._id ?? ffi.nullptr,
        enc,
        error);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString initWithContentsOfFile_encoding_error_(
      NSObject? path, int enc, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_170(
        _id,
        _lib._sel_initWithContentsOfFile_encoding_error_1,
        path?._id ?? ffi.nullptr,
        enc,
        error);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString stringWithContentsOfURL_encoding_error_(AVFAudio _lib,
      NSObject? url, int enc, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_170(
        _lib._class_NSString1,
        _lib._sel_stringWithContentsOfURL_encoding_error_1,
        url?._id ?? ffi.nullptr,
        enc,
        error);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString stringWithContentsOfFile_encoding_error_(AVFAudio _lib,
      NSObject? path, int enc, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_170(
        _lib._class_NSString1,
        _lib._sel_stringWithContentsOfFile_encoding_error_1,
        path?._id ?? ffi.nullptr,
        enc,
        error);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString initWithContentsOfURL_usedEncoding_error_(
      NSObject? url,
      ffi.Pointer<NSStringEncoding> enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_171(
        _id,
        _lib._sel_initWithContentsOfURL_usedEncoding_error_1,
        url?._id ?? ffi.nullptr,
        enc,
        error);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  NSString initWithContentsOfFile_usedEncoding_error_(
      NSObject? path,
      ffi.Pointer<NSStringEncoding> enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_171(
        _id,
        _lib._sel_initWithContentsOfFile_usedEncoding_error_1,
        path?._id ?? ffi.nullptr,
        enc,
        error);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString stringWithContentsOfURL_usedEncoding_error_(
      AVFAudio _lib,
      NSObject? url,
      ffi.Pointer<NSStringEncoding> enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_171(
        _lib._class_NSString1,
        _lib._sel_stringWithContentsOfURL_usedEncoding_error_1,
        url?._id ?? ffi.nullptr,
        enc,
        error);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static NSString stringWithContentsOfFile_usedEncoding_error_(
      AVFAudio _lib,
      NSObject? path,
      ffi.Pointer<NSStringEncoding> enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_171(
        _lib._class_NSString1,
        _lib._sel_stringWithContentsOfFile_usedEncoding_error_1,
        path?._id ?? ffi.nullptr,
        enc,
        error);
    return NSString._(_ret, _lib, retain: true, release: true);
  }

  static int
      stringEncodingForData_encodingOptions_convertedString_usedLossyConversion_(
          AVFAudio _lib,
          NSObject? data,
          NSObject? opts,
          ffi.Pointer<ffi.Pointer<ObjCObject>> string,
          ffi.Pointer<ffi.Bool> usedLossyConversion) {
    return _lib._objc_msgSend_172(
        _lib._class_NSString1,
        _lib._sel_stringEncodingForData_encodingOptions_convertedString_usedLossyConversion_1,
        data?._id ?? ffi.nullptr,
        opts?._id ?? ffi.nullptr,
        string,
        usedLossyConversion);
  }

  NSObject propertyList() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_propertyList1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject propertyListFromStringsFileFormat() {
    final _ret =
        _lib._objc_msgSend_2(_id, _lib._sel_propertyListFromStringsFileFormat1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  ffi.Pointer<ffi.Char> cString() {
    return _lib._objc_msgSend_44(_id, _lib._sel_cString1);
  }

  ffi.Pointer<ffi.Char> lossyCString() {
    return _lib._objc_msgSend_44(_id, _lib._sel_lossyCString1);
  }

  int cStringLength() {
    return _lib._objc_msgSend_10(_id, _lib._sel_cStringLength1);
  }

  void getCString_(ffi.Pointer<ffi.Char> bytes) {
    return _lib._objc_msgSend_173(_id, _lib._sel_getCString_1, bytes);
  }

  void getCString_maxLength_(ffi.Pointer<ffi.Char> bytes, int maxLength) {
    return _lib._objc_msgSend_174(
        _id, _lib._sel_getCString_maxLength_1, bytes, maxLength);
  }

  void getCString_maxLength_range_remainingRange_(ffi.Pointer<ffi.Char> bytes,
      int maxLength, NSRange aRange, NSRangePointer leftoverRange) {
    return _lib._objc_msgSend_175(
        _id,
        _lib._sel_getCString_maxLength_range_remainingRange_1,
        bytes,
        maxLength,
        aRange,
        leftoverRange);
  }

  bool writeToFile_atomically_(NSObject? path, bool useAuxiliaryFile) {
    return _lib._objc_msgSend_107(_id, _lib._sel_writeToFile_atomically_1,
        path?._id ?? ffi.nullptr, useAuxiliaryFile);
  }

  bool writeToURL_atomically_(NSObject? url, bool atomically) {
    return _lib._objc_msgSend_107(_id, _lib._sel_writeToURL_atomically_1,
        url?._id ?? ffi.nullptr, atomically);
  }

  NSObject initWithContentsOfFile_(NSObject? path) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_initWithContentsOfFile_1, path?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject initWithContentsOfURL_(NSObject? url) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_initWithContentsOfURL_1, url?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject stringWithContentsOfFile_(AVFAudio _lib, NSObject? path) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSString1,
        _lib._sel_stringWithContentsOfFile_1, path?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject stringWithContentsOfURL_(AVFAudio _lib, NSObject? url) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSString1,
        _lib._sel_stringWithContentsOfURL_1, url?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject initWithCStringNoCopy_length_freeWhenDone_(
      ffi.Pointer<ffi.Char> bytes, int length, bool freeBuffer) {
    final _ret = _lib._objc_msgSend_176(
        _id,
        _lib._sel_initWithCStringNoCopy_length_freeWhenDone_1,
        bytes,
        length,
        freeBuffer);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  NSObject initWithCString_length_(ffi.Pointer<ffi.Char> bytes, int length) {
    final _ret = _lib._objc_msgSend_169(
        _id, _lib._sel_initWithCString_length_1, bytes, length);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject initWithCString_(ffi.Pointer<ffi.Char> bytes) {
    final _ret =
        _lib._objc_msgSend_163(_id, _lib._sel_initWithCString_1, bytes);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject stringWithCString_length_(
      AVFAudio _lib, ffi.Pointer<ffi.Char> bytes, int length) {
    final _ret = _lib._objc_msgSend_169(_lib._class_NSString1,
        _lib._sel_stringWithCString_length_1, bytes, length);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject stringWithCString_(
      AVFAudio _lib, ffi.Pointer<ffi.Char> bytes) {
    final _ret = _lib._objc_msgSend_163(
        _lib._class_NSString1, _lib._sel_stringWithCString_1, bytes);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void getCharacters_(ffi.Pointer<unichar> buffer) {
    return _lib._objc_msgSend_177(_id, _lib._sel_getCharacters_1, buffer);
  }

  NSObject variantFittingPresentationWidth_(int width) {
    final _ret = _lib._objc_msgSend_64(
        _id, _lib._sel_variantFittingPresentationWidth_1, width);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject pathWithComponents_(AVFAudio _lib, NSObject? components) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSString1,
        _lib._sel_pathWithComponents_1, components?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get pathComponents {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_pathComponents1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool get absolutePath {
    return _lib._objc_msgSend_9(_id, _lib._sel_isAbsolutePath1);
  }

  NSObject? get lastPathComponent {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_lastPathComponent1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get stringByDeletingLastPathComponent {
    final _ret =
        _lib._objc_msgSend_2(_id, _lib._sel_stringByDeletingLastPathComponent1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject stringByAppendingPathComponent_(NSObject? str) {
    final _ret = _lib._objc_msgSend_13(_id,
        _lib._sel_stringByAppendingPathComponent_1, str?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get pathExtension {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_pathExtension1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get stringByDeletingPathExtension {
    final _ret =
        _lib._objc_msgSend_2(_id, _lib._sel_stringByDeletingPathExtension1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject stringByAppendingPathExtension_(NSObject? str) {
    final _ret = _lib._objc_msgSend_13(_id,
        _lib._sel_stringByAppendingPathExtension_1, str?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get stringByAbbreviatingWithTildeInPath {
    final _ret = _lib._objc_msgSend_2(
        _id, _lib._sel_stringByAbbreviatingWithTildeInPath1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get stringByExpandingTildeInPath {
    final _ret =
        _lib._objc_msgSend_2(_id, _lib._sel_stringByExpandingTildeInPath1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get stringByStandardizingPath {
    final _ret =
        _lib._objc_msgSend_2(_id, _lib._sel_stringByStandardizingPath1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get stringByResolvingSymlinksInPath {
    final _ret =
        _lib._objc_msgSend_2(_id, _lib._sel_stringByResolvingSymlinksInPath1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject stringsByAppendingPaths_(NSObject? paths) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_stringsByAppendingPaths_1, paths?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  int completePathIntoString_caseSensitive_matchesIntoArray_filterTypes_(
      ffi.Pointer<ffi.Pointer<ObjCObject>> outputName,
      bool flag,
      ffi.Pointer<ffi.Pointer<ObjCObject>> outputArray,
      NSObject? filterTypes) {
    return _lib._objc_msgSend_178(
        _id,
        _lib._sel_completePathIntoString_caseSensitive_matchesIntoArray_filterTypes_1,
        outputName,
        flag,
        outputArray,
        filterTypes?._id ?? ffi.nullptr);
  }

  ffi.Pointer<ffi.Char> get fileSystemRepresentation {
    return _lib._objc_msgSend_44(_id, _lib._sel_fileSystemRepresentation1);
  }

  bool getFileSystemRepresentation_maxLength_(
      ffi.Pointer<ffi.Char> cname, int max) {
    return _lib._objc_msgSend_179(
        _id, _lib._sel_getFileSystemRepresentation_maxLength_1, cname, max);
  }

  NSObject stringByAddingPercentEncodingWithAllowedCharacters_(
      NSObject? allowedCharacters) {
    final _ret = _lib._objc_msgSend_13(
        _id,
        _lib._sel_stringByAddingPercentEncodingWithAllowedCharacters_1,
        allowedCharacters?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get stringByRemovingPercentEncoding {
    final _ret =
        _lib._objc_msgSend_2(_id, _lib._sel_stringByRemovingPercentEncoding1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject stringByAddingPercentEscapesUsingEncoding_(int enc) {
    final _ret = _lib._objc_msgSend_65(
        _id, _lib._sel_stringByAddingPercentEscapesUsingEncoding_1, enc);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject stringByReplacingPercentEscapesUsingEncoding_(int enc) {
    final _ret = _lib._objc_msgSend_65(
        _id, _lib._sel_stringByReplacingPercentEscapesUsingEncoding_1, enc);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject linguisticTagsInRange_scheme_options_orthography_tokenRanges_(
      NSRange range,
      NSLinguisticTagScheme scheme,
      int options,
      NSObject? orthography,
      ffi.Pointer<ffi.Pointer<ObjCObject>> tokenRanges) {
    final _ret = _lib._objc_msgSend_180(
        _id,
        _lib._sel_linguisticTagsInRange_scheme_options_orthography_tokenRanges_1,
        range,
        scheme,
        options,
        orthography?._id ?? ffi.nullptr,
        tokenRanges);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void enumerateLinguisticTagsInRange_scheme_options_orthography_usingBlock_(
      NSRange range,
      NSLinguisticTagScheme scheme,
      int options,
      NSObject? orthography,
      ObjCBlock9 block) {
    return _lib._objc_msgSend_181(
        _id,
        _lib._sel_enumerateLinguisticTagsInRange_scheme_options_orthography_usingBlock_1,
        range,
        scheme,
        options,
        orthography?._id ?? ffi.nullptr,
        block._impl);
  }

  static NSString new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSString1, _lib._sel_new1);
    return NSString._(_ret, _lib, retain: false, release: true);
  }

  static NSString alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSString1, _lib._sel_alloc1);
    return NSString._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSString1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSString1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSString1, _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSString1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSString1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSString1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSString1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSString1, _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSString1, _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

extension StringToNSString on String {
  NSString toNSString(AVFAudio lib) => NSString(lib, this);
}

typedef unichar = ffi.UnsignedShort;

abstract class NSStringCompareOptions {
  static const int NSCaseInsensitiveSearch = 1;
  static const int NSLiteralSearch = 2;
  static const int NSBackwardsSearch = 4;
  static const int NSAnchoredSearch = 8;
  static const int NSNumericSearch = 64;
  static const int NSDiacriticInsensitiveSearch = 128;
  static const int NSWidthInsensitiveSearch = 256;
  static const int NSForcedOrderingSearch = 512;
  static const int NSRegularExpressionSearch = 1024;
}

abstract class NSStringEnumerationOptions {
  static const int NSStringEnumerationByLines = 0;
  static const int NSStringEnumerationByParagraphs = 1;
  static const int NSStringEnumerationByComposedCharacterSequences = 2;
  static const int NSStringEnumerationByWords = 3;
  static const int NSStringEnumerationBySentences = 4;
  static const int NSStringEnumerationByCaretPositions = 5;
  static const int NSStringEnumerationByDeletionClusters = 6;
  static const int NSStringEnumerationReverse = 256;
  static const int NSStringEnumerationSubstringNotRequired = 512;
  static const int NSStringEnumerationLocalized = 1024;
}

void _ObjCBlock9_fnPtrTrampoline(
    ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0,
    NSRange arg1,
    NSRange arg2,
    ffi.Pointer<ffi.Bool> arg3) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ObjCObject> arg0, NSRange arg1,
                  NSRange arg2, ffi.Pointer<ffi.Bool> arg3)>>()
      .asFunction<
          void Function(
              ffi.Pointer<ObjCObject> arg0,
              NSRange arg1,
              NSRange arg2,
              ffi.Pointer<ffi.Bool> arg3)>()(arg0, arg1, arg2, arg3);
}

final _ObjCBlock9_closureRegistry = <int, Function>{};
int _ObjCBlock9_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock9_registerClosure(Function fn) {
  final id = ++_ObjCBlock9_closureRegistryIndex;
  _ObjCBlock9_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock9_closureTrampoline(
    ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0,
    NSRange arg1,
    NSRange arg2,
    ffi.Pointer<ffi.Bool> arg3) {
  return _ObjCBlock9_closureRegistry[block.ref.target.address]!(
      arg0, arg1, arg2, arg3);
}

class ObjCBlock9 {
  final ffi.Pointer<_ObjCBlock> _impl;
  final AVFAudio _lib;
  ObjCBlock9._(this._impl, this._lib);
  ObjCBlock9.fromFunctionPointer(
      this._lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ObjCObject> arg0, NSRange arg1,
                      NSRange arg2, ffi.Pointer<ffi.Bool> arg3)>>
          ptr)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<_ObjCBlock> block,
                            ffi.Pointer<ObjCObject> arg0,
                            NSRange arg1,
                            NSRange arg2,
                            ffi.Pointer<ffi.Bool> arg3)>(
                    _ObjCBlock9_fnPtrTrampoline)
                .cast(),
            ptr.cast());
  ObjCBlock9.fromFunction(
      this._lib,
      void Function(ffi.Pointer<ObjCObject> arg0, NSRange arg1, NSRange arg2,
              ffi.Pointer<ffi.Bool> arg3)
          fn)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<_ObjCBlock> block,
                            ffi.Pointer<ObjCObject> arg0,
                            NSRange arg1,
                            NSRange arg2,
                            ffi.Pointer<ffi.Bool> arg3)>(
                    _ObjCBlock9_closureTrampoline)
                .cast(),
            _ObjCBlock9_registerClosure(fn));
  void call(ffi.Pointer<ObjCObject> arg0, NSRange arg1, NSRange arg2,
      ffi.Pointer<ffi.Bool> arg3) {
    return _impl.ref.invoke
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<_ObjCBlock> block,
                    ffi.Pointer<ObjCObject> arg0,
                    NSRange arg1,
                    NSRange arg2,
                    ffi.Pointer<ffi.Bool> arg3)>>()
        .asFunction<
            void Function(
                ffi.Pointer<_ObjCBlock> block,
                ffi.Pointer<ObjCObject> arg0,
                NSRange arg1,
                NSRange arg2,
                ffi.Pointer<ffi.Bool> arg3)>()(_impl, arg0, arg1, arg2, arg3);
  }

  ffi.Pointer<_ObjCBlock> get pointer => _impl;
}

void _ObjCBlock10_fnPtrTrampoline(ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ffi.Bool> arg1) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ffi.Bool> arg1)>>()
      .asFunction<
          void Function(ffi.Pointer<ObjCObject> arg0,
              ffi.Pointer<ffi.Bool> arg1)>()(arg0, arg1);
}

final _ObjCBlock10_closureRegistry = <int, Function>{};
int _ObjCBlock10_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock10_registerClosure(Function fn) {
  final id = ++_ObjCBlock10_closureRegistryIndex;
  _ObjCBlock10_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock10_closureTrampoline(ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ffi.Bool> arg1) {
  return _ObjCBlock10_closureRegistry[block.ref.target.address]!(arg0, arg1);
}

class ObjCBlock10 {
  final ffi.Pointer<_ObjCBlock> _impl;
  final AVFAudio _lib;
  ObjCBlock10._(this._impl, this._lib);
  ObjCBlock10.fromFunctionPointer(
      this._lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ObjCObject> arg0,
                      ffi.Pointer<ffi.Bool> arg1)>>
          ptr)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<_ObjCBlock> block,
                            ffi.Pointer<ObjCObject> arg0,
                            ffi.Pointer<ffi.Bool> arg1)>(
                    _ObjCBlock10_fnPtrTrampoline)
                .cast(),
            ptr.cast());
  ObjCBlock10.fromFunction(
      this._lib,
      void Function(ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ffi.Bool> arg1)
          fn)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<_ObjCBlock> block,
                            ffi.Pointer<ObjCObject> arg0,
                            ffi.Pointer<ffi.Bool> arg1)>(
                    _ObjCBlock10_closureTrampoline)
                .cast(),
            _ObjCBlock10_registerClosure(fn));
  void call(ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ffi.Bool> arg1) {
    return _impl.ref.invoke
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<_ObjCBlock> block,
                    ffi.Pointer<ObjCObject> arg0,
                    ffi.Pointer<ffi.Bool> arg1)>>()
        .asFunction<
            void Function(
                ffi.Pointer<_ObjCBlock> block,
                ffi.Pointer<ObjCObject> arg0,
                ffi.Pointer<ffi.Bool> arg1)>()(_impl, arg0, arg1);
  }

  ffi.Pointer<_ObjCBlock> get pointer => _impl;
}

typedef NSStringEncoding = NSUInteger;

abstract class NSStringEncodingConversionOptions {
  static const int NSStringEncodingConversionAllowLossy = 1;
  static const int NSStringEncodingConversionExternalRepresentation = 2;
}

typedef NSRangePointer = ffi.Pointer<NSRange>;
typedef NSStringTransform = ffi.Pointer<ObjCObject>;
void _ObjCBlock11_fnPtrTrampoline(
    ffi.Pointer<_ObjCBlock> block, ffi.Pointer<unichar> arg0, int arg1) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<unichar> arg0, NSUInteger arg1)>>()
      .asFunction<
          void Function(ffi.Pointer<unichar> arg0, int arg1)>()(arg0, arg1);
}

final _ObjCBlock11_closureRegistry = <int, Function>{};
int _ObjCBlock11_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock11_registerClosure(Function fn) {
  final id = ++_ObjCBlock11_closureRegistryIndex;
  _ObjCBlock11_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock11_closureTrampoline(
    ffi.Pointer<_ObjCBlock> block, ffi.Pointer<unichar> arg0, int arg1) {
  return _ObjCBlock11_closureRegistry[block.ref.target.address]!(arg0, arg1);
}

class ObjCBlock11 {
  final ffi.Pointer<_ObjCBlock> _impl;
  final AVFAudio _lib;
  ObjCBlock11._(this._impl, this._lib);
  ObjCBlock11.fromFunctionPointer(
      this._lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<unichar> arg0, NSUInteger arg1)>>
          ptr)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                    ffi.Void Function(
                        ffi.Pointer<_ObjCBlock> block,
                        ffi.Pointer<unichar> arg0,
                        NSUInteger arg1)>(_ObjCBlock11_fnPtrTrampoline)
                .cast(),
            ptr.cast());
  ObjCBlock11.fromFunction(
      this._lib, void Function(ffi.Pointer<unichar> arg0, int arg1) fn)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                    ffi.Void Function(
                        ffi.Pointer<_ObjCBlock> block,
                        ffi.Pointer<unichar> arg0,
                        NSUInteger arg1)>(_ObjCBlock11_closureTrampoline)
                .cast(),
            _ObjCBlock11_registerClosure(fn));
  void call(ffi.Pointer<unichar> arg0, int arg1) {
    return _impl.ref.invoke
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<_ObjCBlock> block,
                    ffi.Pointer<unichar> arg0, NSUInteger arg1)>>()
        .asFunction<
            void Function(ffi.Pointer<_ObjCBlock> block,
                ffi.Pointer<unichar> arg0, int arg1)>()(_impl, arg0, arg1);
  }

  ffi.Pointer<_ObjCBlock> get pointer => _impl;
}

class __va_list_tag extends ffi.Struct {
  @ffi.UnsignedInt()
  external int gp_offset;

  @ffi.UnsignedInt()
  external int fp_offset;

  external ffi.Pointer<ffi.Void> overflow_arg_area;

  external ffi.Pointer<ffi.Void> reg_save_area;
}

void _ObjCBlock12_fnPtrTrampoline(
    ffi.Pointer<_ObjCBlock> block, ffi.Pointer<ffi.Void> arg0, int arg1) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void> arg0, NSUInteger arg1)>>()
      .asFunction<
          void Function(ffi.Pointer<ffi.Void> arg0, int arg1)>()(arg0, arg1);
}

final _ObjCBlock12_closureRegistry = <int, Function>{};
int _ObjCBlock12_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock12_registerClosure(Function fn) {
  final id = ++_ObjCBlock12_closureRegistryIndex;
  _ObjCBlock12_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock12_closureTrampoline(
    ffi.Pointer<_ObjCBlock> block, ffi.Pointer<ffi.Void> arg0, int arg1) {
  return _ObjCBlock12_closureRegistry[block.ref.target.address]!(arg0, arg1);
}

class ObjCBlock12 {
  final ffi.Pointer<_ObjCBlock> _impl;
  final AVFAudio _lib;
  ObjCBlock12._(this._impl, this._lib);
  ObjCBlock12.fromFunctionPointer(
      this._lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void> arg0, NSUInteger arg1)>>
          ptr)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                    ffi.Void Function(
                        ffi.Pointer<_ObjCBlock> block,
                        ffi.Pointer<ffi.Void> arg0,
                        NSUInteger arg1)>(_ObjCBlock12_fnPtrTrampoline)
                .cast(),
            ptr.cast());
  ObjCBlock12.fromFunction(
      this._lib, void Function(ffi.Pointer<ffi.Void> arg0, int arg1) fn)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                    ffi.Void Function(
                        ffi.Pointer<_ObjCBlock> block,
                        ffi.Pointer<ffi.Void> arg0,
                        NSUInteger arg1)>(_ObjCBlock12_closureTrampoline)
                .cast(),
            _ObjCBlock12_registerClosure(fn));
  void call(ffi.Pointer<ffi.Void> arg0, int arg1) {
    return _impl.ref.invoke
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<_ObjCBlock> block,
                    ffi.Pointer<ffi.Void> arg0, NSUInteger arg1)>>()
        .asFunction<
            void Function(ffi.Pointer<_ObjCBlock> block,
                ffi.Pointer<ffi.Void> arg0, int arg1)>()(_impl, arg0, arg1);
  }

  ffi.Pointer<_ObjCBlock> get pointer => _impl;
}

typedef NSLinguisticTagScheme = ffi.Pointer<ObjCObject>;

abstract class NSLinguisticTaggerOptions {
  static const int NSLinguisticTaggerOmitWords = 1;
  static const int NSLinguisticTaggerOmitPunctuation = 2;
  static const int NSLinguisticTaggerOmitWhitespace = 4;
  static const int NSLinguisticTaggerOmitOther = 8;
  static const int NSLinguisticTaggerJoinNames = 16;
}

class NSMutableString extends NSString {
  NSMutableString._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSMutableString] that points to the same underlying object as [other].
  static NSMutableString castFrom<T extends _ObjCWrapper>(T other) {
    return NSMutableString._(other._id, other._lib,
        retain: true, release: true);
  }

  /// Returns a [NSMutableString] that wraps the given raw object pointer.
  static NSMutableString castFromPointer(
      AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSMutableString._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSMutableString].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSMutableString1);
  }

  void replaceCharactersInRange_withString_(NSRange range, NSObject? aString) {
    return _lib._objc_msgSend_117(
        _id,
        _lib._sel_replaceCharactersInRange_withString_1,
        range,
        aString?._id ?? ffi.nullptr);
  }

  void insertString_atIndex_(NSObject? aString, int loc) {
    return _lib._objc_msgSend_110(_id, _lib._sel_insertString_atIndex_1,
        aString?._id ?? ffi.nullptr, loc);
  }

  void deleteCharactersInRange_(NSRange range) {
    return _lib._objc_msgSend_115(
        _id, _lib._sel_deleteCharactersInRange_1, range);
  }

  void appendString_(NSObject? aString) {
    return _lib._objc_msgSend_8(
        _id, _lib._sel_appendString_1, aString?._id ?? ffi.nullptr);
  }

  void appendFormat_(NSObject? format) {
    return _lib._objc_msgSend_8(
        _id, _lib._sel_appendFormat_1, format?._id ?? ffi.nullptr);
  }

  void setString_(NSObject? aString) {
    return _lib._objc_msgSend_8(
        _id, _lib._sel_setString_1, aString?._id ?? ffi.nullptr);
  }

  int replaceOccurrencesOfString_withString_options_range_(NSObject? target,
      NSObject? replacement, int options, NSRange searchRange) {
    return _lib._objc_msgSend_182(
        _id,
        _lib._sel_replaceOccurrencesOfString_withString_options_range_1,
        target?._id ?? ffi.nullptr,
        replacement?._id ?? ffi.nullptr,
        options,
        searchRange);
  }

  bool applyTransform_reverse_range_updatedRange_(NSStringTransform transform,
      bool reverse, NSRange range, NSRangePointer resultingRange) {
    return _lib._objc_msgSend_183(
        _id,
        _lib._sel_applyTransform_reverse_range_updatedRange_1,
        transform,
        reverse,
        range,
        resultingRange);
  }

  NSObject initWithCapacity_(int capacity) {
    final _ret =
        _lib._objc_msgSend_65(_id, _lib._sel_initWithCapacity_1, capacity);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject stringWithCapacity_(AVFAudio _lib, int capacity) {
    final _ret = _lib._objc_msgSend_65(
        _lib._class_NSMutableString1, _lib._sel_stringWithCapacity_1, capacity);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static ffi.Pointer<NSStringEncoding> getAvailableStringEncodings(
      AVFAudio _lib) {
    return _lib._objc_msgSend_154(
        _lib._class_NSMutableString1, _lib._sel_availableStringEncodings1);
  }

  static NSObject localizedNameOfStringEncoding_(AVFAudio _lib, int encoding) {
    final _ret = _lib._objc_msgSend_65(_lib._class_NSMutableString1,
        _lib._sel_localizedNameOfStringEncoding_1, encoding);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static int getDefaultCStringEncoding(AVFAudio _lib) {
    return _lib._objc_msgSend_10(
        _lib._class_NSMutableString1, _lib._sel_defaultCStringEncoding1);
  }

  static NSMutableString string(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSMutableString1, _lib._sel_string1);
    return NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableString stringWithString_(AVFAudio _lib, NSObject? string) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSMutableString1,
        _lib._sel_stringWithString_1, string?._id ?? ffi.nullptr);
    return NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableString stringWithCharacters_length_(
      AVFAudio _lib, ffi.Pointer<unichar> characters, int length) {
    final _ret = _lib._objc_msgSend_162(_lib._class_NSMutableString1,
        _lib._sel_stringWithCharacters_length_1, characters, length);
    return NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableString stringWithUTF8String_(
      AVFAudio _lib, ffi.Pointer<ffi.Char> nullTerminatedCString) {
    final _ret = _lib._objc_msgSend_163(_lib._class_NSMutableString1,
        _lib._sel_stringWithUTF8String_1, nullTerminatedCString);
    return NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableString stringWithFormat_(AVFAudio _lib, NSObject? format) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSMutableString1,
        _lib._sel_stringWithFormat_1, format?._id ?? ffi.nullptr);
    return NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableString localizedStringWithFormat_(
      AVFAudio _lib, NSObject? format) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSMutableString1,
        _lib._sel_localizedStringWithFormat_1, format?._id ?? ffi.nullptr);
    return NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableString stringWithCString_encoding_(
      AVFAudio _lib, ffi.Pointer<ffi.Char> cString, int enc) {
    final _ret = _lib._objc_msgSend_169(_lib._class_NSMutableString1,
        _lib._sel_stringWithCString_encoding_1, cString, enc);
    return NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableString stringWithContentsOfURL_encoding_error_(AVFAudio _lib,
      NSObject? url, int enc, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_170(
        _lib._class_NSMutableString1,
        _lib._sel_stringWithContentsOfURL_encoding_error_1,
        url?._id ?? ffi.nullptr,
        enc,
        error);
    return NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableString stringWithContentsOfFile_encoding_error_(AVFAudio _lib,
      NSObject? path, int enc, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_170(
        _lib._class_NSMutableString1,
        _lib._sel_stringWithContentsOfFile_encoding_error_1,
        path?._id ?? ffi.nullptr,
        enc,
        error);
    return NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableString stringWithContentsOfURL_usedEncoding_error_(
      AVFAudio _lib,
      NSObject? url,
      ffi.Pointer<NSStringEncoding> enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_171(
        _lib._class_NSMutableString1,
        _lib._sel_stringWithContentsOfURL_usedEncoding_error_1,
        url?._id ?? ffi.nullptr,
        enc,
        error);
    return NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableString stringWithContentsOfFile_usedEncoding_error_(
      AVFAudio _lib,
      NSObject? path,
      ffi.Pointer<NSStringEncoding> enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_171(
        _lib._class_NSMutableString1,
        _lib._sel_stringWithContentsOfFile_usedEncoding_error_1,
        path?._id ?? ffi.nullptr,
        enc,
        error);
    return NSMutableString._(_ret, _lib, retain: true, release: true);
  }

  static int
      stringEncodingForData_encodingOptions_convertedString_usedLossyConversion_(
          AVFAudio _lib,
          NSObject? data,
          NSObject? opts,
          ffi.Pointer<ffi.Pointer<ObjCObject>> string,
          ffi.Pointer<ffi.Bool> usedLossyConversion) {
    return _lib._objc_msgSend_172(
        _lib._class_NSMutableString1,
        _lib._sel_stringEncodingForData_encodingOptions_convertedString_usedLossyConversion_1,
        data?._id ?? ffi.nullptr,
        opts?._id ?? ffi.nullptr,
        string,
        usedLossyConversion);
  }

  static NSObject stringWithContentsOfFile_(AVFAudio _lib, NSObject? path) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSMutableString1,
        _lib._sel_stringWithContentsOfFile_1, path?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject stringWithContentsOfURL_(AVFAudio _lib, NSObject? url) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSMutableString1,
        _lib._sel_stringWithContentsOfURL_1, url?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject stringWithCString_length_(
      AVFAudio _lib, ffi.Pointer<ffi.Char> bytes, int length) {
    final _ret = _lib._objc_msgSend_169(_lib._class_NSMutableString1,
        _lib._sel_stringWithCString_length_1, bytes, length);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject stringWithCString_(
      AVFAudio _lib, ffi.Pointer<ffi.Char> bytes) {
    final _ret = _lib._objc_msgSend_163(
        _lib._class_NSMutableString1, _lib._sel_stringWithCString_1, bytes);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject pathWithComponents_(AVFAudio _lib, NSObject? components) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSMutableString1,
        _lib._sel_pathWithComponents_1, components?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableString new1(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSMutableString1, _lib._sel_new1);
    return NSMutableString._(_ret, _lib, retain: false, release: true);
  }

  static NSMutableString alloc(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSMutableString1, _lib._sel_alloc1);
    return NSMutableString._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSMutableString1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSMutableString1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(_lib._class_NSMutableString1,
        _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSMutableString1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSMutableString1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSMutableString1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSMutableString1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSMutableString1,
        _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSMutableString1, _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSDictionary extends NSObject {
  NSDictionary._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSDictionary] that points to the same underlying object as [other].
  static NSDictionary castFrom<T extends _ObjCWrapper>(T other) {
    return NSDictionary._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSDictionary] that wraps the given raw object pointer.
  static NSDictionary castFromPointer(
      AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSDictionary._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSDictionary].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSDictionary1);
  }

  int get count {
    return _lib._objc_msgSend_10(_id, _lib._sel_count1);
  }

  NSObject objectForKey_(NSObject aKey) {
    final _ret = _lib._objc_msgSend_13(_id, _lib._sel_objectForKey_1, aKey._id);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject keyEnumerator() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_keyEnumerator1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSDictionary init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary initWithObjects_forKeys_count_(
      ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
      ffi.Pointer<ffi.Pointer<ObjCObject>> keys,
      int cnt) {
    final _ret = _lib._objc_msgSend_184(
        _id, _lib._sel_initWithObjects_forKeys_count_1, objects, keys, cnt);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary initWithCoder_(NSObject? coder) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_initWithCoder_1, coder?._id ?? ffi.nullptr);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get allKeys {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_allKeys1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject allKeysForObject_(NSObject anObject) {
    final _ret =
        _lib._objc_msgSend_13(_id, _lib._sel_allKeysForObject_1, anObject._id);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get allValues {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_allValues1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get description {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_description1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get descriptionInStringsFileFormat {
    final _ret =
        _lib._objc_msgSend_2(_id, _lib._sel_descriptionInStringsFileFormat1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject descriptionWithLocale_(NSObject locale) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_descriptionWithLocale_1, locale._id);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject descriptionWithLocale_indent_(NSObject locale, int level) {
    final _ret = _lib._objc_msgSend_83(
        _id, _lib._sel_descriptionWithLocale_indent_1, locale._id, level);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool isEqualToDictionary_(NSObject? otherDictionary) {
    return _lib._objc_msgSend_0(_id, _lib._sel_isEqualToDictionary_1,
        otherDictionary?._id ?? ffi.nullptr);
  }

  NSObject objectEnumerator() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_objectEnumerator1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject objectsForKeys_notFoundMarker_(NSObject? keys, NSObject marker) {
    final _ret = _lib._objc_msgSend_39(
        _id,
        _lib._sel_objectsForKeys_notFoundMarker_1,
        keys?._id ?? ffi.nullptr,
        marker._id);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool writeToURL_error_(
      NSObject? url, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_89(
        _id, _lib._sel_writeToURL_error_1, url?._id ?? ffi.nullptr, error);
  }

  NSObject keysSortedByValueUsingSelector_(ffi.Pointer<ObjCSel> comparator) {
    final _ret = _lib._objc_msgSend_7(
        _id, _lib._sel_keysSortedByValueUsingSelector_1, comparator);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void getObjects_andKeys_count_(ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
      ffi.Pointer<ffi.Pointer<ObjCObject>> keys, int count) {
    return _lib._objc_msgSend_185(
        _id, _lib._sel_getObjects_andKeys_count_1, objects, keys, count);
  }

  NSObject objectForKeyedSubscript_(NSObject key) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_objectForKeyedSubscript_1, key._id);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void enumerateKeysAndObjectsUsingBlock_(ObjCBlock13 block) {
    return _lib._objc_msgSend_186(
        _id, _lib._sel_enumerateKeysAndObjectsUsingBlock_1, block._impl);
  }

  void enumerateKeysAndObjectsWithOptions_usingBlock_(
      int opts, ObjCBlock13 block) {
    return _lib._objc_msgSend_187(
        _id,
        _lib._sel_enumerateKeysAndObjectsWithOptions_usingBlock_1,
        opts,
        block._impl);
  }

  NSObject keysSortedByValueUsingComparator_(NSComparator cmptr) {
    final _ret = _lib._objc_msgSend_99(
        _id, _lib._sel_keysSortedByValueUsingComparator_1, cmptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject keysSortedByValueWithOptions_usingComparator_(
      int opts, NSComparator cmptr) {
    final _ret = _lib._objc_msgSend_100(_id,
        _lib._sel_keysSortedByValueWithOptions_usingComparator_1, opts, cmptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject keysOfEntriesPassingTest_(ObjCBlock14 predicate) {
    final _ret = _lib._objc_msgSend_188(
        _id, _lib._sel_keysOfEntriesPassingTest_1, predicate._impl);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject keysOfEntriesWithOptions_passingTest_(
      int opts, ObjCBlock14 predicate) {
    final _ret = _lib._objc_msgSend_189(
        _id,
        _lib._sel_keysOfEntriesWithOptions_passingTest_1,
        opts,
        predicate._impl);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void getObjects_andKeys_(ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
      ffi.Pointer<ffi.Pointer<ObjCObject>> keys) {
    return _lib._objc_msgSend_190(
        _id, _lib._sel_getObjects_andKeys_1, objects, keys);
  }

  static NSObject dictionaryWithContentsOfFile_(AVFAudio _lib, NSObject? path) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSDictionary1,
        _lib._sel_dictionaryWithContentsOfFile_1, path?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject dictionaryWithContentsOfURL_(AVFAudio _lib, NSObject? url) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSDictionary1,
        _lib._sel_dictionaryWithContentsOfURL_1, url?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject initWithContentsOfFile_(NSObject? path) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_initWithContentsOfFile_1, path?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject initWithContentsOfURL_(NSObject? url) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_initWithContentsOfURL_1, url?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool writeToFile_atomically_(NSObject? path, bool useAuxiliaryFile) {
    return _lib._objc_msgSend_107(_id, _lib._sel_writeToFile_atomically_1,
        path?._id ?? ffi.nullptr, useAuxiliaryFile);
  }

  bool writeToURL_atomically_(NSObject? url, bool atomically) {
    return _lib._objc_msgSend_107(_id, _lib._sel_writeToURL_atomically_1,
        url?._id ?? ffi.nullptr, atomically);
  }

  static NSDictionary dictionary(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSDictionary1, _lib._sel_dictionary1);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSDictionary dictionaryWithObject_forKey_(
      AVFAudio _lib, NSObject object, NSObject key) {
    final _ret = _lib._objc_msgSend_39(_lib._class_NSDictionary1,
        _lib._sel_dictionaryWithObject_forKey_1, object._id, key._id);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSDictionary dictionaryWithObjects_forKeys_count_(
      AVFAudio _lib,
      ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
      ffi.Pointer<ffi.Pointer<ObjCObject>> keys,
      int cnt) {
    final _ret = _lib._objc_msgSend_184(_lib._class_NSDictionary1,
        _lib._sel_dictionaryWithObjects_forKeys_count_1, objects, keys, cnt);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSDictionary dictionaryWithObjectsAndKeys_(
      AVFAudio _lib, NSObject firstObject) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSDictionary1,
        _lib._sel_dictionaryWithObjectsAndKeys_1, firstObject._id);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSDictionary dictionaryWithDictionary_(AVFAudio _lib, NSObject? dict) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSDictionary1,
        _lib._sel_dictionaryWithDictionary_1, dict?._id ?? ffi.nullptr);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSDictionary dictionaryWithObjects_forKeys_(
      AVFAudio _lib, NSObject? objects, NSObject? keys) {
    final _ret = _lib._objc_msgSend_39(
        _lib._class_NSDictionary1,
        _lib._sel_dictionaryWithObjects_forKeys_1,
        objects?._id ?? ffi.nullptr,
        keys?._id ?? ffi.nullptr);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary initWithObjectsAndKeys_(NSObject firstObject) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_initWithObjectsAndKeys_1, firstObject._id);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary initWithDictionary_(NSObject? otherDictionary) {
    final _ret = _lib._objc_msgSend_13(_id, _lib._sel_initWithDictionary_1,
        otherDictionary?._id ?? ffi.nullptr);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSDictionary initWithDictionary_copyItems_(
      NSObject? otherDictionary, bool flag) {
    final _ret = _lib._objc_msgSend_102(
        _id,
        _lib._sel_initWithDictionary_copyItems_1,
        otherDictionary?._id ?? ffi.nullptr,
        flag);
    return NSDictionary._(_ret, _lib, retain: false, release: true);
  }

  NSDictionary initWithObjects_forKeys_(NSObject? objects, NSObject? keys) {
    final _ret = _lib._objc_msgSend_39(_id, _lib._sel_initWithObjects_forKeys_1,
        objects?._id ?? ffi.nullptr, keys?._id ?? ffi.nullptr);
    return NSDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSObject initWithContentsOfURL_error_(
      NSObject? url, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_103(
        _id,
        _lib._sel_initWithContentsOfURL_error_1,
        url?._id ?? ffi.nullptr,
        error);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject dictionaryWithContentsOfURL_error_(AVFAudio _lib,
      NSObject? url, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_103(
        _lib._class_NSDictionary1,
        _lib._sel_dictionaryWithContentsOfURL_error_1,
        url?._id ?? ffi.nullptr,
        error);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject sharedKeySetForKeys_(AVFAudio _lib, NSObject? keys) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSDictionary1,
        _lib._sel_sharedKeySetForKeys_1, keys?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  int countByEnumeratingWithState_objects_count_(
      ffi.Pointer<NSFastEnumerationState> state,
      ffi.Pointer<ffi.Pointer<ObjCObject>> buffer,
      int len) {
    return _lib._objc_msgSend_191(
        _id,
        _lib._sel_countByEnumeratingWithState_objects_count_1,
        state,
        buffer,
        len);
  }

  int fileSize() {
    return _lib._objc_msgSend_77(_id, _lib._sel_fileSize1);
  }

  NSObject fileModificationDate() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_fileModificationDate1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject fileType() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_fileType1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  int filePosixPermissions() {
    return _lib._objc_msgSend_10(_id, _lib._sel_filePosixPermissions1);
  }

  NSObject fileOwnerAccountName() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_fileOwnerAccountName1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject fileGroupOwnerAccountName() {
    final _ret =
        _lib._objc_msgSend_2(_id, _lib._sel_fileGroupOwnerAccountName1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  int fileSystemNumber() {
    return _lib._objc_msgSend_11(_id, _lib._sel_fileSystemNumber1);
  }

  int fileSystemFileNumber() {
    return _lib._objc_msgSend_10(_id, _lib._sel_fileSystemFileNumber1);
  }

  bool fileExtensionHidden() {
    return _lib._objc_msgSend_9(_id, _lib._sel_fileExtensionHidden1);
  }

  int fileHFSCreatorCode() {
    return _lib._objc_msgSend_37(_id, _lib._sel_fileHFSCreatorCode1);
  }

  int fileHFSTypeCode() {
    return _lib._objc_msgSend_37(_id, _lib._sel_fileHFSTypeCode1);
  }

  bool fileIsImmutable() {
    return _lib._objc_msgSend_9(_id, _lib._sel_fileIsImmutable1);
  }

  bool fileIsAppendOnly() {
    return _lib._objc_msgSend_9(_id, _lib._sel_fileIsAppendOnly1);
  }

  NSObject fileCreationDate() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_fileCreationDate1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject fileOwnerAccountID() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_fileOwnerAccountID1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject fileGroupOwnerAccountID() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_fileGroupOwnerAccountID1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSObject valueForKey_(NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_valueForKey_1, key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSDictionary new1(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSDictionary1, _lib._sel_new1);
    return NSDictionary._(_ret, _lib, retain: false, release: true);
  }

  static NSDictionary alloc(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSDictionary1, _lib._sel_alloc1);
    return NSDictionary._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSDictionary1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSDictionary1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSDictionary1, _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSDictionary1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSDictionary1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSDictionary1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSDictionary1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSDictionary1, _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSDictionary1, _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

void _ObjCBlock13_fnPtrTrampoline(
    ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0,
    ffi.Pointer<ObjCObject> arg1,
    ffi.Pointer<ffi.Bool> arg2) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ObjCObject> arg0,
                  ffi.Pointer<ObjCObject> arg1, ffi.Pointer<ffi.Bool> arg2)>>()
      .asFunction<
          void Function(
              ffi.Pointer<ObjCObject> arg0,
              ffi.Pointer<ObjCObject> arg1,
              ffi.Pointer<ffi.Bool> arg2)>()(arg0, arg1, arg2);
}

final _ObjCBlock13_closureRegistry = <int, Function>{};
int _ObjCBlock13_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock13_registerClosure(Function fn) {
  final id = ++_ObjCBlock13_closureRegistryIndex;
  _ObjCBlock13_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock13_closureTrampoline(
    ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0,
    ffi.Pointer<ObjCObject> arg1,
    ffi.Pointer<ffi.Bool> arg2) {
  return _ObjCBlock13_closureRegistry[block.ref.target.address]!(
      arg0, arg1, arg2);
}

class ObjCBlock13 {
  final ffi.Pointer<_ObjCBlock> _impl;
  final AVFAudio _lib;
  ObjCBlock13._(this._impl, this._lib);
  ObjCBlock13.fromFunctionPointer(
      this._lib,
      ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1, ffi.Pointer<ffi.Bool> arg2)>>
          ptr)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<_ObjCBlock> block,
                            ffi.Pointer<ObjCObject> arg0,
                            ffi.Pointer<ObjCObject> arg1,
                            ffi.Pointer<ffi.Bool> arg2)>(
                    _ObjCBlock13_fnPtrTrampoline)
                .cast(),
            ptr.cast());
  ObjCBlock13.fromFunction(
      this._lib,
      void Function(ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1,
              ffi.Pointer<ffi.Bool> arg2)
          fn)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<_ObjCBlock> block,
                            ffi.Pointer<ObjCObject> arg0,
                            ffi.Pointer<ObjCObject> arg1,
                            ffi.Pointer<ffi.Bool> arg2)>(
                    _ObjCBlock13_closureTrampoline)
                .cast(),
            _ObjCBlock13_registerClosure(fn));
  void call(ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1,
      ffi.Pointer<ffi.Bool> arg2) {
    return _impl.ref.invoke
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<_ObjCBlock> block,
                    ffi.Pointer<ObjCObject> arg0,
                    ffi.Pointer<ObjCObject> arg1,
                    ffi.Pointer<ffi.Bool> arg2)>>()
        .asFunction<
            void Function(
                ffi.Pointer<_ObjCBlock> block,
                ffi.Pointer<ObjCObject> arg0,
                ffi.Pointer<ObjCObject> arg1,
                ffi.Pointer<ffi.Bool> arg2)>()(_impl, arg0, arg1, arg2);
  }

  ffi.Pointer<_ObjCBlock> get pointer => _impl;
}

bool _ObjCBlock14_fnPtrTrampoline(
    ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0,
    ffi.Pointer<ObjCObject> arg1,
    ffi.Pointer<ffi.Bool> arg2) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Bool Function(ffi.Pointer<ObjCObject> arg0,
                  ffi.Pointer<ObjCObject> arg1, ffi.Pointer<ffi.Bool> arg2)>>()
      .asFunction<
          bool Function(
              ffi.Pointer<ObjCObject> arg0,
              ffi.Pointer<ObjCObject> arg1,
              ffi.Pointer<ffi.Bool> arg2)>()(arg0, arg1, arg2);
}

final _ObjCBlock14_closureRegistry = <int, Function>{};
int _ObjCBlock14_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock14_registerClosure(Function fn) {
  final id = ++_ObjCBlock14_closureRegistryIndex;
  _ObjCBlock14_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

bool _ObjCBlock14_closureTrampoline(
    ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0,
    ffi.Pointer<ObjCObject> arg1,
    ffi.Pointer<ffi.Bool> arg2) {
  return _ObjCBlock14_closureRegistry[block.ref.target.address]!(
      arg0, arg1, arg2);
}

class ObjCBlock14 {
  final ffi.Pointer<_ObjCBlock> _impl;
  final AVFAudio _lib;
  ObjCBlock14._(this._impl, this._lib);
  ObjCBlock14.fromFunctionPointer(
      this._lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Bool Function(
                      ffi.Pointer<ObjCObject> arg0,
                      ffi.Pointer<ObjCObject> arg1,
                      ffi.Pointer<ffi.Bool> arg2)>>
          ptr)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                        ffi.Bool Function(
                            ffi.Pointer<_ObjCBlock> block,
                            ffi.Pointer<ObjCObject> arg0,
                            ffi.Pointer<ObjCObject> arg1,
                            ffi.Pointer<ffi.Bool> arg2)>(
                    _ObjCBlock14_fnPtrTrampoline, false)
                .cast(),
            ptr.cast());
  ObjCBlock14.fromFunction(
      this._lib,
      bool Function(ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1,
              ffi.Pointer<ffi.Bool> arg2)
          fn)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                        ffi.Bool Function(
                            ffi.Pointer<_ObjCBlock> block,
                            ffi.Pointer<ObjCObject> arg0,
                            ffi.Pointer<ObjCObject> arg1,
                            ffi.Pointer<ffi.Bool> arg2)>(
                    _ObjCBlock14_closureTrampoline, false)
                .cast(),
            _ObjCBlock14_registerClosure(fn));
  bool call(ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1,
      ffi.Pointer<ffi.Bool> arg2) {
    return _impl.ref.invoke
        .cast<
            ffi.NativeFunction<
                ffi.Bool Function(
                    ffi.Pointer<_ObjCBlock> block,
                    ffi.Pointer<ObjCObject> arg0,
                    ffi.Pointer<ObjCObject> arg1,
                    ffi.Pointer<ffi.Bool> arg2)>>()
        .asFunction<
            bool Function(
                ffi.Pointer<_ObjCBlock> block,
                ffi.Pointer<ObjCObject> arg0,
                ffi.Pointer<ObjCObject> arg1,
                ffi.Pointer<ffi.Bool> arg2)>()(_impl, arg0, arg1, arg2);
  }

  ffi.Pointer<_ObjCBlock> get pointer => _impl;
}

class NSFastEnumerationState extends ffi.Struct {
  @ffi.UnsignedLong()
  external int state;

  external ffi.Pointer<ffi.Pointer<ObjCObject>> itemsPtr;

  external ffi.Pointer<ffi.UnsignedLong> mutationsPtr;

  @ffi.Array.multi([5])
  external ffi.Array<ffi.UnsignedLong> extra;
}

typedef OSType = FourCharCode;

class NSMutableDictionary extends NSDictionary {
  NSMutableDictionary._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSMutableDictionary] that points to the same underlying object as [other].
  static NSMutableDictionary castFrom<T extends _ObjCWrapper>(T other) {
    return NSMutableDictionary._(other._id, other._lib,
        retain: true, release: true);
  }

  /// Returns a [NSMutableDictionary] that wraps the given raw object pointer.
  static NSMutableDictionary castFromPointer(
      AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSMutableDictionary._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSMutableDictionary].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSMutableDictionary1);
  }

  void removeObjectForKey_(NSObject aKey) {
    return _lib._objc_msgSend_8(_id, _lib._sel_removeObjectForKey_1, aKey._id);
  }

  void setObject_forKey_(NSObject anObject, NSObject aKey) {
    return _lib._objc_msgSend_19(
        _id, _lib._sel_setObject_forKey_1, anObject._id, aKey._id);
  }

  @override
  NSMutableDictionary init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  NSMutableDictionary initWithCapacity_(int numItems) {
    final _ret =
        _lib._objc_msgSend_65(_id, _lib._sel_initWithCapacity_1, numItems);
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableDictionary initWithCoder_(NSObject? coder) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_initWithCoder_1, coder?._id ?? ffi.nullptr);
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  void addEntriesFromDictionary_(NSObject? otherDictionary) {
    return _lib._objc_msgSend_8(_id, _lib._sel_addEntriesFromDictionary_1,
        otherDictionary?._id ?? ffi.nullptr);
  }

  void removeAllObjects() {
    return _lib._objc_msgSend_1(_id, _lib._sel_removeAllObjects1);
  }

  void removeObjectsForKeys_(NSObject? keyArray) {
    return _lib._objc_msgSend_8(
        _id, _lib._sel_removeObjectsForKeys_1, keyArray?._id ?? ffi.nullptr);
  }

  void setDictionary_(NSObject? otherDictionary) {
    return _lib._objc_msgSend_8(
        _id, _lib._sel_setDictionary_1, otherDictionary?._id ?? ffi.nullptr);
  }

  void setObject_forKeyedSubscript_(NSObject obj, NSObject key) {
    return _lib._objc_msgSend_19(
        _id, _lib._sel_setObject_forKeyedSubscript_1, obj._id, key._id);
  }

  static NSMutableDictionary dictionaryWithCapacity_(
      AVFAudio _lib, int numItems) {
    final _ret = _lib._objc_msgSend_65(_lib._class_NSMutableDictionary1,
        _lib._sel_dictionaryWithCapacity_1, numItems);
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSObject dictionaryWithContentsOfFile_(AVFAudio _lib, NSObject? path) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSMutableDictionary1,
        _lib._sel_dictionaryWithContentsOfFile_1, path?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject dictionaryWithContentsOfURL_(AVFAudio _lib, NSObject? url) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSMutableDictionary1,
        _lib._sel_dictionaryWithContentsOfURL_1, url?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSObject initWithContentsOfFile_(NSObject? path) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_initWithContentsOfFile_1, path?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSObject initWithContentsOfURL_(NSObject? url) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_initWithContentsOfURL_1, url?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject dictionaryWithSharedKeySet_(AVFAudio _lib, NSObject keyset) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSMutableDictionary1,
        _lib._sel_dictionaryWithSharedKeySet_1, keyset._id);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void setValue_forKey_(NSObject value, NSObject? key) {
    return _lib._objc_msgSend_19(
        _id, _lib._sel_setValue_forKey_1, value._id, key?._id ?? ffi.nullptr);
  }

  static NSMutableDictionary dictionary(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSMutableDictionary1, _lib._sel_dictionary1);
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableDictionary dictionaryWithObject_forKey_(
      AVFAudio _lib, NSObject object, NSObject key) {
    final _ret = _lib._objc_msgSend_39(_lib._class_NSMutableDictionary1,
        _lib._sel_dictionaryWithObject_forKey_1, object._id, key._id);
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableDictionary dictionaryWithObjects_forKeys_count_(
      AVFAudio _lib,
      ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
      ffi.Pointer<ffi.Pointer<ObjCObject>> keys,
      int cnt) {
    final _ret = _lib._objc_msgSend_184(_lib._class_NSMutableDictionary1,
        _lib._sel_dictionaryWithObjects_forKeys_count_1, objects, keys, cnt);
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableDictionary dictionaryWithObjectsAndKeys_(
      AVFAudio _lib, NSObject firstObject) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSMutableDictionary1,
        _lib._sel_dictionaryWithObjectsAndKeys_1, firstObject._id);
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableDictionary dictionaryWithDictionary_(
      AVFAudio _lib, NSObject? dict) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSMutableDictionary1,
        _lib._sel_dictionaryWithDictionary_1, dict?._id ?? ffi.nullptr);
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableDictionary dictionaryWithObjects_forKeys_(
      AVFAudio _lib, NSObject? objects, NSObject? keys) {
    final _ret = _lib._objc_msgSend_39(
        _lib._class_NSMutableDictionary1,
        _lib._sel_dictionaryWithObjects_forKeys_1,
        objects?._id ?? ffi.nullptr,
        keys?._id ?? ffi.nullptr);
    return NSMutableDictionary._(_ret, _lib, retain: true, release: true);
  }

  static NSObject dictionaryWithContentsOfURL_error_(AVFAudio _lib,
      NSObject? url, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_103(
        _lib._class_NSMutableDictionary1,
        _lib._sel_dictionaryWithContentsOfURL_error_1,
        url?._id ?? ffi.nullptr,
        error);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject sharedKeySetForKeys_(AVFAudio _lib, NSObject? keys) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSMutableDictionary1,
        _lib._sel_sharedKeySetForKeys_1, keys?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableDictionary new1(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSMutableDictionary1, _lib._sel_new1);
    return NSMutableDictionary._(_ret, _lib, retain: false, release: true);
  }

  static NSMutableDictionary alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSMutableDictionary1, _lib._sel_alloc1);
    return NSMutableDictionary._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSMutableDictionary1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSMutableDictionary1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(_lib._class_NSMutableDictionary1,
        _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSMutableDictionary1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSMutableDictionary1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSMutableDictionary1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSMutableDictionary1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSMutableDictionary1,
        _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSMutableDictionary1, _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSSet extends NSObject {
  NSSet._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSSet] that points to the same underlying object as [other].
  static NSSet castFrom<T extends _ObjCWrapper>(T other) {
    return NSSet._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSSet] that wraps the given raw object pointer.
  static NSSet castFromPointer(AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSSet._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSSet].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSSet1);
  }

  int get count {
    return _lib._objc_msgSend_10(_id, _lib._sel_count1);
  }

  NSObject member_(NSObject object) {
    final _ret = _lib._objc_msgSend_13(_id, _lib._sel_member_1, object._id);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject objectEnumerator() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_objectEnumerator1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSSet init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  NSSet initWithObjects_count_(
      ffi.Pointer<ffi.Pointer<ObjCObject>> objects, int cnt) {
    final _ret = _lib._objc_msgSend_82(
        _id, _lib._sel_initWithObjects_count_1, objects, cnt);
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  NSSet initWithCoder_(NSObject? coder) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_initWithCoder_1, coder?._id ?? ffi.nullptr);
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get allObjects {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_allObjects1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject anyObject() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_anyObject1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool containsObject_(NSObject anObject) {
    return _lib._objc_msgSend_0(_id, _lib._sel_containsObject_1, anObject._id);
  }

  NSObject? get description {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_description1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject descriptionWithLocale_(NSObject locale) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_descriptionWithLocale_1, locale._id);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool intersectsSet_(NSObject? otherSet) {
    return _lib._objc_msgSend_0(
        _id, _lib._sel_intersectsSet_1, otherSet?._id ?? ffi.nullptr);
  }

  bool isEqualToSet_(NSObject? otherSet) {
    return _lib._objc_msgSend_0(
        _id, _lib._sel_isEqualToSet_1, otherSet?._id ?? ffi.nullptr);
  }

  bool isSubsetOfSet_(NSObject? otherSet) {
    return _lib._objc_msgSend_0(
        _id, _lib._sel_isSubsetOfSet_1, otherSet?._id ?? ffi.nullptr);
  }

  void makeObjectsPerformSelector_(ffi.Pointer<ObjCSel> aSelector) {
    return _lib._objc_msgSend_6(
        _id, _lib._sel_makeObjectsPerformSelector_1, aSelector);
  }

  void makeObjectsPerformSelector_withObject_(
      ffi.Pointer<ObjCSel> aSelector, NSObject argument) {
    return _lib._objc_msgSend_33(
        _id,
        _lib._sel_makeObjectsPerformSelector_withObject_1,
        aSelector,
        argument._id);
  }

  NSObject setByAddingObject_(NSObject anObject) {
    final _ret =
        _lib._objc_msgSend_13(_id, _lib._sel_setByAddingObject_1, anObject._id);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject setByAddingObjectsFromSet_(NSObject? other) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_setByAddingObjectsFromSet_1, other?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject setByAddingObjectsFromArray_(NSObject? other) {
    final _ret = _lib._objc_msgSend_13(_id,
        _lib._sel_setByAddingObjectsFromArray_1, other?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void enumerateObjectsUsingBlock_(ObjCBlock10 block) {
    return _lib._objc_msgSend_147(
        _id, _lib._sel_enumerateObjectsUsingBlock_1, block._impl);
  }

  void enumerateObjectsWithOptions_usingBlock_(int opts, ObjCBlock10 block) {
    return _lib._objc_msgSend_192(_id,
        _lib._sel_enumerateObjectsWithOptions_usingBlock_1, opts, block._impl);
  }

  NSObject objectsPassingTest_(ObjCBlock15 predicate) {
    final _ret = _lib._objc_msgSend_193(
        _id, _lib._sel_objectsPassingTest_1, predicate._impl);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject objectsWithOptions_passingTest_(int opts, ObjCBlock15 predicate) {
    final _ret = _lib._objc_msgSend_194(
        _id, _lib._sel_objectsWithOptions_passingTest_1, opts, predicate._impl);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSSet set1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSSet1, _lib._sel_set1);
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static NSSet setWithObject_(AVFAudio _lib, NSObject object) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSSet1, _lib._sel_setWithObject_1, object._id);
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static NSSet setWithObjects_count_(
      AVFAudio _lib, ffi.Pointer<ffi.Pointer<ObjCObject>> objects, int cnt) {
    final _ret = _lib._objc_msgSend_82(
        _lib._class_NSSet1, _lib._sel_setWithObjects_count_1, objects, cnt);
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static NSSet setWithObjects_(AVFAudio _lib, NSObject firstObj) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSSet1, _lib._sel_setWithObjects_1, firstObj._id);
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static NSSet setWithSet_(AVFAudio _lib, NSObject? set) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSSet1, _lib._sel_setWithSet_1, set?._id ?? ffi.nullptr);
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  static NSSet setWithArray_(AVFAudio _lib, NSObject? array) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSSet1,
        _lib._sel_setWithArray_1, array?._id ?? ffi.nullptr);
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  NSSet initWithObjects_(NSObject firstObj) {
    final _ret =
        _lib._objc_msgSend_13(_id, _lib._sel_initWithObjects_1, firstObj._id);
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  NSSet initWithSet_(NSObject? set) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_initWithSet_1, set?._id ?? ffi.nullptr);
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  NSSet initWithSet_copyItems_(NSObject? set, bool flag) {
    final _ret = _lib._objc_msgSend_102(
        _id, _lib._sel_initWithSet_copyItems_1, set?._id ?? ffi.nullptr, flag);
    return NSSet._(_ret, _lib, retain: false, release: true);
  }

  NSSet initWithArray_(NSObject? array) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_initWithArray_1, array?._id ?? ffi.nullptr);
    return NSSet._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSObject valueForKey_(NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_valueForKey_1, key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  @override
  void setValue_forKey_(NSObject value, NSObject? key) {
    return _lib._objc_msgSend_19(
        _id, _lib._sel_setValue_forKey_1, value._id, key?._id ?? ffi.nullptr);
  }

  @override
  void addObserver_forKeyPath_options_context_(NSObject? observer,
      NSObject? keyPath, int options, ffi.Pointer<ffi.Void> context) {
    return _lib._objc_msgSend_23(
        _id,
        _lib._sel_addObserver_forKeyPath_options_context_1,
        observer?._id ?? ffi.nullptr,
        keyPath?._id ?? ffi.nullptr,
        options,
        context);
  }

  @override
  void removeObserver_forKeyPath_context_(
      NSObject? observer, NSObject? keyPath, ffi.Pointer<ffi.Void> context) {
    return _lib._objc_msgSend_24(
        _id,
        _lib._sel_removeObserver_forKeyPath_context_1,
        observer?._id ?? ffi.nullptr,
        keyPath?._id ?? ffi.nullptr,
        context);
  }

  @override
  void removeObserver_forKeyPath_(NSObject? observer, NSObject? keyPath) {
    return _lib._objc_msgSend_19(_id, _lib._sel_removeObserver_forKeyPath_1,
        observer?._id ?? ffi.nullptr, keyPath?._id ?? ffi.nullptr);
  }

  NSObject sortedArrayUsingDescriptors_(NSObject? sortDescriptors) {
    final _ret = _lib._objc_msgSend_13(
        _id,
        _lib._sel_sortedArrayUsingDescriptors_1,
        sortDescriptors?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject filteredSetUsingPredicate_(NSObject? predicate) {
    final _ret = _lib._objc_msgSend_13(_id,
        _lib._sel_filteredSetUsingPredicate_1, predicate?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSSet new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSSet1, _lib._sel_new1);
    return NSSet._(_ret, _lib, retain: false, release: true);
  }

  static NSSet alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSSet1, _lib._sel_alloc1);
    return NSSet._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSSet1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSSet1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSSet1, _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSSet1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSSet1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSSet1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSSet1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSSet1, _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSSet1, _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

bool _ObjCBlock15_fnPtrTrampoline(ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ffi.Bool> arg1) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Bool Function(
                  ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ffi.Bool> arg1)>>()
      .asFunction<
          bool Function(ffi.Pointer<ObjCObject> arg0,
              ffi.Pointer<ffi.Bool> arg1)>()(arg0, arg1);
}

final _ObjCBlock15_closureRegistry = <int, Function>{};
int _ObjCBlock15_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock15_registerClosure(Function fn) {
  final id = ++_ObjCBlock15_closureRegistryIndex;
  _ObjCBlock15_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

bool _ObjCBlock15_closureTrampoline(ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ffi.Bool> arg1) {
  return _ObjCBlock15_closureRegistry[block.ref.target.address]!(arg0, arg1);
}

class ObjCBlock15 {
  final ffi.Pointer<_ObjCBlock> _impl;
  final AVFAudio _lib;
  ObjCBlock15._(this._impl, this._lib);
  ObjCBlock15.fromFunctionPointer(
      this._lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Bool Function(ffi.Pointer<ObjCObject> arg0,
                      ffi.Pointer<ffi.Bool> arg1)>>
          ptr)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                        ffi.Bool Function(
                            ffi.Pointer<_ObjCBlock> block,
                            ffi.Pointer<ObjCObject> arg0,
                            ffi.Pointer<ffi.Bool> arg1)>(
                    _ObjCBlock15_fnPtrTrampoline, false)
                .cast(),
            ptr.cast());
  ObjCBlock15.fromFunction(
      this._lib,
      bool Function(ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ffi.Bool> arg1)
          fn)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                        ffi.Bool Function(
                            ffi.Pointer<_ObjCBlock> block,
                            ffi.Pointer<ObjCObject> arg0,
                            ffi.Pointer<ffi.Bool> arg1)>(
                    _ObjCBlock15_closureTrampoline, false)
                .cast(),
            _ObjCBlock15_registerClosure(fn));
  bool call(ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ffi.Bool> arg1) {
    return _impl.ref.invoke
        .cast<
            ffi.NativeFunction<
                ffi.Bool Function(
                    ffi.Pointer<_ObjCBlock> block,
                    ffi.Pointer<ObjCObject> arg0,
                    ffi.Pointer<ffi.Bool> arg1)>>()
        .asFunction<
            bool Function(
                ffi.Pointer<_ObjCBlock> block,
                ffi.Pointer<ObjCObject> arg0,
                ffi.Pointer<ffi.Bool> arg1)>()(_impl, arg0, arg1);
  }

  ffi.Pointer<_ObjCBlock> get pointer => _impl;
}

class NSMutableSet extends NSSet {
  NSMutableSet._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSMutableSet] that points to the same underlying object as [other].
  static NSMutableSet castFrom<T extends _ObjCWrapper>(T other) {
    return NSMutableSet._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSMutableSet] that wraps the given raw object pointer.
  static NSMutableSet castFromPointer(
      AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSMutableSet._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSMutableSet].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSMutableSet1);
  }

  void addObject_(NSObject object) {
    return _lib._objc_msgSend_8(_id, _lib._sel_addObject_1, object._id);
  }

  void removeObject_(NSObject object) {
    return _lib._objc_msgSend_8(_id, _lib._sel_removeObject_1, object._id);
  }

  @override
  NSMutableSet initWithCoder_(NSObject? coder) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_initWithCoder_1, coder?._id ?? ffi.nullptr);
    return NSMutableSet._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableSet init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSMutableSet._(_ret, _lib, retain: true, release: true);
  }

  NSMutableSet initWithCapacity_(int numItems) {
    final _ret =
        _lib._objc_msgSend_65(_id, _lib._sel_initWithCapacity_1, numItems);
    return NSMutableSet._(_ret, _lib, retain: true, release: true);
  }

  void addObjectsFromArray_(NSObject? array) {
    return _lib._objc_msgSend_8(
        _id, _lib._sel_addObjectsFromArray_1, array?._id ?? ffi.nullptr);
  }

  void intersectSet_(NSObject? otherSet) {
    return _lib._objc_msgSend_8(
        _id, _lib._sel_intersectSet_1, otherSet?._id ?? ffi.nullptr);
  }

  void minusSet_(NSObject? otherSet) {
    return _lib._objc_msgSend_8(
        _id, _lib._sel_minusSet_1, otherSet?._id ?? ffi.nullptr);
  }

  void removeAllObjects() {
    return _lib._objc_msgSend_1(_id, _lib._sel_removeAllObjects1);
  }

  void unionSet_(NSObject? otherSet) {
    return _lib._objc_msgSend_8(
        _id, _lib._sel_unionSet_1, otherSet?._id ?? ffi.nullptr);
  }

  void setSet_(NSObject? otherSet) {
    return _lib._objc_msgSend_8(
        _id, _lib._sel_setSet_1, otherSet?._id ?? ffi.nullptr);
  }

  static NSMutableSet setWithCapacity_(AVFAudio _lib, int numItems) {
    final _ret = _lib._objc_msgSend_65(
        _lib._class_NSMutableSet1, _lib._sel_setWithCapacity_1, numItems);
    return NSMutableSet._(_ret, _lib, retain: true, release: true);
  }

  void filterUsingPredicate_(NSObject? predicate) {
    return _lib._objc_msgSend_8(
        _id, _lib._sel_filterUsingPredicate_1, predicate?._id ?? ffi.nullptr);
  }

  static NSMutableSet set1(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSMutableSet1, _lib._sel_set1);
    return NSMutableSet._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableSet setWithObject_(AVFAudio _lib, NSObject object) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSMutableSet1, _lib._sel_setWithObject_1, object._id);
    return NSMutableSet._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableSet setWithObjects_count_(
      AVFAudio _lib, ffi.Pointer<ffi.Pointer<ObjCObject>> objects, int cnt) {
    final _ret = _lib._objc_msgSend_82(_lib._class_NSMutableSet1,
        _lib._sel_setWithObjects_count_1, objects, cnt);
    return NSMutableSet._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableSet setWithObjects_(AVFAudio _lib, NSObject firstObj) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSMutableSet1, _lib._sel_setWithObjects_1, firstObj._id);
    return NSMutableSet._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableSet setWithSet_(AVFAudio _lib, NSObject? set) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSMutableSet1,
        _lib._sel_setWithSet_1, set?._id ?? ffi.nullptr);
    return NSMutableSet._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableSet setWithArray_(AVFAudio _lib, NSObject? array) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSMutableSet1,
        _lib._sel_setWithArray_1, array?._id ?? ffi.nullptr);
    return NSMutableSet._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableSet new1(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSMutableSet1, _lib._sel_new1);
    return NSMutableSet._(_ret, _lib, retain: false, release: true);
  }

  static NSMutableSet alloc(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSMutableSet1, _lib._sel_alloc1);
    return NSMutableSet._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSMutableSet1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSMutableSet1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSMutableSet1, _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSMutableSet1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSMutableSet1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSMutableSet1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSMutableSet1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSMutableSet1, _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSMutableSet1, _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSNotification extends NSObject {
  NSNotification._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSNotification] that points to the same underlying object as [other].
  static NSNotification castFrom<T extends _ObjCWrapper>(T other) {
    return NSNotification._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSNotification] that wraps the given raw object pointer.
  static NSNotification castFromPointer(
      AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSNotification._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSNotification].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSNotification1);
  }

  NSNotificationName get name {
    return _lib._objc_msgSend_2(_id, _lib._sel_name1);
  }

  NSObject get object {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_object1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get userInfo {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_userInfo1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSNotification initWithName_object_userInfo_(
      NSNotificationName name, NSObject object, NSObject? userInfo) {
    final _ret = _lib._objc_msgSend_35(
        _id,
        _lib._sel_initWithName_object_userInfo_1,
        name,
        object._id,
        userInfo?._id ?? ffi.nullptr);
    return NSNotification._(_ret, _lib, retain: true, release: true);
  }

  NSNotification initWithCoder_(NSObject? coder) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_initWithCoder_1, coder?._id ?? ffi.nullptr);
    return NSNotification._(_ret, _lib, retain: true, release: true);
  }

  static NSNotification notificationWithName_object_(
      AVFAudio _lib, NSNotificationName aName, NSObject anObject) {
    final _ret = _lib._objc_msgSend_39(_lib._class_NSNotification1,
        _lib._sel_notificationWithName_object_1, aName, anObject._id);
    return NSNotification._(_ret, _lib, retain: true, release: true);
  }

  static NSNotification notificationWithName_object_userInfo_(AVFAudio _lib,
      NSNotificationName aName, NSObject anObject, NSObject? aUserInfo) {
    final _ret = _lib._objc_msgSend_35(
        _lib._class_NSNotification1,
        _lib._sel_notificationWithName_object_userInfo_1,
        aName,
        anObject._id,
        aUserInfo?._id ?? ffi.nullptr);
    return NSNotification._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSNotification init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSNotification._(_ret, _lib, retain: true, release: true);
  }

  static NSNotification new1(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSNotification1, _lib._sel_new1);
    return NSNotification._(_ret, _lib, retain: false, release: true);
  }

  static NSNotification alloc(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSNotification1, _lib._sel_alloc1);
    return NSNotification._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSNotification1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSNotification1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(_lib._class_NSNotification1,
        _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSNotification1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSNotification1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSNotification1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSNotification1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSNotification1, _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSNotification1, _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

typedef NSNotificationName = ffi.Pointer<ObjCObject>;

class NSBundle extends NSObject {
  NSBundle._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSBundle] that points to the same underlying object as [other].
  static NSBundle castFrom<T extends _ObjCWrapper>(T other) {
    return NSBundle._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSBundle] that wraps the given raw object pointer.
  static NSBundle castFromPointer(AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSBundle._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSBundle].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSBundle1);
  }

  static NSObject? getMainBundle(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSBundle1, _lib._sel_mainBundle1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSBundle bundleWithPath_(AVFAudio _lib, NSObject? path) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSBundle1,
        _lib._sel_bundleWithPath_1, path?._id ?? ffi.nullptr);
    return NSBundle._(_ret, _lib, retain: true, release: true);
  }

  NSBundle initWithPath_(NSObject? path) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_initWithPath_1, path?._id ?? ffi.nullptr);
    return NSBundle._(_ret, _lib, retain: true, release: true);
  }

  static NSBundle bundleWithURL_(AVFAudio _lib, NSObject? url) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSBundle1,
        _lib._sel_bundleWithURL_1, url?._id ?? ffi.nullptr);
    return NSBundle._(_ret, _lib, retain: true, release: true);
  }

  NSBundle initWithURL_(NSObject? url) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_initWithURL_1, url?._id ?? ffi.nullptr);
    return NSBundle._(_ret, _lib, retain: true, release: true);
  }

  static NSObject bundleForClass_(AVFAudio _lib, NSObject aClass) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSBundle1, _lib._sel_bundleForClass_1, aClass._id);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject bundleWithIdentifier_(AVFAudio _lib, NSObject? identifier) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSBundle1,
        _lib._sel_bundleWithIdentifier_1, identifier?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? getAllBundles(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSBundle1, _lib._sel_allBundles1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? getAllFrameworks(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSBundle1, _lib._sel_allFrameworks1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool load() {
    return _lib._objc_msgSend_9(_id, _lib._sel_load1);
  }

  bool get loaded {
    return _lib._objc_msgSend_9(_id, _lib._sel_isLoaded1);
  }

  bool unload() {
    return _lib._objc_msgSend_9(_id, _lib._sel_unload1);
  }

  bool preflightAndReturnError_(ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_195(
        _id, _lib._sel_preflightAndReturnError_1, error);
  }

  bool loadAndReturnError_(ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_195(_id, _lib._sel_loadAndReturnError_1, error);
  }

  NSObject? get bundleURL {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_bundleURL1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get resourceURL {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_resourceURL1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get executableURL {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_executableURL1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject URLForAuxiliaryExecutable_(NSObject? executableName) {
    final _ret = _lib._objc_msgSend_13(
        _id,
        _lib._sel_URLForAuxiliaryExecutable_1,
        executableName?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get privateFrameworksURL {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_privateFrameworksURL1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get sharedFrameworksURL {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_sharedFrameworksURL1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get sharedSupportURL {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_sharedSupportURL1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get builtInPlugInsURL {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_builtInPlugInsURL1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get appStoreReceiptURL {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_appStoreReceiptURL1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get bundlePath {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_bundlePath1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get resourcePath {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_resourcePath1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get executablePath {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_executablePath1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject pathForAuxiliaryExecutable_(NSObject? executableName) {
    final _ret = _lib._objc_msgSend_13(
        _id,
        _lib._sel_pathForAuxiliaryExecutable_1,
        executableName?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get privateFrameworksPath {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_privateFrameworksPath1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get sharedFrameworksPath {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_sharedFrameworksPath1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get sharedSupportPath {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_sharedSupportPath1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get builtInPlugInsPath {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_builtInPlugInsPath1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject URLForResource_withExtension_subdirectory_inBundleWithURL_(
      AVFAudio _lib,
      NSObject? name,
      NSObject? ext,
      NSObject? subpath,
      NSObject? bundleURL) {
    final _ret = _lib._objc_msgSend_36(
        _lib._class_NSBundle1,
        _lib._sel_URLForResource_withExtension_subdirectory_inBundleWithURL_1,
        name?._id ?? ffi.nullptr,
        ext?._id ?? ffi.nullptr,
        subpath?._id ?? ffi.nullptr,
        bundleURL?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject URLsForResourcesWithExtension_subdirectory_inBundleWithURL_(
      AVFAudio _lib, NSObject? ext, NSObject? subpath, NSObject? bundleURL) {
    final _ret = _lib._objc_msgSend_35(
        _lib._class_NSBundle1,
        _lib._sel_URLsForResourcesWithExtension_subdirectory_inBundleWithURL_1,
        ext?._id ?? ffi.nullptr,
        subpath?._id ?? ffi.nullptr,
        bundleURL?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject URLForResource_withExtension_(NSObject? name, NSObject? ext) {
    final _ret = _lib._objc_msgSend_39(
        _id,
        _lib._sel_URLForResource_withExtension_1,
        name?._id ?? ffi.nullptr,
        ext?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject URLForResource_withExtension_subdirectory_(
      NSObject? name, NSObject? ext, NSObject? subpath) {
    final _ret = _lib._objc_msgSend_35(
        _id,
        _lib._sel_URLForResource_withExtension_subdirectory_1,
        name?._id ?? ffi.nullptr,
        ext?._id ?? ffi.nullptr,
        subpath?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject URLForResource_withExtension_subdirectory_localization_(
      NSObject? name,
      NSObject? ext,
      NSObject? subpath,
      NSObject? localizationName) {
    final _ret = _lib._objc_msgSend_36(
        _id,
        _lib._sel_URLForResource_withExtension_subdirectory_localization_1,
        name?._id ?? ffi.nullptr,
        ext?._id ?? ffi.nullptr,
        subpath?._id ?? ffi.nullptr,
        localizationName?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject URLsForResourcesWithExtension_subdirectory_(
      NSObject? ext, NSObject? subpath) {
    final _ret = _lib._objc_msgSend_39(
        _id,
        _lib._sel_URLsForResourcesWithExtension_subdirectory_1,
        ext?._id ?? ffi.nullptr,
        subpath?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject URLsForResourcesWithExtension_subdirectory_localization_(
      NSObject? ext, NSObject? subpath, NSObject? localizationName) {
    final _ret = _lib._objc_msgSend_35(
        _id,
        _lib._sel_URLsForResourcesWithExtension_subdirectory_localization_1,
        ext?._id ?? ffi.nullptr,
        subpath?._id ?? ffi.nullptr,
        localizationName?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject pathForResource_ofType_inDirectory_(
      AVFAudio _lib, NSObject? name, NSObject? ext, NSObject? bundlePath) {
    final _ret = _lib._objc_msgSend_35(
        _lib._class_NSBundle1,
        _lib._sel_pathForResource_ofType_inDirectory_1,
        name?._id ?? ffi.nullptr,
        ext?._id ?? ffi.nullptr,
        bundlePath?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject pathsForResourcesOfType_inDirectory_(
      AVFAudio _lib, NSObject? ext, NSObject? bundlePath) {
    final _ret = _lib._objc_msgSend_39(
        _lib._class_NSBundle1,
        _lib._sel_pathsForResourcesOfType_inDirectory_1,
        ext?._id ?? ffi.nullptr,
        bundlePath?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject pathForResource_ofType_(NSObject? name, NSObject? ext) {
    final _ret = _lib._objc_msgSend_39(_id, _lib._sel_pathForResource_ofType_1,
        name?._id ?? ffi.nullptr, ext?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject pathForResource_ofType_inDirectory_forLocalization_(NSObject? name,
      NSObject? ext, NSObject? subpath, NSObject? localizationName) {
    final _ret = _lib._objc_msgSend_36(
        _id,
        _lib._sel_pathForResource_ofType_inDirectory_forLocalization_1,
        name?._id ?? ffi.nullptr,
        ext?._id ?? ffi.nullptr,
        subpath?._id ?? ffi.nullptr,
        localizationName?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject pathsForResourcesOfType_inDirectory_forLocalization_(
      NSObject? ext, NSObject? subpath, NSObject? localizationName) {
    final _ret = _lib._objc_msgSend_35(
        _id,
        _lib._sel_pathsForResourcesOfType_inDirectory_forLocalization_1,
        ext?._id ?? ffi.nullptr,
        subpath?._id ?? ffi.nullptr,
        localizationName?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject localizedStringForKey_value_table_(
      NSObject? key, NSObject? value, NSObject? tableName) {
    final _ret = _lib._objc_msgSend_35(
        _id,
        _lib._sel_localizedStringForKey_value_table_1,
        key?._id ?? ffi.nullptr,
        value?._id ?? ffi.nullptr,
        tableName?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject localizedAttributedStringForKey_value_table_(
      NSObject? key, NSObject? value, NSObject? tableName) {
    final _ret = _lib._objc_msgSend_35(
        _id,
        _lib._sel_localizedAttributedStringForKey_value_table_1,
        key?._id ?? ffi.nullptr,
        value?._id ?? ffi.nullptr,
        tableName?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get bundleIdentifier {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_bundleIdentifier1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get infoDictionary {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_infoDictionary1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get localizedInfoDictionary {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_localizedInfoDictionary1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject objectForInfoDictionaryKey_(NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_objectForInfoDictionaryKey_1, key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject classNamed_(NSObject? className) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_classNamed_1, className?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject get principalClass {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_principalClass1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get preferredLocalizations {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_preferredLocalizations1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get localizations {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_localizations1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get developmentLocalization {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_developmentLocalization1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject preferredLocalizationsFromArray_(
      AVFAudio _lib, NSObject? localizationsArray) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSBundle1,
        _lib._sel_preferredLocalizationsFromArray_1,
        localizationsArray?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject preferredLocalizationsFromArray_forPreferences_(
      AVFAudio _lib, NSObject? localizationsArray, NSObject? preferencesArray) {
    final _ret = _lib._objc_msgSend_39(
        _lib._class_NSBundle1,
        _lib._sel_preferredLocalizationsFromArray_forPreferences_1,
        localizationsArray?._id ?? ffi.nullptr,
        preferencesArray?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get executableArchitectures {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_executableArchitectures1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  void setPreservationPriority_forTags_(double priority, NSObject? tags) {
    return _lib._objc_msgSend_196(
        _id,
        _lib._sel_setPreservationPriority_forTags_1,
        priority,
        tags?._id ?? ffi.nullptr);
  }

  double preservationPriorityForTag_(NSObject? tag) {
    return _lib._objc_msgSend_197(
        _id, _lib._sel_preservationPriorityForTag_1, tag?._id ?? ffi.nullptr);
  }

  static NSBundle new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSBundle1, _lib._sel_new1);
    return NSBundle._(_ret, _lib, retain: false, release: true);
  }

  static NSBundle alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSBundle1, _lib._sel_alloc1);
    return NSBundle._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSBundle1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSBundle1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSBundle1, _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSBundle1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSBundle1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSBundle1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSBundle1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSBundle1, _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSBundle1, _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSDate extends NSObject {
  NSDate._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSDate] that points to the same underlying object as [other].
  static NSDate castFrom<T extends _ObjCWrapper>(T other) {
    return NSDate._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSDate] that wraps the given raw object pointer.
  static NSDate castFromPointer(AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSDate._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSDate].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSDate1);
  }

  double get timeIntervalSinceReferenceDate {
    return _lib._objc_msgSend_79(
        _id, _lib._sel_timeIntervalSinceReferenceDate1);
  }

  @override
  NSDate init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  NSDate initWithTimeIntervalSinceReferenceDate_(double ti) {
    final _ret = _lib._objc_msgSend_69(
        _id, _lib._sel_initWithTimeIntervalSinceReferenceDate_1, ti);
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  NSDate initWithCoder_(NSObject? coder) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_initWithCoder_1, coder?._id ?? ffi.nullptr);
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  double timeIntervalSinceDate_(NSObject? anotherDate) {
    return _lib._objc_msgSend_197(_id, _lib._sel_timeIntervalSinceDate_1,
        anotherDate?._id ?? ffi.nullptr);
  }

  double get timeIntervalSinceNow {
    return _lib._objc_msgSend_79(_id, _lib._sel_timeIntervalSinceNow1);
  }

  double get timeIntervalSince1970 {
    return _lib._objc_msgSend_79(_id, _lib._sel_timeIntervalSince19701);
  }

  NSObject addTimeInterval_(double seconds) {
    final _ret =
        _lib._objc_msgSend_69(_id, _lib._sel_addTimeInterval_1, seconds);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSDate dateByAddingTimeInterval_(double ti) {
    final _ret =
        _lib._objc_msgSend_69(_id, _lib._sel_dateByAddingTimeInterval_1, ti);
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  NSObject earlierDate_(NSObject? anotherDate) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_earlierDate_1, anotherDate?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject laterDate_(NSObject? anotherDate) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_laterDate_1, anotherDate?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  int compare_(NSObject? other) {
    return _lib._objc_msgSend_80(
        _id, _lib._sel_compare_1, other?._id ?? ffi.nullptr);
  }

  bool isEqualToDate_(NSObject? otherDate) {
    return _lib._objc_msgSend_0(
        _id, _lib._sel_isEqualToDate_1, otherDate?._id ?? ffi.nullptr);
  }

  NSObject? get description {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_description1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject descriptionWithLocale_(NSObject locale) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_descriptionWithLocale_1, locale._id);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSDate date(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSDate1, _lib._sel_date1);
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  static NSDate dateWithTimeIntervalSinceNow_(AVFAudio _lib, double secs) {
    final _ret = _lib._objc_msgSend_69(
        _lib._class_NSDate1, _lib._sel_dateWithTimeIntervalSinceNow_1, secs);
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  static NSDate dateWithTimeIntervalSinceReferenceDate_(
      AVFAudio _lib, double ti) {
    final _ret = _lib._objc_msgSend_69(_lib._class_NSDate1,
        _lib._sel_dateWithTimeIntervalSinceReferenceDate_1, ti);
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  static NSDate dateWithTimeIntervalSince1970_(AVFAudio _lib, double secs) {
    final _ret = _lib._objc_msgSend_69(
        _lib._class_NSDate1, _lib._sel_dateWithTimeIntervalSince1970_1, secs);
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  static NSDate dateWithTimeInterval_sinceDate_(
      AVFAudio _lib, double secsToBeAdded, NSObject? date) {
    final _ret = _lib._objc_msgSend_198(
        _lib._class_NSDate1,
        _lib._sel_dateWithTimeInterval_sinceDate_1,
        secsToBeAdded,
        date?._id ?? ffi.nullptr);
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? getDistantFuture(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSDate1, _lib._sel_distantFuture1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? getDistantPast(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSDate1, _lib._sel_distantPast1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? getNow(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSDate1, _lib._sel_now1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSDate initWithTimeIntervalSinceNow_(double secs) {
    final _ret = _lib._objc_msgSend_69(
        _id, _lib._sel_initWithTimeIntervalSinceNow_1, secs);
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  NSDate initWithTimeIntervalSince1970_(double secs) {
    final _ret = _lib._objc_msgSend_69(
        _id, _lib._sel_initWithTimeIntervalSince1970_1, secs);
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  NSDate initWithTimeInterval_sinceDate_(double secsToBeAdded, NSObject? date) {
    final _ret = _lib._objc_msgSend_198(
        _id,
        _lib._sel_initWithTimeInterval_sinceDate_1,
        secsToBeAdded,
        date?._id ?? ffi.nullptr);
    return NSDate._(_ret, _lib, retain: true, release: true);
  }

  static NSObject dateWithNaturalLanguageString_locale_(
      AVFAudio _lib, NSObject? string, NSObject locale) {
    final _ret = _lib._objc_msgSend_39(
        _lib._class_NSDate1,
        _lib._sel_dateWithNaturalLanguageString_locale_1,
        string?._id ?? ffi.nullptr,
        locale._id);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject dateWithNaturalLanguageString_(
      AVFAudio _lib, NSObject? string) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSDate1,
        _lib._sel_dateWithNaturalLanguageString_1, string?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject dateWithString_(AVFAudio _lib, NSObject? aString) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSDate1,
        _lib._sel_dateWithString_1, aString?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject dateWithCalendarFormat_timeZone_(
      NSObject? format, NSObject? aTimeZone) {
    final _ret = _lib._objc_msgSend_39(
        _id,
        _lib._sel_dateWithCalendarFormat_timeZone_1,
        format?._id ?? ffi.nullptr,
        aTimeZone?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject descriptionWithCalendarFormat_timeZone_locale_(
      NSObject? format, NSObject? aTimeZone, NSObject locale) {
    final _ret = _lib._objc_msgSend_35(
        _id,
        _lib._sel_descriptionWithCalendarFormat_timeZone_locale_1,
        format?._id ?? ffi.nullptr,
        aTimeZone?._id ?? ffi.nullptr,
        locale._id);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject initWithString_(NSObject? description) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_initWithString_1, description?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSDate new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSDate1, _lib._sel_new1);
    return NSDate._(_ret, _lib, retain: false, release: true);
  }

  static NSDate alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSDate1, _lib._sel_alloc1);
    return NSDate._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSDate1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSDate1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSDate1, _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSDate1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSDate1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSDate1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSDate1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSDate1, _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSDate1, _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSCoder extends NSObject {
  NSCoder._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSCoder] that points to the same underlying object as [other].
  static NSCoder castFrom<T extends _ObjCWrapper>(T other) {
    return NSCoder._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSCoder] that wraps the given raw object pointer.
  static NSCoder castFromPointer(AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSCoder._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSCoder].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSCoder1);
  }

  void encodeValueOfObjCType_at_(
      ffi.Pointer<ffi.Char> type, ffi.Pointer<ffi.Void> addr) {
    return _lib._objc_msgSend_199(
        _id, _lib._sel_encodeValueOfObjCType_at_1, type, addr);
  }

  void encodeDataObject_(NSObject? data) {
    return _lib._objc_msgSend_8(
        _id, _lib._sel_encodeDataObject_1, data?._id ?? ffi.nullptr);
  }

  NSObject decodeDataObject() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_decodeDataObject1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void decodeValueOfObjCType_at_size_(
      ffi.Pointer<ffi.Char> type, ffi.Pointer<ffi.Void> data, int size) {
    return _lib._objc_msgSend_200(
        _id, _lib._sel_decodeValueOfObjCType_at_size_1, type, data, size);
  }

  int versionForClassName_(NSObject? className) {
    return _lib._objc_msgSend_201(
        _id, _lib._sel_versionForClassName_1, className?._id ?? ffi.nullptr);
  }

  void encodeObject_(NSObject object) {
    return _lib._objc_msgSend_8(_id, _lib._sel_encodeObject_1, object._id);
  }

  void encodeRootObject_(NSObject rootObject) {
    return _lib._objc_msgSend_8(
        _id, _lib._sel_encodeRootObject_1, rootObject._id);
  }

  void encodeBycopyObject_(NSObject anObject) {
    return _lib._objc_msgSend_8(
        _id, _lib._sel_encodeBycopyObject_1, anObject._id);
  }

  void encodeByrefObject_(NSObject anObject) {
    return _lib._objc_msgSend_8(
        _id, _lib._sel_encodeByrefObject_1, anObject._id);
  }

  void encodeConditionalObject_(NSObject object) {
    return _lib._objc_msgSend_8(
        _id, _lib._sel_encodeConditionalObject_1, object._id);
  }

  void encodeValuesOfObjCTypes_(ffi.Pointer<ffi.Char> types) {
    return _lib._objc_msgSend_173(
        _id, _lib._sel_encodeValuesOfObjCTypes_1, types);
  }

  void encodeArrayOfObjCType_count_at_(
      ffi.Pointer<ffi.Char> type, int count, ffi.Pointer<ffi.Void> array) {
    return _lib._objc_msgSend_202(
        _id, _lib._sel_encodeArrayOfObjCType_count_at_1, type, count, array);
  }

  void encodeBytes_length_(ffi.Pointer<ffi.Void> byteaddr, int length) {
    return _lib._objc_msgSend_43(
        _id, _lib._sel_encodeBytes_length_1, byteaddr, length);
  }

  NSObject decodeObject() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_decodeObject1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject decodeTopLevelObjectAndReturnError_(
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_203(
        _id, _lib._sel_decodeTopLevelObjectAndReturnError_1, error);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void decodeValuesOfObjCTypes_(ffi.Pointer<ffi.Char> types) {
    return _lib._objc_msgSend_173(
        _id, _lib._sel_decodeValuesOfObjCTypes_1, types);
  }

  void decodeArrayOfObjCType_count_at_(
      ffi.Pointer<ffi.Char> itemType, int count, ffi.Pointer<ffi.Void> array) {
    return _lib._objc_msgSend_202(_id,
        _lib._sel_decodeArrayOfObjCType_count_at_1, itemType, count, array);
  }

  ffi.Pointer<ffi.Void> decodeBytesWithReturnedLength_(
      ffi.Pointer<NSUInteger> lengthp) {
    return _lib._objc_msgSend_204(
        _id, _lib._sel_decodeBytesWithReturnedLength_1, lengthp);
  }

  void encodePropertyList_(NSObject aPropertyList) {
    return _lib._objc_msgSend_8(
        _id, _lib._sel_encodePropertyList_1, aPropertyList._id);
  }

  NSObject decodePropertyList() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_decodePropertyList1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void setObjectZone_(ffi.Pointer<NSZone> zone) {
    return _lib._objc_msgSend_205(_id, _lib._sel_setObjectZone_1, zone);
  }

  ffi.Pointer<NSZone> objectZone() {
    return _lib._objc_msgSend_206(_id, _lib._sel_objectZone1);
  }

  int get systemVersion {
    return _lib._objc_msgSend_37(_id, _lib._sel_systemVersion1);
  }

  bool get allowsKeyedCoding {
    return _lib._objc_msgSend_9(_id, _lib._sel_allowsKeyedCoding1);
  }

  void encodeObject_forKey_(NSObject object, NSObject? key) {
    return _lib._objc_msgSend_19(_id, _lib._sel_encodeObject_forKey_1,
        object._id, key?._id ?? ffi.nullptr);
  }

  void encodeConditionalObject_forKey_(NSObject object, NSObject? key) {
    return _lib._objc_msgSend_19(
        _id,
        _lib._sel_encodeConditionalObject_forKey_1,
        object._id,
        key?._id ?? ffi.nullptr);
  }

  void encodeBool_forKey_(bool value, NSObject? key) {
    return _lib._objc_msgSend_207(
        _id, _lib._sel_encodeBool_forKey_1, value, key?._id ?? ffi.nullptr);
  }

  void encodeInt_forKey_(int value, NSObject? key) {
    return _lib._objc_msgSend_208(
        _id, _lib._sel_encodeInt_forKey_1, value, key?._id ?? ffi.nullptr);
  }

  void encodeInt32_forKey_(int value, NSObject? key) {
    return _lib._objc_msgSend_209(
        _id, _lib._sel_encodeInt32_forKey_1, value, key?._id ?? ffi.nullptr);
  }

  void encodeInt64_forKey_(int value, NSObject? key) {
    return _lib._objc_msgSend_210(
        _id, _lib._sel_encodeInt64_forKey_1, value, key?._id ?? ffi.nullptr);
  }

  void encodeFloat_forKey_(double value, NSObject? key) {
    return _lib._objc_msgSend_211(
        _id, _lib._sel_encodeFloat_forKey_1, value, key?._id ?? ffi.nullptr);
  }

  void encodeDouble_forKey_(double value, NSObject? key) {
    return _lib._objc_msgSend_196(
        _id, _lib._sel_encodeDouble_forKey_1, value, key?._id ?? ffi.nullptr);
  }

  void encodeBytes_length_forKey_(
      ffi.Pointer<ffi.Uint8> bytes, int length, NSObject? key) {
    return _lib._objc_msgSend_212(_id, _lib._sel_encodeBytes_length_forKey_1,
        bytes, length, key?._id ?? ffi.nullptr);
  }

  bool containsValueForKey_(NSObject? key) {
    return _lib._objc_msgSend_0(
        _id, _lib._sel_containsValueForKey_1, key?._id ?? ffi.nullptr);
  }

  NSObject decodeObjectForKey_(NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_decodeObjectForKey_1, key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject decodeTopLevelObjectForKey_error_(
      NSObject? key, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_103(
        _id,
        _lib._sel_decodeTopLevelObjectForKey_error_1,
        key?._id ?? ffi.nullptr,
        error);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool decodeBoolForKey_(NSObject? key) {
    return _lib._objc_msgSend_0(
        _id, _lib._sel_decodeBoolForKey_1, key?._id ?? ffi.nullptr);
  }

  int decodeIntForKey_(NSObject? key) {
    return _lib._objc_msgSend_213(
        _id, _lib._sel_decodeIntForKey_1, key?._id ?? ffi.nullptr);
  }

  int decodeInt32ForKey_(NSObject? key) {
    return _lib._objc_msgSend_214(
        _id, _lib._sel_decodeInt32ForKey_1, key?._id ?? ffi.nullptr);
  }

  int decodeInt64ForKey_(NSObject? key) {
    return _lib._objc_msgSend_215(
        _id, _lib._sel_decodeInt64ForKey_1, key?._id ?? ffi.nullptr);
  }

  double decodeFloatForKey_(NSObject? key) {
    return _lib._objc_msgSend_216(
        _id, _lib._sel_decodeFloatForKey_1, key?._id ?? ffi.nullptr);
  }

  double decodeDoubleForKey_(NSObject? key) {
    return _lib._objc_msgSend_197(
        _id, _lib._sel_decodeDoubleForKey_1, key?._id ?? ffi.nullptr);
  }

  ffi.Pointer<ffi.Uint8> decodeBytesForKey_returnedLength_(
      NSObject? key, ffi.Pointer<NSUInteger> lengthp) {
    return _lib._objc_msgSend_217(
        _id,
        _lib._sel_decodeBytesForKey_returnedLength_1,
        key?._id ?? ffi.nullptr,
        lengthp);
  }

  void encodeInteger_forKey_(int value, NSObject? key) {
    return _lib._objc_msgSend_218(
        _id, _lib._sel_encodeInteger_forKey_1, value, key?._id ?? ffi.nullptr);
  }

  int decodeIntegerForKey_(NSObject? key) {
    return _lib._objc_msgSend_201(
        _id, _lib._sel_decodeIntegerForKey_1, key?._id ?? ffi.nullptr);
  }

  bool get requiresSecureCoding {
    return _lib._objc_msgSend_9(_id, _lib._sel_requiresSecureCoding1);
  }

  NSObject decodeObjectOfClass_forKey_(NSObject aClass, NSObject? key) {
    final _ret = _lib._objc_msgSend_39(
        _id,
        _lib._sel_decodeObjectOfClass_forKey_1,
        aClass._id,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject decodeTopLevelObjectOfClass_forKey_error_(NSObject aClass,
      NSObject? key, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_219(
        _id,
        _lib._sel_decodeTopLevelObjectOfClass_forKey_error_1,
        aClass._id,
        key?._id ?? ffi.nullptr,
        error);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject decodeArrayOfObjectsOfClass_forKey_(NSObject cls, NSObject? key) {
    final _ret = _lib._objc_msgSend_39(
        _id,
        _lib._sel_decodeArrayOfObjectsOfClass_forKey_1,
        cls._id,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject decodeDictionaryWithKeysOfClass_objectsOfClass_forKey_(
      NSObject keyCls, NSObject objectCls, NSObject? key) {
    final _ret = _lib._objc_msgSend_35(
        _id,
        _lib._sel_decodeDictionaryWithKeysOfClass_objectsOfClass_forKey_1,
        keyCls._id,
        objectCls._id,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject decodeObjectOfClasses_forKey_(NSObject? classes, NSObject? key) {
    final _ret = _lib._objc_msgSend_39(
        _id,
        _lib._sel_decodeObjectOfClasses_forKey_1,
        classes?._id ?? ffi.nullptr,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject decodeTopLevelObjectOfClasses_forKey_error_(NSObject? classes,
      NSObject? key, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_219(
        _id,
        _lib._sel_decodeTopLevelObjectOfClasses_forKey_error_1,
        classes?._id ?? ffi.nullptr,
        key?._id ?? ffi.nullptr,
        error);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject decodeArrayOfObjectsOfClasses_forKey_(
      NSObject? classes, NSObject? key) {
    final _ret = _lib._objc_msgSend_39(
        _id,
        _lib._sel_decodeArrayOfObjectsOfClasses_forKey_1,
        classes?._id ?? ffi.nullptr,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject decodeDictionaryWithKeysOfClasses_objectsOfClasses_forKey_(
      NSObject? keyClasses, NSObject? objectClasses, NSObject? key) {
    final _ret = _lib._objc_msgSend_35(
        _id,
        _lib._sel_decodeDictionaryWithKeysOfClasses_objectsOfClasses_forKey_1,
        keyClasses?._id ?? ffi.nullptr,
        objectClasses?._id ?? ffi.nullptr,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject decodePropertyListForKey_(NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_decodePropertyListForKey_1, key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get allowedClasses {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_allowedClasses1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  void failWithError_(NSObject? error) {
    return _lib._objc_msgSend_8(
        _id, _lib._sel_failWithError_1, error?._id ?? ffi.nullptr);
  }

  int get decodingFailurePolicy {
    return _lib._objc_msgSend_220(_id, _lib._sel_decodingFailurePolicy1);
  }

  NSObject? get error {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_error1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  void encodeNXObject_(NSObject object) {
    return _lib._objc_msgSend_8(_id, _lib._sel_encodeNXObject_1, object._id);
  }

  NSObject decodeNXObject() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_decodeNXObject1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void decodeValueOfObjCType_at_(
      ffi.Pointer<ffi.Char> type, ffi.Pointer<ffi.Void> data) {
    return _lib._objc_msgSend_199(
        _id, _lib._sel_decodeValueOfObjCType_at_1, type, data);
  }

  void encodePoint_(NSPoint point) {
    return _lib._objc_msgSend_221(_id, _lib._sel_encodePoint_1, point);
  }

  NSPoint decodePoint() {
    return _lib._objc_msgSend_54(_id, _lib._sel_decodePoint1);
  }

  void encodeSize_(NSSize size) {
    return _lib._objc_msgSend_222(_id, _lib._sel_encodeSize_1, size);
  }

  NSSize decodeSize() {
    return _lib._objc_msgSend_55(_id, _lib._sel_decodeSize1);
  }

  void encodeRect_(NSRect rect) {
    return _lib._objc_msgSend_223(_id, _lib._sel_encodeRect_1, rect);
  }

  NSRect decodeRect() {
    return _lib._objc_msgSend_56(_id, _lib._sel_decodeRect1);
  }

  void encodePoint_forKey_(NSPoint point, NSObject? key) {
    return _lib._objc_msgSend_224(
        _id, _lib._sel_encodePoint_forKey_1, point, key?._id ?? ffi.nullptr);
  }

  void encodeSize_forKey_(NSSize size, NSObject? key) {
    return _lib._objc_msgSend_225(
        _id, _lib._sel_encodeSize_forKey_1, size, key?._id ?? ffi.nullptr);
  }

  void encodeRect_forKey_(NSRect rect, NSObject? key) {
    return _lib._objc_msgSend_226(
        _id, _lib._sel_encodeRect_forKey_1, rect, key?._id ?? ffi.nullptr);
  }

  NSPoint decodePointForKey_(NSObject? key) {
    return _lib._objc_msgSend_227(
        _id, _lib._sel_decodePointForKey_1, key?._id ?? ffi.nullptr);
  }

  NSSize decodeSizeForKey_(NSObject? key) {
    return _lib._objc_msgSend_228(
        _id, _lib._sel_decodeSizeForKey_1, key?._id ?? ffi.nullptr);
  }

  NSRect decodeRectForKey_(NSObject? key) {
    return _lib._objc_msgSend_229(
        _id, _lib._sel_decodeRectForKey_1, key?._id ?? ffi.nullptr);
  }

  static NSCoder new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSCoder1, _lib._sel_new1);
    return NSCoder._(_ret, _lib, retain: false, release: true);
  }

  static NSCoder alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSCoder1, _lib._sel_alloc1);
    return NSCoder._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSCoder1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSCoder1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSCoder1, _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSCoder1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSCoder1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSCoder1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSCoder1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSCoder1, _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSCoder1, _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

typedef NSZone = _NSZone;

abstract class NSDecodingFailurePolicy {
  static const int NSDecodingFailurePolicyRaiseException = 0;
  static const int NSDecodingFailurePolicySetErrorAndReturn = 1;
}

class NSData extends NSObject {
  NSData._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSData] that points to the same underlying object as [other].
  static NSData castFrom<T extends _ObjCWrapper>(T other) {
    return NSData._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSData] that wraps the given raw object pointer.
  static NSData castFromPointer(AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSData._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSData].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSData1);
  }

  int get length {
    return _lib._objc_msgSend_10(_id, _lib._sel_length1);
  }

  ffi.Pointer<ffi.Void> get bytes {
    return _lib._objc_msgSend_27(_id, _lib._sel_bytes1);
  }

  NSObject? get description {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_description1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  void getBytes_length_(ffi.Pointer<ffi.Void> buffer, int length) {
    return _lib._objc_msgSend_43(
        _id, _lib._sel_getBytes_length_1, buffer, length);
  }

  void getBytes_range_(ffi.Pointer<ffi.Void> buffer, NSRange range) {
    return _lib._objc_msgSend_230(
        _id, _lib._sel_getBytes_range_1, buffer, range);
  }

  bool isEqualToData_(NSObject? other) {
    return _lib._objc_msgSend_0(
        _id, _lib._sel_isEqualToData_1, other?._id ?? ffi.nullptr);
  }

  NSObject subdataWithRange_(NSRange range) {
    final _ret =
        _lib._objc_msgSend_48(_id, _lib._sel_subdataWithRange_1, range);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool writeToFile_atomically_(NSObject? path, bool useAuxiliaryFile) {
    return _lib._objc_msgSend_107(_id, _lib._sel_writeToFile_atomically_1,
        path?._id ?? ffi.nullptr, useAuxiliaryFile);
  }

  bool writeToURL_atomically_(NSObject? url, bool atomically) {
    return _lib._objc_msgSend_107(_id, _lib._sel_writeToURL_atomically_1,
        url?._id ?? ffi.nullptr, atomically);
  }

  bool writeToFile_options_error_(NSObject? path, int writeOptionsMask,
      ffi.Pointer<ffi.Pointer<ObjCObject>> errorPtr) {
    return _lib._objc_msgSend_231(_id, _lib._sel_writeToFile_options_error_1,
        path?._id ?? ffi.nullptr, writeOptionsMask, errorPtr);
  }

  bool writeToURL_options_error_(NSObject? url, int writeOptionsMask,
      ffi.Pointer<ffi.Pointer<ObjCObject>> errorPtr) {
    return _lib._objc_msgSend_231(_id, _lib._sel_writeToURL_options_error_1,
        url?._id ?? ffi.nullptr, writeOptionsMask, errorPtr);
  }

  NSRange rangeOfData_options_range_(
      NSObject? dataToFind, int mask, NSRange searchRange) {
    return _lib._objc_msgSend_232(_id, _lib._sel_rangeOfData_options_range_1,
        dataToFind?._id ?? ffi.nullptr, mask, searchRange);
  }

  void enumerateByteRangesUsingBlock_(ObjCBlock16 block) {
    return _lib._objc_msgSend_233(
        _id, _lib._sel_enumerateByteRangesUsingBlock_1, block._impl);
  }

  static NSData data(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSData1, _lib._sel_data1);
    return NSData._(_ret, _lib, retain: true, release: true);
  }

  static NSData dataWithBytes_length_(
      AVFAudio _lib, ffi.Pointer<ffi.Void> bytes, int length) {
    final _ret = _lib._objc_msgSend_234(
        _lib._class_NSData1, _lib._sel_dataWithBytes_length_1, bytes, length);
    return NSData._(_ret, _lib, retain: true, release: true);
  }

  static NSData dataWithBytesNoCopy_length_(
      AVFAudio _lib, ffi.Pointer<ffi.Void> bytes, int length) {
    final _ret = _lib._objc_msgSend_234(_lib._class_NSData1,
        _lib._sel_dataWithBytesNoCopy_length_1, bytes, length);
    return NSData._(_ret, _lib, retain: false, release: true);
  }

  static NSData dataWithBytesNoCopy_length_freeWhenDone_(
      AVFAudio _lib, ffi.Pointer<ffi.Void> bytes, int length, bool b) {
    final _ret = _lib._objc_msgSend_235(_lib._class_NSData1,
        _lib._sel_dataWithBytesNoCopy_length_freeWhenDone_1, bytes, length, b);
    return NSData._(_ret, _lib, retain: false, release: true);
  }

  static NSData dataWithContentsOfFile_options_error_(
      AVFAudio _lib,
      NSObject? path,
      int readOptionsMask,
      ffi.Pointer<ffi.Pointer<ObjCObject>> errorPtr) {
    final _ret = _lib._objc_msgSend_236(
        _lib._class_NSData1,
        _lib._sel_dataWithContentsOfFile_options_error_1,
        path?._id ?? ffi.nullptr,
        readOptionsMask,
        errorPtr);
    return NSData._(_ret, _lib, retain: true, release: true);
  }

  static NSData dataWithContentsOfURL_options_error_(
      AVFAudio _lib,
      NSObject? url,
      int readOptionsMask,
      ffi.Pointer<ffi.Pointer<ObjCObject>> errorPtr) {
    final _ret = _lib._objc_msgSend_236(
        _lib._class_NSData1,
        _lib._sel_dataWithContentsOfURL_options_error_1,
        url?._id ?? ffi.nullptr,
        readOptionsMask,
        errorPtr);
    return NSData._(_ret, _lib, retain: true, release: true);
  }

  static NSData dataWithContentsOfFile_(AVFAudio _lib, NSObject? path) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSData1,
        _lib._sel_dataWithContentsOfFile_1, path?._id ?? ffi.nullptr);
    return NSData._(_ret, _lib, retain: true, release: true);
  }

  static NSData dataWithContentsOfURL_(AVFAudio _lib, NSObject? url) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSData1,
        _lib._sel_dataWithContentsOfURL_1, url?._id ?? ffi.nullptr);
    return NSData._(_ret, _lib, retain: true, release: true);
  }

  NSData initWithBytes_length_(ffi.Pointer<ffi.Void> bytes, int length) {
    final _ret = _lib._objc_msgSend_234(
        _id, _lib._sel_initWithBytes_length_1, bytes, length);
    return NSData._(_ret, _lib, retain: true, release: true);
  }

  NSData initWithBytesNoCopy_length_(ffi.Pointer<ffi.Void> bytes, int length) {
    final _ret = _lib._objc_msgSend_234(
        _id, _lib._sel_initWithBytesNoCopy_length_1, bytes, length);
    return NSData._(_ret, _lib, retain: false, release: true);
  }

  NSData initWithBytesNoCopy_length_freeWhenDone_(
      ffi.Pointer<ffi.Void> bytes, int length, bool b) {
    final _ret = _lib._objc_msgSend_235(_id,
        _lib._sel_initWithBytesNoCopy_length_freeWhenDone_1, bytes, length, b);
    return NSData._(_ret, _lib, retain: false, release: true);
  }

  NSData initWithBytesNoCopy_length_deallocator_(
      ffi.Pointer<ffi.Void> bytes, int length, ObjCBlock12 deallocator) {
    final _ret = _lib._objc_msgSend_237(
        _id,
        _lib._sel_initWithBytesNoCopy_length_deallocator_1,
        bytes,
        length,
        deallocator._impl);
    return NSData._(_ret, _lib, retain: false, release: true);
  }

  NSData initWithContentsOfFile_options_error_(NSObject? path,
      int readOptionsMask, ffi.Pointer<ffi.Pointer<ObjCObject>> errorPtr) {
    final _ret = _lib._objc_msgSend_236(
        _id,
        _lib._sel_initWithContentsOfFile_options_error_1,
        path?._id ?? ffi.nullptr,
        readOptionsMask,
        errorPtr);
    return NSData._(_ret, _lib, retain: true, release: true);
  }

  NSData initWithContentsOfURL_options_error_(NSObject? url,
      int readOptionsMask, ffi.Pointer<ffi.Pointer<ObjCObject>> errorPtr) {
    final _ret = _lib._objc_msgSend_236(
        _id,
        _lib._sel_initWithContentsOfURL_options_error_1,
        url?._id ?? ffi.nullptr,
        readOptionsMask,
        errorPtr);
    return NSData._(_ret, _lib, retain: true, release: true);
  }

  NSData initWithContentsOfFile_(NSObject? path) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_initWithContentsOfFile_1, path?._id ?? ffi.nullptr);
    return NSData._(_ret, _lib, retain: true, release: true);
  }

  NSData initWithContentsOfURL_(NSObject? url) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_initWithContentsOfURL_1, url?._id ?? ffi.nullptr);
    return NSData._(_ret, _lib, retain: true, release: true);
  }

  NSData initWithData_(NSObject? data) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_initWithData_1, data?._id ?? ffi.nullptr);
    return NSData._(_ret, _lib, retain: true, release: true);
  }

  static NSData dataWithData_(AVFAudio _lib, NSObject? data) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSData1,
        _lib._sel_dataWithData_1, data?._id ?? ffi.nullptr);
    return NSData._(_ret, _lib, retain: true, release: true);
  }

  NSData initWithBase64EncodedString_options_(
      NSObject? base64String, int options) {
    final _ret = _lib._objc_msgSend_238(
        _id,
        _lib._sel_initWithBase64EncodedString_options_1,
        base64String?._id ?? ffi.nullptr,
        options);
    return NSData._(_ret, _lib, retain: true, release: true);
  }

  NSObject base64EncodedStringWithOptions_(int options) {
    final _ret = _lib._objc_msgSend_239(
        _id, _lib._sel_base64EncodedStringWithOptions_1, options);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSData initWithBase64EncodedData_options_(NSObject? base64Data, int options) {
    final _ret = _lib._objc_msgSend_238(
        _id,
        _lib._sel_initWithBase64EncodedData_options_1,
        base64Data?._id ?? ffi.nullptr,
        options);
    return NSData._(_ret, _lib, retain: true, release: true);
  }

  NSObject base64EncodedDataWithOptions_(int options) {
    final _ret = _lib._objc_msgSend_239(
        _id, _lib._sel_base64EncodedDataWithOptions_1, options);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSData decompressedDataUsingAlgorithm_error_(
      int algorithm, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_240(_id,
        _lib._sel_decompressedDataUsingAlgorithm_error_1, algorithm, error);
    return NSData._(_ret, _lib, retain: true, release: true);
  }

  NSData compressedDataUsingAlgorithm_error_(
      int algorithm, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_240(
        _id, _lib._sel_compressedDataUsingAlgorithm_error_1, algorithm, error);
    return NSData._(_ret, _lib, retain: true, release: true);
  }

  void getBytes_(ffi.Pointer<ffi.Void> buffer) {
    return _lib._objc_msgSend_47(_id, _lib._sel_getBytes_1, buffer);
  }

  static NSObject dataWithContentsOfMappedFile_(AVFAudio _lib, NSObject? path) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSData1,
        _lib._sel_dataWithContentsOfMappedFile_1, path?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject initWithContentsOfMappedFile_(NSObject? path) {
    final _ret = _lib._objc_msgSend_13(_id,
        _lib._sel_initWithContentsOfMappedFile_1, path?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject initWithBase64Encoding_(NSObject? base64String) {
    final _ret = _lib._objc_msgSend_13(_id, _lib._sel_initWithBase64Encoding_1,
        base64String?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject base64Encoding() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_base64Encoding1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSData new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSData1, _lib._sel_new1);
    return NSData._(_ret, _lib, retain: false, release: true);
  }

  static NSData alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSData1, _lib._sel_alloc1);
    return NSData._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSData1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSData1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSData1, _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSData1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSData1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSData1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSData1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSData1, _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSData1, _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

abstract class NSDataWritingOptions {
  static const int NSDataWritingAtomic = 1;
  static const int NSDataWritingWithoutOverwriting = 2;
  static const int NSDataWritingFileProtectionNone = 268435456;
  static const int NSDataWritingFileProtectionComplete = 536870912;
  static const int NSDataWritingFileProtectionCompleteUnlessOpen = 805306368;
  static const int
      NSDataWritingFileProtectionCompleteUntilFirstUserAuthentication =
      1073741824;
  static const int NSDataWritingFileProtectionMask = 4026531840;
  static const int NSAtomicWrite = 1;
}

abstract class NSDataSearchOptions {
  static const int NSDataSearchBackwards = 1;
  static const int NSDataSearchAnchored = 2;
}

void _ObjCBlock16_fnPtrTrampoline(ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ffi.Void> arg0, NSRange arg1, ffi.Pointer<ffi.Bool> arg2) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void> arg0, NSRange arg1,
                  ffi.Pointer<ffi.Bool> arg2)>>()
      .asFunction<
          void Function(ffi.Pointer<ffi.Void> arg0, NSRange arg1,
              ffi.Pointer<ffi.Bool> arg2)>()(arg0, arg1, arg2);
}

final _ObjCBlock16_closureRegistry = <int, Function>{};
int _ObjCBlock16_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock16_registerClosure(Function fn) {
  final id = ++_ObjCBlock16_closureRegistryIndex;
  _ObjCBlock16_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock16_closureTrampoline(ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ffi.Void> arg0, NSRange arg1, ffi.Pointer<ffi.Bool> arg2) {
  return _ObjCBlock16_closureRegistry[block.ref.target.address]!(
      arg0, arg1, arg2);
}

class ObjCBlock16 {
  final ffi.Pointer<_ObjCBlock> _impl;
  final AVFAudio _lib;
  ObjCBlock16._(this._impl, this._lib);
  ObjCBlock16.fromFunctionPointer(
      this._lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void> arg0, NSRange arg1,
                      ffi.Pointer<ffi.Bool> arg2)>>
          ptr)
      : _impl =
            _lib._newBlock1(
                ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.Pointer<ffi.Void> arg0,
                                NSRange arg1,
                                ffi.Pointer<ffi.Bool> arg2)>(
                        _ObjCBlock16_fnPtrTrampoline)
                    .cast(),
                ptr.cast());
  ObjCBlock16.fromFunction(
      this._lib,
      void Function(ffi.Pointer<ffi.Void> arg0, NSRange arg1,
              ffi.Pointer<ffi.Bool> arg2)
          fn)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<_ObjCBlock> block,
                            ffi.Pointer<ffi.Void> arg0,
                            NSRange arg1,
                            ffi.Pointer<ffi.Bool> arg2)>(
                    _ObjCBlock16_closureTrampoline)
                .cast(),
            _ObjCBlock16_registerClosure(fn));
  void call(
      ffi.Pointer<ffi.Void> arg0, NSRange arg1, ffi.Pointer<ffi.Bool> arg2) {
    return _impl.ref.invoke
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<_ObjCBlock> block,
                    ffi.Pointer<ffi.Void> arg0,
                    NSRange arg1,
                    ffi.Pointer<ffi.Bool> arg2)>>()
        .asFunction<
            void Function(
                ffi.Pointer<_ObjCBlock> block,
                ffi.Pointer<ffi.Void> arg0,
                NSRange arg1,
                ffi.Pointer<ffi.Bool> arg2)>()(_impl, arg0, arg1, arg2);
  }

  ffi.Pointer<_ObjCBlock> get pointer => _impl;
}

abstract class NSDataReadingOptions {
  static const int NSDataReadingMappedIfSafe = 1;
  static const int NSDataReadingUncached = 2;
  static const int NSDataReadingMappedAlways = 8;
  static const int NSDataReadingMapped = 1;
  static const int NSMappedRead = 1;
  static const int NSUncachedRead = 2;
}

abstract class NSDataBase64DecodingOptions {
  static const int NSDataBase64DecodingIgnoreUnknownCharacters = 1;
}

abstract class NSDataBase64EncodingOptions {
  static const int NSDataBase64Encoding64CharacterLineLength = 1;
  static const int NSDataBase64Encoding76CharacterLineLength = 2;
  static const int NSDataBase64EncodingEndLineWithCarriageReturn = 16;
  static const int NSDataBase64EncodingEndLineWithLineFeed = 32;
}

abstract class NSDataCompressionAlgorithm {
  static const int NSDataCompressionAlgorithmLZFSE = 0;
  static const int NSDataCompressionAlgorithmLZ4 = 1;
  static const int NSDataCompressionAlgorithmLZMA = 2;
  static const int NSDataCompressionAlgorithmZlib = 3;
}

class NSMutableData extends NSData {
  NSMutableData._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSMutableData] that points to the same underlying object as [other].
  static NSMutableData castFrom<T extends _ObjCWrapper>(T other) {
    return NSMutableData._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSMutableData] that wraps the given raw object pointer.
  static NSMutableData castFromPointer(
      AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSMutableData._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSMutableData].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSMutableData1);
  }

  ffi.Pointer<ffi.Void> get mutableBytes {
    return _lib._objc_msgSend_27(_id, _lib._sel_mutableBytes1);
  }

  @override
  int get length {
    return _lib._objc_msgSend_10(_id, _lib._sel_length1);
  }

  set length(int value) {
    _lib._objc_msgSend_241(_id, _lib._sel_setLength_1, value);
  }

  void appendBytes_length_(ffi.Pointer<ffi.Void> bytes, int length) {
    return _lib._objc_msgSend_43(
        _id, _lib._sel_appendBytes_length_1, bytes, length);
  }

  void appendData_(NSObject? other) {
    return _lib._objc_msgSend_8(
        _id, _lib._sel_appendData_1, other?._id ?? ffi.nullptr);
  }

  void increaseLengthBy_(int extraLength) {
    return _lib._objc_msgSend_111(
        _id, _lib._sel_increaseLengthBy_1, extraLength);
  }

  void replaceBytesInRange_withBytes_(
      NSRange range, ffi.Pointer<ffi.Void> bytes) {
    return _lib._objc_msgSend_242(
        _id, _lib._sel_replaceBytesInRange_withBytes_1, range, bytes);
  }

  void resetBytesInRange_(NSRange range) {
    return _lib._objc_msgSend_115(_id, _lib._sel_resetBytesInRange_1, range);
  }

  void setData_(NSObject? data) {
    return _lib._objc_msgSend_8(
        _id, _lib._sel_setData_1, data?._id ?? ffi.nullptr);
  }

  void replaceBytesInRange_withBytes_length_(NSRange range,
      ffi.Pointer<ffi.Void> replacementBytes, int replacementLength) {
    return _lib._objc_msgSend_243(
        _id,
        _lib._sel_replaceBytesInRange_withBytes_length_1,
        range,
        replacementBytes,
        replacementLength);
  }

  static NSMutableData dataWithCapacity_(AVFAudio _lib, int aNumItems) {
    final _ret = _lib._objc_msgSend_65(
        _lib._class_NSMutableData1, _lib._sel_dataWithCapacity_1, aNumItems);
    return NSMutableData._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableData dataWithLength_(AVFAudio _lib, int length) {
    final _ret = _lib._objc_msgSend_65(
        _lib._class_NSMutableData1, _lib._sel_dataWithLength_1, length);
    return NSMutableData._(_ret, _lib, retain: true, release: true);
  }

  NSMutableData initWithCapacity_(int capacity) {
    final _ret =
        _lib._objc_msgSend_65(_id, _lib._sel_initWithCapacity_1, capacity);
    return NSMutableData._(_ret, _lib, retain: true, release: true);
  }

  NSMutableData initWithLength_(int length) {
    final _ret = _lib._objc_msgSend_65(_id, _lib._sel_initWithLength_1, length);
    return NSMutableData._(_ret, _lib, retain: true, release: true);
  }

  bool decompressUsingAlgorithm_error_(
      int algorithm, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_244(
        _id, _lib._sel_decompressUsingAlgorithm_error_1, algorithm, error);
  }

  bool compressUsingAlgorithm_error_(
      int algorithm, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_244(
        _id, _lib._sel_compressUsingAlgorithm_error_1, algorithm, error);
  }

  static NSMutableData data(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSMutableData1, _lib._sel_data1);
    return NSMutableData._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableData dataWithBytes_length_(
      AVFAudio _lib, ffi.Pointer<ffi.Void> bytes, int length) {
    final _ret = _lib._objc_msgSend_234(_lib._class_NSMutableData1,
        _lib._sel_dataWithBytes_length_1, bytes, length);
    return NSMutableData._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableData dataWithBytesNoCopy_length_(
      AVFAudio _lib, ffi.Pointer<ffi.Void> bytes, int length) {
    final _ret = _lib._objc_msgSend_234(_lib._class_NSMutableData1,
        _lib._sel_dataWithBytesNoCopy_length_1, bytes, length);
    return NSMutableData._(_ret, _lib, retain: false, release: true);
  }

  static NSMutableData dataWithBytesNoCopy_length_freeWhenDone_(
      AVFAudio _lib, ffi.Pointer<ffi.Void> bytes, int length, bool b) {
    final _ret = _lib._objc_msgSend_235(_lib._class_NSMutableData1,
        _lib._sel_dataWithBytesNoCopy_length_freeWhenDone_1, bytes, length, b);
    return NSMutableData._(_ret, _lib, retain: false, release: true);
  }

  static NSMutableData dataWithContentsOfFile_options_error_(
      AVFAudio _lib,
      NSObject? path,
      int readOptionsMask,
      ffi.Pointer<ffi.Pointer<ObjCObject>> errorPtr) {
    final _ret = _lib._objc_msgSend_236(
        _lib._class_NSMutableData1,
        _lib._sel_dataWithContentsOfFile_options_error_1,
        path?._id ?? ffi.nullptr,
        readOptionsMask,
        errorPtr);
    return NSMutableData._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableData dataWithContentsOfURL_options_error_(
      AVFAudio _lib,
      NSObject? url,
      int readOptionsMask,
      ffi.Pointer<ffi.Pointer<ObjCObject>> errorPtr) {
    final _ret = _lib._objc_msgSend_236(
        _lib._class_NSMutableData1,
        _lib._sel_dataWithContentsOfURL_options_error_1,
        url?._id ?? ffi.nullptr,
        readOptionsMask,
        errorPtr);
    return NSMutableData._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableData dataWithContentsOfFile_(AVFAudio _lib, NSObject? path) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSMutableData1,
        _lib._sel_dataWithContentsOfFile_1, path?._id ?? ffi.nullptr);
    return NSMutableData._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableData dataWithContentsOfURL_(AVFAudio _lib, NSObject? url) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSMutableData1,
        _lib._sel_dataWithContentsOfURL_1, url?._id ?? ffi.nullptr);
    return NSMutableData._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableData dataWithData_(AVFAudio _lib, NSObject? data) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSMutableData1,
        _lib._sel_dataWithData_1, data?._id ?? ffi.nullptr);
    return NSMutableData._(_ret, _lib, retain: true, release: true);
  }

  static NSObject dataWithContentsOfMappedFile_(AVFAudio _lib, NSObject? path) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSMutableData1,
        _lib._sel_dataWithContentsOfMappedFile_1, path?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableData new1(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSMutableData1, _lib._sel_new1);
    return NSMutableData._(_ret, _lib, retain: false, release: true);
  }

  static NSMutableData alloc(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSMutableData1, _lib._sel_alloc1);
    return NSMutableData._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSMutableData1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSMutableData1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSMutableData1, _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSMutableData1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSMutableData1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSMutableData1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSMutableData1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSMutableData1, _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSMutableData1, _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSAttributedString extends NSObject {
  NSAttributedString._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSAttributedString] that points to the same underlying object as [other].
  static NSAttributedString castFrom<T extends _ObjCWrapper>(T other) {
    return NSAttributedString._(other._id, other._lib,
        retain: true, release: true);
  }

  /// Returns a [NSAttributedString] that wraps the given raw object pointer.
  static NSAttributedString castFromPointer(
      AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSAttributedString._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSAttributedString].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSAttributedString1);
  }

  NSObject? get string {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_string1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject attributesAtIndex_effectiveRange_(
      int location, NSRangePointer range) {
    final _ret = _lib._objc_msgSend_245(
        _id, _lib._sel_attributesAtIndex_effectiveRange_1, location, range);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  int get length {
    return _lib._objc_msgSend_10(_id, _lib._sel_length1);
  }

  NSObject attribute_atIndex_effectiveRange_(
      NSAttributedStringKey attrName, int location, NSRangePointer range) {
    final _ret = _lib._objc_msgSend_246(
        _id,
        _lib._sel_attribute_atIndex_effectiveRange_1,
        attrName,
        location,
        range);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject attributedSubstringFromRange_(NSRange range) {
    final _ret = _lib._objc_msgSend_48(
        _id, _lib._sel_attributedSubstringFromRange_1, range);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject attributesAtIndex_longestEffectiveRange_inRange_(
      int location, NSRangePointer range, NSRange rangeLimit) {
    final _ret = _lib._objc_msgSend_247(
        _id,
        _lib._sel_attributesAtIndex_longestEffectiveRange_inRange_1,
        location,
        range,
        rangeLimit);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject attribute_atIndex_longestEffectiveRange_inRange_(
      NSAttributedStringKey attrName,
      int location,
      NSRangePointer range,
      NSRange rangeLimit) {
    final _ret = _lib._objc_msgSend_248(
        _id,
        _lib._sel_attribute_atIndex_longestEffectiveRange_inRange_1,
        attrName,
        location,
        range,
        rangeLimit);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool isEqualToAttributedString_(NSObject? other) {
    return _lib._objc_msgSend_0(
        _id, _lib._sel_isEqualToAttributedString_1, other?._id ?? ffi.nullptr);
  }

  NSAttributedString initWithString_(NSObject? str) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_initWithString_1, str?._id ?? ffi.nullptr);
    return NSAttributedString._(_ret, _lib, retain: true, release: true);
  }

  NSAttributedString initWithString_attributes_(
      NSObject? str, NSObject? attrs) {
    final _ret = _lib._objc_msgSend_39(
        _id,
        _lib._sel_initWithString_attributes_1,
        str?._id ?? ffi.nullptr,
        attrs?._id ?? ffi.nullptr);
    return NSAttributedString._(_ret, _lib, retain: true, release: true);
  }

  NSAttributedString initWithAttributedString_(NSObject? attrStr) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_initWithAttributedString_1, attrStr?._id ?? ffi.nullptr);
    return NSAttributedString._(_ret, _lib, retain: true, release: true);
  }

  void enumerateAttributesInRange_options_usingBlock_(
      NSRange enumerationRange, int opts, ObjCBlock17 block) {
    return _lib._objc_msgSend_249(
        _id,
        _lib._sel_enumerateAttributesInRange_options_usingBlock_1,
        enumerationRange,
        opts,
        block._impl);
  }

  void enumerateAttribute_inRange_options_usingBlock_(
      NSAttributedStringKey attrName,
      NSRange enumerationRange,
      int opts,
      ObjCBlock17 block) {
    return _lib._objc_msgSend_250(
        _id,
        _lib._sel_enumerateAttribute_inRange_options_usingBlock_1,
        attrName,
        enumerationRange,
        opts,
        block._impl);
  }

  NSAttributedString initWithContentsOfMarkdownFileAtURL_options_baseURL_error_(
      NSObject? markdownFile,
      NSObject? options,
      NSObject? baseURL,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_251(
        _id,
        _lib._sel_initWithContentsOfMarkdownFileAtURL_options_baseURL_error_1,
        markdownFile?._id ?? ffi.nullptr,
        options?._id ?? ffi.nullptr,
        baseURL?._id ?? ffi.nullptr,
        error);
    return NSAttributedString._(_ret, _lib, retain: true, release: true);
  }

  NSAttributedString initWithMarkdown_options_baseURL_error_(
      NSObject? markdown,
      NSObject? options,
      NSObject? baseURL,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_251(
        _id,
        _lib._sel_initWithMarkdown_options_baseURL_error_1,
        markdown?._id ?? ffi.nullptr,
        options?._id ?? ffi.nullptr,
        baseURL?._id ?? ffi.nullptr,
        error);
    return NSAttributedString._(_ret, _lib, retain: true, release: true);
  }

  NSAttributedString initWithMarkdownString_options_baseURL_error_(
      NSObject? markdownString,
      NSObject? options,
      NSObject? baseURL,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_251(
        _id,
        _lib._sel_initWithMarkdownString_options_baseURL_error_1,
        markdownString?._id ?? ffi.nullptr,
        options?._id ?? ffi.nullptr,
        baseURL?._id ?? ffi.nullptr,
        error);
    return NSAttributedString._(_ret, _lib, retain: true, release: true);
  }

  NSAttributedString initWithFormat_options_locale_(
      NSObject? format, int options, NSObject? locale) {
    final _ret = _lib._objc_msgSend_252(
        _id,
        _lib._sel_initWithFormat_options_locale_1,
        format?._id ?? ffi.nullptr,
        options,
        locale?._id ?? ffi.nullptr);
    return NSAttributedString._(_ret, _lib, retain: true, release: true);
  }

  NSAttributedString initWithFormat_options_locale_arguments_(NSObject? format,
      int options, NSObject? locale, ffi.Pointer<__va_list_tag> arguments) {
    final _ret = _lib._objc_msgSend_253(
        _id,
        _lib._sel_initWithFormat_options_locale_arguments_1,
        format?._id ?? ffi.nullptr,
        options,
        locale?._id ?? ffi.nullptr,
        arguments);
    return NSAttributedString._(_ret, _lib, retain: true, release: true);
  }

  static NSAttributedString localizedAttributedStringWithFormat_(
      AVFAudio _lib, NSObject? format) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSAttributedString1,
        _lib._sel_localizedAttributedStringWithFormat_1,
        format?._id ?? ffi.nullptr);
    return NSAttributedString._(_ret, _lib, retain: true, release: true);
  }

  static NSAttributedString localizedAttributedStringWithFormat_options_(
      AVFAudio _lib, NSObject? format, int options) {
    final _ret = _lib._objc_msgSend_254(
        _lib._class_NSAttributedString1,
        _lib._sel_localizedAttributedStringWithFormat_options_1,
        format?._id ?? ffi.nullptr,
        options);
    return NSAttributedString._(_ret, _lib, retain: true, release: true);
  }

  NSObject attributedStringByInflectingString() {
    final _ret = _lib._objc_msgSend_2(
        _id, _lib._sel_attributedStringByInflectingString1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSAttributedString new1(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSAttributedString1, _lib._sel_new1);
    return NSAttributedString._(_ret, _lib, retain: false, release: true);
  }

  static NSAttributedString alloc(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSAttributedString1, _lib._sel_alloc1);
    return NSAttributedString._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSAttributedString1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSAttributedString1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(_lib._class_NSAttributedString1,
        _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSAttributedString1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSAttributedString1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSAttributedString1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSAttributedString1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSAttributedString1,
        _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSAttributedString1, _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

typedef NSAttributedStringKey = ffi.Pointer<ObjCObject>;

abstract class NSAttributedStringEnumerationOptions {
  static const int NSAttributedStringEnumerationReverse = 2;
  static const int
      NSAttributedStringEnumerationLongestEffectiveRangeNotRequired = 1048576;
}

void _ObjCBlock17_fnPtrTrampoline(ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0, NSRange arg1, ffi.Pointer<ffi.Bool> arg2) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ObjCObject> arg0, NSRange arg1,
                  ffi.Pointer<ffi.Bool> arg2)>>()
      .asFunction<
          void Function(ffi.Pointer<ObjCObject> arg0, NSRange arg1,
              ffi.Pointer<ffi.Bool> arg2)>()(arg0, arg1, arg2);
}

final _ObjCBlock17_closureRegistry = <int, Function>{};
int _ObjCBlock17_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock17_registerClosure(Function fn) {
  final id = ++_ObjCBlock17_closureRegistryIndex;
  _ObjCBlock17_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock17_closureTrampoline(ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0, NSRange arg1, ffi.Pointer<ffi.Bool> arg2) {
  return _ObjCBlock17_closureRegistry[block.ref.target.address]!(
      arg0, arg1, arg2);
}

class ObjCBlock17 {
  final ffi.Pointer<_ObjCBlock> _impl;
  final AVFAudio _lib;
  ObjCBlock17._(this._impl, this._lib);
  ObjCBlock17.fromFunctionPointer(
      this._lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ObjCObject> arg0, NSRange arg1,
                      ffi.Pointer<ffi.Bool> arg2)>>
          ptr)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<_ObjCBlock> block,
                            ffi.Pointer<ObjCObject> arg0,
                            NSRange arg1,
                            ffi.Pointer<ffi.Bool> arg2)>(
                    _ObjCBlock17_fnPtrTrampoline)
                .cast(),
            ptr.cast());
  ObjCBlock17.fromFunction(
      this._lib,
      void Function(ffi.Pointer<ObjCObject> arg0, NSRange arg1,
              ffi.Pointer<ffi.Bool> arg2)
          fn)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<_ObjCBlock> block,
                            ffi.Pointer<ObjCObject> arg0,
                            NSRange arg1,
                            ffi.Pointer<ffi.Bool> arg2)>(
                    _ObjCBlock17_closureTrampoline)
                .cast(),
            _ObjCBlock17_registerClosure(fn));
  void call(
      ffi.Pointer<ObjCObject> arg0, NSRange arg1, ffi.Pointer<ffi.Bool> arg2) {
    return _impl.ref.invoke
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<_ObjCBlock> block,
                    ffi.Pointer<ObjCObject> arg0,
                    NSRange arg1,
                    ffi.Pointer<ffi.Bool> arg2)>>()
        .asFunction<
            void Function(
                ffi.Pointer<_ObjCBlock> block,
                ffi.Pointer<ObjCObject> arg0,
                NSRange arg1,
                ffi.Pointer<ffi.Bool> arg2)>()(_impl, arg0, arg1, arg2);
  }

  ffi.Pointer<_ObjCBlock> get pointer => _impl;
}

abstract class NSAttributedStringFormattingOptions {
  static const int
      NSAttributedStringFormattingInsertArgumentAttributesWithoutMerging = 1;
  static const int NSAttributedStringFormattingApplyReplacementIndexAttribute =
      2;
}

class NSMutableAttributedString extends NSAttributedString {
  NSMutableAttributedString._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSMutableAttributedString] that points to the same underlying object as [other].
  static NSMutableAttributedString castFrom<T extends _ObjCWrapper>(T other) {
    return NSMutableAttributedString._(other._id, other._lib,
        retain: true, release: true);
  }

  /// Returns a [NSMutableAttributedString] that wraps the given raw object pointer.
  static NSMutableAttributedString castFromPointer(
      AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSMutableAttributedString._(other, lib,
        retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSMutableAttributedString].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSMutableAttributedString1);
  }

  void replaceCharactersInRange_withString_(NSRange range, NSObject? str) {
    return _lib._objc_msgSend_117(
        _id,
        _lib._sel_replaceCharactersInRange_withString_1,
        range,
        str?._id ?? ffi.nullptr);
  }

  void setAttributes_range_(NSObject? attrs, NSRange range) {
    return _lib._objc_msgSend_113(
        _id, _lib._sel_setAttributes_range_1, attrs?._id ?? ffi.nullptr, range);
  }

  NSObject? get mutableString {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_mutableString1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  void addAttribute_value_range_(
      NSAttributedStringKey name, NSObject value, NSRange range) {
    return _lib._objc_msgSend_255(
        _id, _lib._sel_addAttribute_value_range_1, name, value._id, range);
  }

  void addAttributes_range_(NSObject? attrs, NSRange range) {
    return _lib._objc_msgSend_113(
        _id, _lib._sel_addAttributes_range_1, attrs?._id ?? ffi.nullptr, range);
  }

  void removeAttribute_range_(NSAttributedStringKey name, NSRange range) {
    return _lib._objc_msgSend_113(
        _id, _lib._sel_removeAttribute_range_1, name, range);
  }

  void replaceCharactersInRange_withAttributedString_(
      NSRange range, NSObject? attrString) {
    return _lib._objc_msgSend_117(
        _id,
        _lib._sel_replaceCharactersInRange_withAttributedString_1,
        range,
        attrString?._id ?? ffi.nullptr);
  }

  void insertAttributedString_atIndex_(NSObject? attrString, int loc) {
    return _lib._objc_msgSend_110(
        _id,
        _lib._sel_insertAttributedString_atIndex_1,
        attrString?._id ?? ffi.nullptr,
        loc);
  }

  void appendAttributedString_(NSObject? attrString) {
    return _lib._objc_msgSend_8(_id, _lib._sel_appendAttributedString_1,
        attrString?._id ?? ffi.nullptr);
  }

  void deleteCharactersInRange_(NSRange range) {
    return _lib._objc_msgSend_115(
        _id, _lib._sel_deleteCharactersInRange_1, range);
  }

  void setAttributedString_(NSObject? attrString) {
    return _lib._objc_msgSend_8(
        _id, _lib._sel_setAttributedString_1, attrString?._id ?? ffi.nullptr);
  }

  void beginEditing() {
    return _lib._objc_msgSend_1(_id, _lib._sel_beginEditing1);
  }

  void endEditing() {
    return _lib._objc_msgSend_1(_id, _lib._sel_endEditing1);
  }

  void appendLocalizedFormat_(NSObject? format) {
    return _lib._objc_msgSend_8(
        _id, _lib._sel_appendLocalizedFormat_1, format?._id ?? ffi.nullptr);
  }

  static NSMutableAttributedString localizedAttributedStringWithFormat_(
      AVFAudio _lib, NSObject? format) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSMutableAttributedString1,
        _lib._sel_localizedAttributedStringWithFormat_1,
        format?._id ?? ffi.nullptr);
    return NSMutableAttributedString._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableAttributedString localizedAttributedStringWithFormat_options_(
      AVFAudio _lib, NSObject? format, int options) {
    final _ret = _lib._objc_msgSend_254(
        _lib._class_NSMutableAttributedString1,
        _lib._sel_localizedAttributedStringWithFormat_options_1,
        format?._id ?? ffi.nullptr,
        options);
    return NSMutableAttributedString._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableAttributedString new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSMutableAttributedString1, _lib._sel_new1);
    return NSMutableAttributedString._(_ret, _lib,
        retain: false, release: true);
  }

  static NSMutableAttributedString alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSMutableAttributedString1, _lib._sel_alloc1);
    return NSMutableAttributedString._(_ret, _lib,
        retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSMutableAttributedString1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSMutableAttributedString1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(_lib._class_NSMutableAttributedString1,
        _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSMutableAttributedString1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSMutableAttributedString1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSMutableAttributedString1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSMutableAttributedString1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSMutableAttributedString1,
        _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSMutableAttributedString1,
        _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSDateFormatter extends NSFormatter {
  NSDateFormatter._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSDateFormatter] that points to the same underlying object as [other].
  static NSDateFormatter castFrom<T extends _ObjCWrapper>(T other) {
    return NSDateFormatter._(other._id, other._lib,
        retain: true, release: true);
  }

  /// Returns a [NSDateFormatter] that wraps the given raw object pointer.
  static NSDateFormatter castFromPointer(
      AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSDateFormatter._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSDateFormatter].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSDateFormatter1);
  }

  int get formattingContext {
    return _lib._objc_msgSend_258(_id, _lib._sel_formattingContext1);
  }

  set formattingContext(int value) {
    _lib._objc_msgSend_259(_id, _lib._sel_setFormattingContext_1, value);
  }

  bool getObjectValue_forString_range_error_(
      ffi.Pointer<ffi.Pointer<ObjCObject>> obj,
      NSObject? string,
      ffi.Pointer<NSRange> rangep,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_260(
        _id,
        _lib._sel_getObjectValue_forString_range_error_1,
        obj,
        string?._id ?? ffi.nullptr,
        rangep,
        error);
  }

  NSObject stringFromDate_(NSObject? date) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_stringFromDate_1, date?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject dateFromString_(NSObject? string) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_dateFromString_1, string?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject localizedStringFromDate_dateStyle_timeStyle_(
      AVFAudio _lib, NSObject? date, int dstyle, int tstyle) {
    final _ret = _lib._objc_msgSend_261(
        _lib._class_NSDateFormatter1,
        _lib._sel_localizedStringFromDate_dateStyle_timeStyle_1,
        date?._id ?? ffi.nullptr,
        dstyle,
        tstyle);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject dateFormatFromTemplate_options_locale_(
      AVFAudio _lib, NSObject? tmplate, int opts, NSObject? locale) {
    final _ret = _lib._objc_msgSend_262(
        _lib._class_NSDateFormatter1,
        _lib._sel_dateFormatFromTemplate_options_locale_1,
        tmplate?._id ?? ffi.nullptr,
        opts,
        locale?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static int getDefaultFormatterBehavior(AVFAudio _lib) {
    return _lib._objc_msgSend_263(
        _lib._class_NSDateFormatter1, _lib._sel_defaultFormatterBehavior1);
  }

  static void setDefaultFormatterBehavior(AVFAudio _lib, int value) {
    _lib._objc_msgSend_264(_lib._class_NSDateFormatter1,
        _lib._sel_setDefaultFormatterBehavior_1, value);
  }

  void setLocalizedDateFormatFromTemplate_(NSObject? dateFormatTemplate) {
    return _lib._objc_msgSend_8(
        _id,
        _lib._sel_setLocalizedDateFormatFromTemplate_1,
        dateFormatTemplate?._id ?? ffi.nullptr);
  }

  NSObject? get dateFormat {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_dateFormat1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set dateFormat(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setDateFormat_1, value?._id ?? ffi.nullptr);
  }

  int get dateStyle {
    return _lib._objc_msgSend_265(_id, _lib._sel_dateStyle1);
  }

  set dateStyle(int value) {
    _lib._objc_msgSend_266(_id, _lib._sel_setDateStyle_1, value);
  }

  int get timeStyle {
    return _lib._objc_msgSend_265(_id, _lib._sel_timeStyle1);
  }

  set timeStyle(int value) {
    _lib._objc_msgSend_266(_id, _lib._sel_setTimeStyle_1, value);
  }

  NSObject? get locale {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_locale1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set locale(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setLocale_1, value?._id ?? ffi.nullptr);
  }

  bool get generatesCalendarDates {
    return _lib._objc_msgSend_9(_id, _lib._sel_generatesCalendarDates1);
  }

  set generatesCalendarDates(bool value) {
    _lib._objc_msgSend_267(_id, _lib._sel_setGeneratesCalendarDates_1, value);
  }

  int get formatterBehavior {
    return _lib._objc_msgSend_263(_id, _lib._sel_formatterBehavior1);
  }

  set formatterBehavior(int value) {
    _lib._objc_msgSend_264(_id, _lib._sel_setFormatterBehavior_1, value);
  }

  NSObject? get timeZone {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_timeZone1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set timeZone(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setTimeZone_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get calendar {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_calendar1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set calendar(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setCalendar_1, value?._id ?? ffi.nullptr);
  }

  bool get lenient {
    return _lib._objc_msgSend_9(_id, _lib._sel_isLenient1);
  }

  set lenient(bool value) {
    _lib._objc_msgSend_267(_id, _lib._sel_setLenient_1, value);
  }

  NSObject? get twoDigitStartDate {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_twoDigitStartDate1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set twoDigitStartDate(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setTwoDigitStartDate_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get defaultDate {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_defaultDate1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set defaultDate(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setDefaultDate_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get eraSymbols {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_eraSymbols1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set eraSymbols(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setEraSymbols_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get monthSymbols {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_monthSymbols1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set monthSymbols(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setMonthSymbols_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get shortMonthSymbols {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_shortMonthSymbols1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set shortMonthSymbols(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setShortMonthSymbols_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get weekdaySymbols {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_weekdaySymbols1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set weekdaySymbols(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setWeekdaySymbols_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get shortWeekdaySymbols {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_shortWeekdaySymbols1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set shortWeekdaySymbols(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setShortWeekdaySymbols_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get AMSymbol {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_AMSymbol1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set AMSymbol(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setAMSymbol_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get PMSymbol {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_PMSymbol1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set PMSymbol(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setPMSymbol_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get longEraSymbols {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_longEraSymbols1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set longEraSymbols(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setLongEraSymbols_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get veryShortMonthSymbols {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_veryShortMonthSymbols1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set veryShortMonthSymbols(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setVeryShortMonthSymbols_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get standaloneMonthSymbols {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_standaloneMonthSymbols1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set standaloneMonthSymbols(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setStandaloneMonthSymbols_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get shortStandaloneMonthSymbols {
    final _ret =
        _lib._objc_msgSend_2(_id, _lib._sel_shortStandaloneMonthSymbols1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set shortStandaloneMonthSymbols(NSObject? value) {
    _lib._objc_msgSend_34(_id, _lib._sel_setShortStandaloneMonthSymbols_1,
        value?._id ?? ffi.nullptr);
  }

  NSObject? get veryShortStandaloneMonthSymbols {
    final _ret =
        _lib._objc_msgSend_2(_id, _lib._sel_veryShortStandaloneMonthSymbols1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set veryShortStandaloneMonthSymbols(NSObject? value) {
    _lib._objc_msgSend_34(_id, _lib._sel_setVeryShortStandaloneMonthSymbols_1,
        value?._id ?? ffi.nullptr);
  }

  NSObject? get veryShortWeekdaySymbols {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_veryShortWeekdaySymbols1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set veryShortWeekdaySymbols(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setVeryShortWeekdaySymbols_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get standaloneWeekdaySymbols {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_standaloneWeekdaySymbols1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set standaloneWeekdaySymbols(NSObject? value) {
    _lib._objc_msgSend_34(_id, _lib._sel_setStandaloneWeekdaySymbols_1,
        value?._id ?? ffi.nullptr);
  }

  NSObject? get shortStandaloneWeekdaySymbols {
    final _ret =
        _lib._objc_msgSend_2(_id, _lib._sel_shortStandaloneWeekdaySymbols1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set shortStandaloneWeekdaySymbols(NSObject? value) {
    _lib._objc_msgSend_34(_id, _lib._sel_setShortStandaloneWeekdaySymbols_1,
        value?._id ?? ffi.nullptr);
  }

  NSObject? get veryShortStandaloneWeekdaySymbols {
    final _ret =
        _lib._objc_msgSend_2(_id, _lib._sel_veryShortStandaloneWeekdaySymbols1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set veryShortStandaloneWeekdaySymbols(NSObject? value) {
    _lib._objc_msgSend_34(_id, _lib._sel_setVeryShortStandaloneWeekdaySymbols_1,
        value?._id ?? ffi.nullptr);
  }

  NSObject? get quarterSymbols {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_quarterSymbols1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set quarterSymbols(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setQuarterSymbols_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get shortQuarterSymbols {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_shortQuarterSymbols1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set shortQuarterSymbols(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setShortQuarterSymbols_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get standaloneQuarterSymbols {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_standaloneQuarterSymbols1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set standaloneQuarterSymbols(NSObject? value) {
    _lib._objc_msgSend_34(_id, _lib._sel_setStandaloneQuarterSymbols_1,
        value?._id ?? ffi.nullptr);
  }

  NSObject? get shortStandaloneQuarterSymbols {
    final _ret =
        _lib._objc_msgSend_2(_id, _lib._sel_shortStandaloneQuarterSymbols1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set shortStandaloneQuarterSymbols(NSObject? value) {
    _lib._objc_msgSend_34(_id, _lib._sel_setShortStandaloneQuarterSymbols_1,
        value?._id ?? ffi.nullptr);
  }

  NSObject? get gregorianStartDate {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_gregorianStartDate1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set gregorianStartDate(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setGregorianStartDate_1, value?._id ?? ffi.nullptr);
  }

  bool get doesRelativeDateFormatting {
    return _lib._objc_msgSend_9(_id, _lib._sel_doesRelativeDateFormatting1);
  }

  set doesRelativeDateFormatting(bool value) {
    _lib._objc_msgSend_267(
        _id, _lib._sel_setDoesRelativeDateFormatting_1, value);
  }

  NSObject initWithDateFormat_allowNaturalLanguage_(
      NSObject? format, bool flag) {
    final _ret = _lib._objc_msgSend_102(
        _id,
        _lib._sel_initWithDateFormat_allowNaturalLanguage_1,
        format?._id ?? ffi.nullptr,
        flag);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool allowsNaturalLanguage() {
    return _lib._objc_msgSend_9(_id, _lib._sel_allowsNaturalLanguage1);
  }

  static NSDateFormatter new1(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSDateFormatter1, _lib._sel_new1);
    return NSDateFormatter._(_ret, _lib, retain: false, release: true);
  }

  static NSDateFormatter alloc(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSDateFormatter1, _lib._sel_alloc1);
    return NSDateFormatter._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSDateFormatter1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSDateFormatter1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(_lib._class_NSDateFormatter1,
        _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSDateFormatter1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSDateFormatter1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSDateFormatter1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSDateFormatter1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSDateFormatter1,
        _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSDateFormatter1, _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSFormatter extends NSObject {
  NSFormatter._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSFormatter] that points to the same underlying object as [other].
  static NSFormatter castFrom<T extends _ObjCWrapper>(T other) {
    return NSFormatter._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSFormatter] that wraps the given raw object pointer.
  static NSFormatter castFromPointer(
      AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSFormatter._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSFormatter].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSFormatter1);
  }

  NSObject stringForObjectValue_(NSObject obj) {
    final _ret =
        _lib._objc_msgSend_13(_id, _lib._sel_stringForObjectValue_1, obj._id);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject attributedStringForObjectValue_withDefaultAttributes_(
      NSObject obj, NSObject? attrs) {
    final _ret = _lib._objc_msgSend_39(
        _id,
        _lib._sel_attributedStringForObjectValue_withDefaultAttributes_1,
        obj._id,
        attrs?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject editingStringForObjectValue_(NSObject obj) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_editingStringForObjectValue_1, obj._id);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool getObjectValue_forString_errorDescription_(
      ffi.Pointer<ffi.Pointer<ObjCObject>> obj,
      NSObject? string,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_21(
        _id,
        _lib._sel_getObjectValue_forString_errorDescription_1,
        obj,
        string?._id ?? ffi.nullptr,
        error);
  }

  bool isPartialStringValid_newEditingString_errorDescription_(
      NSObject? partialString,
      ffi.Pointer<ffi.Pointer<ObjCObject>> newString,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_256(
        _id,
        _lib._sel_isPartialStringValid_newEditingString_errorDescription_1,
        partialString?._id ?? ffi.nullptr,
        newString,
        error);
  }

  bool
      isPartialStringValid_proposedSelectedRange_originalString_originalSelectedRange_errorDescription_(
          ffi.Pointer<ffi.Pointer<ObjCObject>> partialStringPtr,
          NSRangePointer proposedSelRangePtr,
          NSObject? origString,
          NSRange origSelRange,
          ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_257(
        _id,
        _lib._sel_isPartialStringValid_proposedSelectedRange_originalString_originalSelectedRange_errorDescription_1,
        partialStringPtr,
        proposedSelRangePtr,
        origString?._id ?? ffi.nullptr,
        origSelRange,
        error);
  }

  static NSFormatter new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSFormatter1, _lib._sel_new1);
    return NSFormatter._(_ret, _lib, retain: false, release: true);
  }

  static NSFormatter alloc(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSFormatter1, _lib._sel_alloc1);
    return NSFormatter._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSFormatter1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSFormatter1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSFormatter1, _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSFormatter1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSFormatter1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSFormatter1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSFormatter1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSFormatter1, _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSFormatter1, _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

abstract class NSFormattingContext {
  static const int NSFormattingContextUnknown = 0;
  static const int NSFormattingContextDynamic = 1;
  static const int NSFormattingContextStandalone = 2;
  static const int NSFormattingContextListItem = 3;
  static const int NSFormattingContextBeginningOfSentence = 4;
  static const int NSFormattingContextMiddleOfSentence = 5;
}

abstract class NSDateFormatterStyle {
  static const int NSDateFormatterNoStyle = 0;
  static const int NSDateFormatterShortStyle = 1;
  static const int NSDateFormatterMediumStyle = 2;
  static const int NSDateFormatterLongStyle = 3;
  static const int NSDateFormatterFullStyle = 4;
}

abstract class NSDateFormatterBehavior {
  static const int NSDateFormatterBehaviorDefault = 0;
  static const int NSDateFormatterBehavior10_0 = 1000;
  static const int NSDateFormatterBehavior10_4 = 1040;
}

class NSNumberFormatter extends NSFormatter {
  NSNumberFormatter._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSNumberFormatter] that points to the same underlying object as [other].
  static NSNumberFormatter castFrom<T extends _ObjCWrapper>(T other) {
    return NSNumberFormatter._(other._id, other._lib,
        retain: true, release: true);
  }

  /// Returns a [NSNumberFormatter] that wraps the given raw object pointer.
  static NSNumberFormatter castFromPointer(
      AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSNumberFormatter._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSNumberFormatter].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSNumberFormatter1);
  }

  int get formattingContext {
    return _lib._objc_msgSend_258(_id, _lib._sel_formattingContext1);
  }

  set formattingContext(int value) {
    _lib._objc_msgSend_259(_id, _lib._sel_setFormattingContext_1, value);
  }

  bool getObjectValue_forString_range_error_(
      ffi.Pointer<ffi.Pointer<ObjCObject>> obj,
      NSObject? string,
      ffi.Pointer<NSRange> rangep,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_260(
        _id,
        _lib._sel_getObjectValue_forString_range_error_1,
        obj,
        string?._id ?? ffi.nullptr,
        rangep,
        error);
  }

  NSObject stringFromNumber_(NSObject? number) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_stringFromNumber_1, number?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject numberFromString_(NSObject? string) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_numberFromString_1, string?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject localizedStringFromNumber_numberStyle_(
      AVFAudio _lib, NSObject? num, int nstyle) {
    final _ret = _lib._objc_msgSend_268(
        _lib._class_NSNumberFormatter1,
        _lib._sel_localizedStringFromNumber_numberStyle_1,
        num?._id ?? ffi.nullptr,
        nstyle);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static int defaultFormatterBehavior(AVFAudio _lib) {
    return _lib._objc_msgSend_269(
        _lib._class_NSNumberFormatter1, _lib._sel_defaultFormatterBehavior1);
  }

  static void setDefaultFormatterBehavior_(AVFAudio _lib, int behavior) {
    return _lib._objc_msgSend_270(_lib._class_NSNumberFormatter1,
        _lib._sel_setDefaultFormatterBehavior_1, behavior);
  }

  int get numberStyle {
    return _lib._objc_msgSend_271(_id, _lib._sel_numberStyle1);
  }

  set numberStyle(int value) {
    _lib._objc_msgSend_272(_id, _lib._sel_setNumberStyle_1, value);
  }

  NSObject? get locale {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_locale1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set locale(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setLocale_1, value?._id ?? ffi.nullptr);
  }

  bool get generatesDecimalNumbers {
    return _lib._objc_msgSend_9(_id, _lib._sel_generatesDecimalNumbers1);
  }

  set generatesDecimalNumbers(bool value) {
    _lib._objc_msgSend_267(_id, _lib._sel_setGeneratesDecimalNumbers_1, value);
  }

  int get formatterBehavior {
    return _lib._objc_msgSend_269(_id, _lib._sel_formatterBehavior1);
  }

  set formatterBehavior(int value) {
    _lib._objc_msgSend_273(_id, _lib._sel_setFormatterBehavior_1, value);
  }

  NSObject? get negativeFormat {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_negativeFormat1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set negativeFormat(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setNegativeFormat_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get textAttributesForNegativeValues {
    final _ret =
        _lib._objc_msgSend_2(_id, _lib._sel_textAttributesForNegativeValues1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set textAttributesForNegativeValues(NSObject? value) {
    _lib._objc_msgSend_34(_id, _lib._sel_setTextAttributesForNegativeValues_1,
        value?._id ?? ffi.nullptr);
  }

  NSObject? get positiveFormat {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_positiveFormat1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set positiveFormat(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setPositiveFormat_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get textAttributesForPositiveValues {
    final _ret =
        _lib._objc_msgSend_2(_id, _lib._sel_textAttributesForPositiveValues1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set textAttributesForPositiveValues(NSObject? value) {
    _lib._objc_msgSend_34(_id, _lib._sel_setTextAttributesForPositiveValues_1,
        value?._id ?? ffi.nullptr);
  }

  bool get allowsFloats {
    return _lib._objc_msgSend_9(_id, _lib._sel_allowsFloats1);
  }

  set allowsFloats(bool value) {
    _lib._objc_msgSend_267(_id, _lib._sel_setAllowsFloats_1, value);
  }

  NSObject? get decimalSeparator {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_decimalSeparator1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set decimalSeparator(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setDecimalSeparator_1, value?._id ?? ffi.nullptr);
  }

  bool get alwaysShowsDecimalSeparator {
    return _lib._objc_msgSend_9(_id, _lib._sel_alwaysShowsDecimalSeparator1);
  }

  set alwaysShowsDecimalSeparator(bool value) {
    _lib._objc_msgSend_267(
        _id, _lib._sel_setAlwaysShowsDecimalSeparator_1, value);
  }

  NSObject? get currencyDecimalSeparator {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_currencyDecimalSeparator1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set currencyDecimalSeparator(NSObject? value) {
    _lib._objc_msgSend_34(_id, _lib._sel_setCurrencyDecimalSeparator_1,
        value?._id ?? ffi.nullptr);
  }

  bool get usesGroupingSeparator {
    return _lib._objc_msgSend_9(_id, _lib._sel_usesGroupingSeparator1);
  }

  set usesGroupingSeparator(bool value) {
    _lib._objc_msgSend_267(_id, _lib._sel_setUsesGroupingSeparator_1, value);
  }

  NSObject? get groupingSeparator {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_groupingSeparator1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set groupingSeparator(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setGroupingSeparator_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get zeroSymbol {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_zeroSymbol1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set zeroSymbol(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setZeroSymbol_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get textAttributesForZero {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_textAttributesForZero1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set textAttributesForZero(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setTextAttributesForZero_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get nilSymbol {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_nilSymbol1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set nilSymbol(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setNilSymbol_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get textAttributesForNil {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_textAttributesForNil1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set textAttributesForNil(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setTextAttributesForNil_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get notANumberSymbol {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_notANumberSymbol1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set notANumberSymbol(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setNotANumberSymbol_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get textAttributesForNotANumber {
    final _ret =
        _lib._objc_msgSend_2(_id, _lib._sel_textAttributesForNotANumber1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set textAttributesForNotANumber(NSObject? value) {
    _lib._objc_msgSend_34(_id, _lib._sel_setTextAttributesForNotANumber_1,
        value?._id ?? ffi.nullptr);
  }

  NSObject? get positiveInfinitySymbol {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_positiveInfinitySymbol1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set positiveInfinitySymbol(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setPositiveInfinitySymbol_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get textAttributesForPositiveInfinity {
    final _ret =
        _lib._objc_msgSend_2(_id, _lib._sel_textAttributesForPositiveInfinity1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set textAttributesForPositiveInfinity(NSObject? value) {
    _lib._objc_msgSend_34(_id, _lib._sel_setTextAttributesForPositiveInfinity_1,
        value?._id ?? ffi.nullptr);
  }

  NSObject? get negativeInfinitySymbol {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_negativeInfinitySymbol1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set negativeInfinitySymbol(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setNegativeInfinitySymbol_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get textAttributesForNegativeInfinity {
    final _ret =
        _lib._objc_msgSend_2(_id, _lib._sel_textAttributesForNegativeInfinity1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set textAttributesForNegativeInfinity(NSObject? value) {
    _lib._objc_msgSend_34(_id, _lib._sel_setTextAttributesForNegativeInfinity_1,
        value?._id ?? ffi.nullptr);
  }

  NSObject? get positivePrefix {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_positivePrefix1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set positivePrefix(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setPositivePrefix_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get positiveSuffix {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_positiveSuffix1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set positiveSuffix(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setPositiveSuffix_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get negativePrefix {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_negativePrefix1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set negativePrefix(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setNegativePrefix_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get negativeSuffix {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_negativeSuffix1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set negativeSuffix(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setNegativeSuffix_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get currencyCode {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_currencyCode1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set currencyCode(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setCurrencyCode_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get currencySymbol {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_currencySymbol1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set currencySymbol(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setCurrencySymbol_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get internationalCurrencySymbol {
    final _ret =
        _lib._objc_msgSend_2(_id, _lib._sel_internationalCurrencySymbol1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set internationalCurrencySymbol(NSObject? value) {
    _lib._objc_msgSend_34(_id, _lib._sel_setInternationalCurrencySymbol_1,
        value?._id ?? ffi.nullptr);
  }

  NSObject? get percentSymbol {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_percentSymbol1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set percentSymbol(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setPercentSymbol_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get perMillSymbol {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_perMillSymbol1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set perMillSymbol(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setPerMillSymbol_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get minusSign {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_minusSign1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set minusSign(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setMinusSign_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get plusSign {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_plusSign1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set plusSign(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setPlusSign_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get exponentSymbol {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_exponentSymbol1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set exponentSymbol(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setExponentSymbol_1, value?._id ?? ffi.nullptr);
  }

  int get groupingSize {
    return _lib._objc_msgSend_10(_id, _lib._sel_groupingSize1);
  }

  set groupingSize(int value) {
    _lib._objc_msgSend_241(_id, _lib._sel_setGroupingSize_1, value);
  }

  int get secondaryGroupingSize {
    return _lib._objc_msgSend_10(_id, _lib._sel_secondaryGroupingSize1);
  }

  set secondaryGroupingSize(int value) {
    _lib._objc_msgSend_241(_id, _lib._sel_setSecondaryGroupingSize_1, value);
  }

  NSObject? get multiplier {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_multiplier1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set multiplier(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setMultiplier_1, value?._id ?? ffi.nullptr);
  }

  int get formatWidth {
    return _lib._objc_msgSend_10(_id, _lib._sel_formatWidth1);
  }

  set formatWidth(int value) {
    _lib._objc_msgSend_241(_id, _lib._sel_setFormatWidth_1, value);
  }

  NSObject? get paddingCharacter {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_paddingCharacter1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set paddingCharacter(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setPaddingCharacter_1, value?._id ?? ffi.nullptr);
  }

  int get paddingPosition {
    return _lib._objc_msgSend_274(_id, _lib._sel_paddingPosition1);
  }

  set paddingPosition(int value) {
    _lib._objc_msgSend_275(_id, _lib._sel_setPaddingPosition_1, value);
  }

  int get roundingMode {
    return _lib._objc_msgSend_276(_id, _lib._sel_roundingMode1);
  }

  set roundingMode(int value) {
    _lib._objc_msgSend_277(_id, _lib._sel_setRoundingMode_1, value);
  }

  NSObject? get roundingIncrement {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_roundingIncrement1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set roundingIncrement(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setRoundingIncrement_1, value?._id ?? ffi.nullptr);
  }

  int get minimumIntegerDigits {
    return _lib._objc_msgSend_10(_id, _lib._sel_minimumIntegerDigits1);
  }

  set minimumIntegerDigits(int value) {
    _lib._objc_msgSend_241(_id, _lib._sel_setMinimumIntegerDigits_1, value);
  }

  int get maximumIntegerDigits {
    return _lib._objc_msgSend_10(_id, _lib._sel_maximumIntegerDigits1);
  }

  set maximumIntegerDigits(int value) {
    _lib._objc_msgSend_241(_id, _lib._sel_setMaximumIntegerDigits_1, value);
  }

  int get minimumFractionDigits {
    return _lib._objc_msgSend_10(_id, _lib._sel_minimumFractionDigits1);
  }

  set minimumFractionDigits(int value) {
    _lib._objc_msgSend_241(_id, _lib._sel_setMinimumFractionDigits_1, value);
  }

  int get maximumFractionDigits {
    return _lib._objc_msgSend_10(_id, _lib._sel_maximumFractionDigits1);
  }

  set maximumFractionDigits(int value) {
    _lib._objc_msgSend_241(_id, _lib._sel_setMaximumFractionDigits_1, value);
  }

  NSObject? get minimum {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_minimum1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set minimum(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setMinimum_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get maximum {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_maximum1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set maximum(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setMaximum_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get currencyGroupingSeparator {
    final _ret =
        _lib._objc_msgSend_2(_id, _lib._sel_currencyGroupingSeparator1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set currencyGroupingSeparator(NSObject? value) {
    _lib._objc_msgSend_34(_id, _lib._sel_setCurrencyGroupingSeparator_1,
        value?._id ?? ffi.nullptr);
  }

  bool get lenient {
    return _lib._objc_msgSend_9(_id, _lib._sel_isLenient1);
  }

  set lenient(bool value) {
    _lib._objc_msgSend_267(_id, _lib._sel_setLenient_1, value);
  }

  bool get usesSignificantDigits {
    return _lib._objc_msgSend_9(_id, _lib._sel_usesSignificantDigits1);
  }

  set usesSignificantDigits(bool value) {
    _lib._objc_msgSend_267(_id, _lib._sel_setUsesSignificantDigits_1, value);
  }

  int get minimumSignificantDigits {
    return _lib._objc_msgSend_10(_id, _lib._sel_minimumSignificantDigits1);
  }

  set minimumSignificantDigits(int value) {
    _lib._objc_msgSend_241(_id, _lib._sel_setMinimumSignificantDigits_1, value);
  }

  int get maximumSignificantDigits {
    return _lib._objc_msgSend_10(_id, _lib._sel_maximumSignificantDigits1);
  }

  set maximumSignificantDigits(int value) {
    _lib._objc_msgSend_241(_id, _lib._sel_setMaximumSignificantDigits_1, value);
  }

  bool get partialStringValidationEnabled {
    return _lib._objc_msgSend_9(
        _id, _lib._sel_isPartialStringValidationEnabled1);
  }

  set partialStringValidationEnabled(bool value) {
    _lib._objc_msgSend_267(
        _id, _lib._sel_setPartialStringValidationEnabled_1, value);
  }

  bool get hasThousandSeparators {
    return _lib._objc_msgSend_9(_id, _lib._sel_hasThousandSeparators1);
  }

  set hasThousandSeparators(bool value) {
    _lib._objc_msgSend_267(_id, _lib._sel_setHasThousandSeparators_1, value);
  }

  NSObject? get thousandSeparator {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_thousandSeparator1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set thousandSeparator(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setThousandSeparator_1, value?._id ?? ffi.nullptr);
  }

  bool get localizesFormat {
    return _lib._objc_msgSend_9(_id, _lib._sel_localizesFormat1);
  }

  set localizesFormat(bool value) {
    _lib._objc_msgSend_267(_id, _lib._sel_setLocalizesFormat_1, value);
  }

  NSObject? get format {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_format1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set format(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setFormat_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get attributedStringForZero {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_attributedStringForZero1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set attributedStringForZero(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setAttributedStringForZero_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get attributedStringForNil {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_attributedStringForNil1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set attributedStringForNil(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setAttributedStringForNil_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get attributedStringForNotANumber {
    final _ret =
        _lib._objc_msgSend_2(_id, _lib._sel_attributedStringForNotANumber1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set attributedStringForNotANumber(NSObject? value) {
    _lib._objc_msgSend_34(_id, _lib._sel_setAttributedStringForNotANumber_1,
        value?._id ?? ffi.nullptr);
  }

  NSObject? get roundingBehavior {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_roundingBehavior1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set roundingBehavior(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setRoundingBehavior_1, value?._id ?? ffi.nullptr);
  }

  static NSNumberFormatter new1(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSNumberFormatter1, _lib._sel_new1);
    return NSNumberFormatter._(_ret, _lib, retain: false, release: true);
  }

  static NSNumberFormatter alloc(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSNumberFormatter1, _lib._sel_alloc1);
    return NSNumberFormatter._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSNumberFormatter1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSNumberFormatter1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(_lib._class_NSNumberFormatter1,
        _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSNumberFormatter1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSNumberFormatter1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSNumberFormatter1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSNumberFormatter1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSNumberFormatter1,
        _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSNumberFormatter1, _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

abstract class NSNumberFormatterStyle {
  static const int NSNumberFormatterNoStyle = 0;
  static const int NSNumberFormatterDecimalStyle = 1;
  static const int NSNumberFormatterCurrencyStyle = 2;
  static const int NSNumberFormatterPercentStyle = 3;
  static const int NSNumberFormatterScientificStyle = 4;
  static const int NSNumberFormatterSpellOutStyle = 5;
  static const int NSNumberFormatterOrdinalStyle = 6;
  static const int NSNumberFormatterCurrencyISOCodeStyle = 8;
  static const int NSNumberFormatterCurrencyPluralStyle = 9;
  static const int NSNumberFormatterCurrencyAccountingStyle = 10;
}

abstract class NSNumberFormatterBehavior {
  static const int NSNumberFormatterBehaviorDefault = 0;
  static const int NSNumberFormatterBehavior10_0 = 1000;
  static const int NSNumberFormatterBehavior10_4 = 1040;
}

abstract class NSNumberFormatterPadPosition {
  static const int NSNumberFormatterPadBeforePrefix = 0;
  static const int NSNumberFormatterPadAfterPrefix = 1;
  static const int NSNumberFormatterPadBeforeSuffix = 2;
  static const int NSNumberFormatterPadAfterSuffix = 3;
}

abstract class NSNumberFormatterRoundingMode {
  static const int NSNumberFormatterRoundCeiling = 0;
  static const int NSNumberFormatterRoundFloor = 1;
  static const int NSNumberFormatterRoundDown = 2;
  static const int NSNumberFormatterRoundUp = 3;
  static const int NSNumberFormatterRoundHalfEven = 4;
  static const int NSNumberFormatterRoundHalfDown = 5;
  static const int NSNumberFormatterRoundHalfUp = 6;
}

class NSLocale extends NSObject {
  NSLocale._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSLocale] that points to the same underlying object as [other].
  static NSLocale castFrom<T extends _ObjCWrapper>(T other) {
    return NSLocale._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSLocale] that wraps the given raw object pointer.
  static NSLocale castFromPointer(AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSLocale._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSLocale].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSLocale1);
  }

  NSObject objectForKey_(NSLocaleKey key) {
    final _ret = _lib._objc_msgSend_13(_id, _lib._sel_objectForKey_1, key);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject displayNameForKey_value_(NSLocaleKey key, NSObject value) {
    final _ret = _lib._objc_msgSend_39(
        _id, _lib._sel_displayNameForKey_value_1, key, value._id);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSLocale initWithLocaleIdentifier_(NSObject? string) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_initWithLocaleIdentifier_1, string?._id ?? ffi.nullptr);
    return NSLocale._(_ret, _lib, retain: true, release: true);
  }

  NSLocale initWithCoder_(NSObject? coder) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_initWithCoder_1, coder?._id ?? ffi.nullptr);
    return NSLocale._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get localeIdentifier {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_localeIdentifier1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject localizedStringForLocaleIdentifier_(NSObject? localeIdentifier) {
    final _ret = _lib._objc_msgSend_13(
        _id,
        _lib._sel_localizedStringForLocaleIdentifier_1,
        localeIdentifier?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get languageCode {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_languageCode1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject localizedStringForLanguageCode_(NSObject? languageCode) {
    final _ret = _lib._objc_msgSend_13(
        _id,
        _lib._sel_localizedStringForLanguageCode_1,
        languageCode?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get countryCode {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_countryCode1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject localizedStringForCountryCode_(NSObject? countryCode) {
    final _ret = _lib._objc_msgSend_13(
        _id,
        _lib._sel_localizedStringForCountryCode_1,
        countryCode?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get scriptCode {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_scriptCode1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject localizedStringForScriptCode_(NSObject? scriptCode) {
    final _ret = _lib._objc_msgSend_13(
        _id,
        _lib._sel_localizedStringForScriptCode_1,
        scriptCode?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get variantCode {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_variantCode1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject localizedStringForVariantCode_(NSObject? variantCode) {
    final _ret = _lib._objc_msgSend_13(
        _id,
        _lib._sel_localizedStringForVariantCode_1,
        variantCode?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get exemplarCharacterSet {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_exemplarCharacterSet1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get calendarIdentifier {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_calendarIdentifier1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject localizedStringForCalendarIdentifier_(NSObject? calendarIdentifier) {
    final _ret = _lib._objc_msgSend_13(
        _id,
        _lib._sel_localizedStringForCalendarIdentifier_1,
        calendarIdentifier?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get collationIdentifier {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_collationIdentifier1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject localizedStringForCollationIdentifier_(
      NSObject? collationIdentifier) {
    final _ret = _lib._objc_msgSend_13(
        _id,
        _lib._sel_localizedStringForCollationIdentifier_1,
        collationIdentifier?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool get usesMetricSystem {
    return _lib._objc_msgSend_9(_id, _lib._sel_usesMetricSystem1);
  }

  NSObject? get decimalSeparator {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_decimalSeparator1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get groupingSeparator {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_groupingSeparator1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get currencySymbol {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_currencySymbol1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get currencyCode {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_currencyCode1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject localizedStringForCurrencyCode_(NSObject? currencyCode) {
    final _ret = _lib._objc_msgSend_13(
        _id,
        _lib._sel_localizedStringForCurrencyCode_1,
        currencyCode?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get collatorIdentifier {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_collatorIdentifier1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject localizedStringForCollatorIdentifier_(NSObject? collatorIdentifier) {
    final _ret = _lib._objc_msgSend_13(
        _id,
        _lib._sel_localizedStringForCollatorIdentifier_1,
        collatorIdentifier?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get quotationBeginDelimiter {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_quotationBeginDelimiter1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get quotationEndDelimiter {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_quotationEndDelimiter1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get alternateQuotationBeginDelimiter {
    final _ret =
        _lib._objc_msgSend_2(_id, _lib._sel_alternateQuotationBeginDelimiter1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get alternateQuotationEndDelimiter {
    final _ret =
        _lib._objc_msgSend_2(_id, _lib._sel_alternateQuotationEndDelimiter1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? getAutoupdatingCurrentLocale(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSLocale1, _lib._sel_autoupdatingCurrentLocale1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? getCurrentLocale(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSLocale1, _lib._sel_currentLocale1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? getSystemLocale(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSLocale1, _lib._sel_systemLocale1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSLocale localeWithLocaleIdentifier_(AVFAudio _lib, NSObject? ident) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSLocale1,
        _lib._sel_localeWithLocaleIdentifier_1, ident?._id ?? ffi.nullptr);
    return NSLocale._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSLocale init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSLocale._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? getAvailableLocaleIdentifiers(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSLocale1, _lib._sel_availableLocaleIdentifiers1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? getISOLanguageCodes(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSLocale1, _lib._sel_ISOLanguageCodes1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? getISOCountryCodes(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSLocale1, _lib._sel_ISOCountryCodes1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? getISOCurrencyCodes(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSLocale1, _lib._sel_ISOCurrencyCodes1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? getCommonISOCurrencyCodes(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSLocale1, _lib._sel_commonISOCurrencyCodes1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? getPreferredLanguages(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSLocale1, _lib._sel_preferredLanguages1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject componentsFromLocaleIdentifier_(
      AVFAudio _lib, NSObject? string) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSLocale1,
        _lib._sel_componentsFromLocaleIdentifier_1, string?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject localeIdentifierFromComponents_(
      AVFAudio _lib, NSObject? dict) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSLocale1,
        _lib._sel_localeIdentifierFromComponents_1, dict?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject canonicalLocaleIdentifierFromString_(
      AVFAudio _lib, NSObject? string) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSLocale1,
        _lib._sel_canonicalLocaleIdentifierFromString_1,
        string?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject canonicalLanguageIdentifierFromString_(
      AVFAudio _lib, NSObject? string) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSLocale1,
        _lib._sel_canonicalLanguageIdentifierFromString_1,
        string?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject localeIdentifierFromWindowsLocaleCode_(
      AVFAudio _lib, int lcid) {
    final _ret = _lib._objc_msgSend_278(_lib._class_NSLocale1,
        _lib._sel_localeIdentifierFromWindowsLocaleCode_1, lcid);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static int windowsLocaleCodeFromLocaleIdentifier_(
      AVFAudio _lib, NSObject? localeIdentifier) {
    return _lib._objc_msgSend_279(
        _lib._class_NSLocale1,
        _lib._sel_windowsLocaleCodeFromLocaleIdentifier_1,
        localeIdentifier?._id ?? ffi.nullptr);
  }

  static int characterDirectionForLanguage_(
      AVFAudio _lib, NSObject? isoLangCode) {
    return _lib._objc_msgSend_280(
        _lib._class_NSLocale1,
        _lib._sel_characterDirectionForLanguage_1,
        isoLangCode?._id ?? ffi.nullptr);
  }

  static int lineDirectionForLanguage_(AVFAudio _lib, NSObject? isoLangCode) {
    return _lib._objc_msgSend_280(_lib._class_NSLocale1,
        _lib._sel_lineDirectionForLanguage_1, isoLangCode?._id ?? ffi.nullptr);
  }

  static NSLocale new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSLocale1, _lib._sel_new1);
    return NSLocale._(_ret, _lib, retain: false, release: true);
  }

  static NSLocale alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSLocale1, _lib._sel_alloc1);
    return NSLocale._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSLocale1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSLocale1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSLocale1, _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSLocale1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSLocale1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSLocale1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSLocale1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSLocale1, _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSLocale1, _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

typedef NSLocaleKey = ffi.Pointer<ObjCObject>;

abstract class NSLocaleLanguageDirection {
  static const int NSLocaleLanguageDirectionUnknown = 0;
  static const int NSLocaleLanguageDirectionLeftToRight = 1;
  static const int NSLocaleLanguageDirectionRightToLeft = 2;
  static const int NSLocaleLanguageDirectionTopToBottom = 3;
  static const int NSLocaleLanguageDirectionBottomToTop = 4;
}

class NSScanner extends NSObject {
  NSScanner._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSScanner] that points to the same underlying object as [other].
  static NSScanner castFrom<T extends _ObjCWrapper>(T other) {
    return NSScanner._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSScanner] that wraps the given raw object pointer.
  static NSScanner castFromPointer(AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSScanner._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSScanner].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSScanner1);
  }

  NSObject? get string {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_string1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  int get scanLocation {
    return _lib._objc_msgSend_10(_id, _lib._sel_scanLocation1);
  }

  set scanLocation(int value) {
    _lib._objc_msgSend_241(_id, _lib._sel_setScanLocation_1, value);
  }

  NSObject? get charactersToBeSkipped {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_charactersToBeSkipped1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set charactersToBeSkipped(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setCharactersToBeSkipped_1, value?._id ?? ffi.nullptr);
  }

  bool get caseSensitive {
    return _lib._objc_msgSend_9(_id, _lib._sel_caseSensitive1);
  }

  set caseSensitive(bool value) {
    _lib._objc_msgSend_267(_id, _lib._sel_setCaseSensitive_1, value);
  }

  NSObject get locale {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_locale1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  set locale(NSObject value) {
    _lib._objc_msgSend_34(_id, _lib._sel_setLocale_1, value._id);
  }

  NSScanner initWithString_(NSObject? string) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_initWithString_1, string?._id ?? ffi.nullptr);
    return NSScanner._(_ret, _lib, retain: true, release: true);
  }

  bool scanInt_(ffi.Pointer<ffi.Int> result) {
    return _lib._objc_msgSend_281(_id, _lib._sel_scanInt_1, result);
  }

  bool scanInteger_(ffi.Pointer<NSInteger> result) {
    return _lib._objc_msgSend_282(_id, _lib._sel_scanInteger_1, result);
  }

  bool scanLongLong_(ffi.Pointer<ffi.LongLong> result) {
    return _lib._objc_msgSend_283(_id, _lib._sel_scanLongLong_1, result);
  }

  bool scanUnsignedLongLong_(ffi.Pointer<ffi.UnsignedLongLong> result) {
    return _lib._objc_msgSend_284(
        _id, _lib._sel_scanUnsignedLongLong_1, result);
  }

  bool scanFloat_(ffi.Pointer<ffi.Float> result) {
    return _lib._objc_msgSend_285(_id, _lib._sel_scanFloat_1, result);
  }

  bool scanDouble_(ffi.Pointer<ffi.Double> result) {
    return _lib._objc_msgSend_286(_id, _lib._sel_scanDouble_1, result);
  }

  bool scanHexInt_(ffi.Pointer<ffi.UnsignedInt> result) {
    return _lib._objc_msgSend_287(_id, _lib._sel_scanHexInt_1, result);
  }

  bool scanHexLongLong_(ffi.Pointer<ffi.UnsignedLongLong> result) {
    return _lib._objc_msgSend_284(_id, _lib._sel_scanHexLongLong_1, result);
  }

  bool scanHexFloat_(ffi.Pointer<ffi.Float> result) {
    return _lib._objc_msgSend_285(_id, _lib._sel_scanHexFloat_1, result);
  }

  bool scanHexDouble_(ffi.Pointer<ffi.Double> result) {
    return _lib._objc_msgSend_286(_id, _lib._sel_scanHexDouble_1, result);
  }

  bool scanString_intoString_(
      NSObject? string, ffi.Pointer<ffi.Pointer<ObjCObject>> result) {
    return _lib._objc_msgSend_89(_id, _lib._sel_scanString_intoString_1,
        string?._id ?? ffi.nullptr, result);
  }

  bool scanCharactersFromSet_intoString_(
      NSObject? set, ffi.Pointer<ffi.Pointer<ObjCObject>> result) {
    return _lib._objc_msgSend_89(
        _id,
        _lib._sel_scanCharactersFromSet_intoString_1,
        set?._id ?? ffi.nullptr,
        result);
  }

  bool scanUpToString_intoString_(
      NSObject? string, ffi.Pointer<ffi.Pointer<ObjCObject>> result) {
    return _lib._objc_msgSend_89(_id, _lib._sel_scanUpToString_intoString_1,
        string?._id ?? ffi.nullptr, result);
  }

  bool scanUpToCharactersFromSet_intoString_(
      NSObject? set, ffi.Pointer<ffi.Pointer<ObjCObject>> result) {
    return _lib._objc_msgSend_89(
        _id,
        _lib._sel_scanUpToCharactersFromSet_intoString_1,
        set?._id ?? ffi.nullptr,
        result);
  }

  bool get atEnd {
    return _lib._objc_msgSend_9(_id, _lib._sel_isAtEnd1);
  }

  static NSScanner scannerWithString_(AVFAudio _lib, NSObject? string) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSScanner1,
        _lib._sel_scannerWithString_1, string?._id ?? ffi.nullptr);
    return NSScanner._(_ret, _lib, retain: true, release: true);
  }

  static NSObject localizedScannerWithString_(AVFAudio _lib, NSObject? string) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSScanner1,
        _lib._sel_localizedScannerWithString_1, string?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool scanDecimal_(ffi.Pointer<NSDecimal> dcm) {
    return _lib._objc_msgSend_288(_id, _lib._sel_scanDecimal_1, dcm);
  }

  static NSScanner new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSScanner1, _lib._sel_new1);
    return NSScanner._(_ret, _lib, retain: false, release: true);
  }

  static NSScanner alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSScanner1, _lib._sel_alloc1);
    return NSScanner._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSScanner1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSScanner1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSScanner1, _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSScanner1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSScanner1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSScanner1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSScanner1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSScanner1, _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSScanner1, _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSException extends NSObject {
  NSException._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSException] that points to the same underlying object as [other].
  static NSException castFrom<T extends _ObjCWrapper>(T other) {
    return NSException._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSException] that wraps the given raw object pointer.
  static NSException castFromPointer(
      AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSException._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSException].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSException1);
  }

  static NSObject exceptionWithName_reason_userInfo_(AVFAudio _lib,
      NSExceptionName name, NSObject? reason, NSObject? userInfo) {
    final _ret = _lib._objc_msgSend_35(
        _lib._class_NSException1,
        _lib._sel_exceptionWithName_reason_userInfo_1,
        name,
        reason?._id ?? ffi.nullptr,
        userInfo?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSException initWithName_reason_userInfo_(
      NSExceptionName aName, NSObject? aReason, NSObject? aUserInfo) {
    final _ret = _lib._objc_msgSend_35(
        _id,
        _lib._sel_initWithName_reason_userInfo_1,
        aName,
        aReason?._id ?? ffi.nullptr,
        aUserInfo?._id ?? ffi.nullptr);
    return NSException._(_ret, _lib, retain: true, release: true);
  }

  NSExceptionName get name {
    return _lib._objc_msgSend_2(_id, _lib._sel_name1);
  }

  NSObject? get reason {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_reason1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get userInfo {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_userInfo1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get callStackReturnAddresses {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_callStackReturnAddresses1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get callStackSymbols {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_callStackSymbols1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  void raise() {
    return _lib._objc_msgSend_1(_id, _lib._sel_raise1);
  }

  static void raise_format_(
      AVFAudio _lib, NSExceptionName name, NSObject? format) {
    return _lib._objc_msgSend_19(_lib._class_NSException1,
        _lib._sel_raise_format_1, name, format?._id ?? ffi.nullptr);
  }

  static void raise_format_arguments_(AVFAudio _lib, NSExceptionName name,
      NSObject? format, ffi.Pointer<__va_list_tag> argList) {
    return _lib._objc_msgSend_289(
        _lib._class_NSException1,
        _lib._sel_raise_format_arguments_1,
        name,
        format?._id ?? ffi.nullptr,
        argList);
  }

  static NSException new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSException1, _lib._sel_new1);
    return NSException._(_ret, _lib, retain: false, release: true);
  }

  static NSException alloc(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSException1, _lib._sel_alloc1);
    return NSException._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSException1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSException1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSException1, _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSException1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSException1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSException1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSException1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSException1, _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSException1, _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

typedef NSExceptionName = ffi.Pointer<ObjCObject>;

class NSRunLoop extends NSObject {
  NSRunLoop._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSRunLoop] that points to the same underlying object as [other].
  static NSRunLoop castFrom<T extends _ObjCWrapper>(T other) {
    return NSRunLoop._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSRunLoop] that wraps the given raw object pointer.
  static NSRunLoop castFromPointer(AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSRunLoop._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSRunLoop].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSRunLoop1);
  }

  static NSObject? getCurrentRunLoop(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSRunLoop1, _lib._sel_currentRunLoop1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? getMainRunLoop(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSRunLoop1, _lib._sel_mainRunLoop1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSRunLoopMode get currentMode {
    return _lib._objc_msgSend_2(_id, _lib._sel_currentMode1);
  }

  CFRunLoopRef getCFRunLoop() {
    return _lib._objc_msgSend_290(_id, _lib._sel_getCFRunLoop1);
  }

  void addTimer_forMode_(NSObject? timer, NSRunLoopMode mode) {
    return _lib._objc_msgSend_19(
        _id, _lib._sel_addTimer_forMode_1, timer?._id ?? ffi.nullptr, mode);
  }

  void addPort_forMode_(NSObject? aPort, NSRunLoopMode mode) {
    return _lib._objc_msgSend_19(
        _id, _lib._sel_addPort_forMode_1, aPort?._id ?? ffi.nullptr, mode);
  }

  void removePort_forMode_(NSObject? aPort, NSRunLoopMode mode) {
    return _lib._objc_msgSend_19(
        _id, _lib._sel_removePort_forMode_1, aPort?._id ?? ffi.nullptr, mode);
  }

  NSObject limitDateForMode_(NSRunLoopMode mode) {
    final _ret = _lib._objc_msgSend_13(_id, _lib._sel_limitDateForMode_1, mode);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void acceptInputForMode_beforeDate_(NSRunLoopMode mode, NSObject? limitDate) {
    return _lib._objc_msgSend_19(_id, _lib._sel_acceptInputForMode_beforeDate_1,
        mode, limitDate?._id ?? ffi.nullptr);
  }

  void run() {
    return _lib._objc_msgSend_1(_id, _lib._sel_run1);
  }

  void runUntilDate_(NSObject? limitDate) {
    return _lib._objc_msgSend_8(
        _id, _lib._sel_runUntilDate_1, limitDate?._id ?? ffi.nullptr);
  }

  bool runMode_beforeDate_(NSRunLoopMode mode, NSObject? limitDate) {
    return _lib._objc_msgSend_20(_id, _lib._sel_runMode_beforeDate_1, mode,
        limitDate?._id ?? ffi.nullptr);
  }

  void configureAsServer() {
    return _lib._objc_msgSend_1(_id, _lib._sel_configureAsServer1);
  }

  void performInModes_block_(NSObject? modes, ObjCBlock18 block) {
    return _lib._objc_msgSend_291(_id, _lib._sel_performInModes_block_1,
        modes?._id ?? ffi.nullptr, block._impl);
  }

  void performBlock_(ObjCBlock18 block) {
    return _lib._objc_msgSend_292(_id, _lib._sel_performBlock_1, block._impl);
  }

  void performSelector_target_argument_order_modes_(
      ffi.Pointer<ObjCSel> aSelector,
      NSObject target,
      NSObject arg,
      int order,
      NSObject? modes) {
    return _lib._objc_msgSend_293(
        _id,
        _lib._sel_performSelector_target_argument_order_modes_1,
        aSelector,
        target._id,
        arg._id,
        order,
        modes?._id ?? ffi.nullptr);
  }

  void cancelPerformSelector_target_argument_(
      ffi.Pointer<ObjCSel> aSelector, NSObject target, NSObject arg) {
    return _lib._objc_msgSend_294(
        _id,
        _lib._sel_cancelPerformSelector_target_argument_1,
        aSelector,
        target._id,
        arg._id);
  }

  void cancelPerformSelectorsWithTarget_(NSObject target) {
    return _lib._objc_msgSend_8(
        _id, _lib._sel_cancelPerformSelectorsWithTarget_1, target._id);
  }

  static NSRunLoop new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSRunLoop1, _lib._sel_new1);
    return NSRunLoop._(_ret, _lib, retain: false, release: true);
  }

  static NSRunLoop alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSRunLoop1, _lib._sel_alloc1);
    return NSRunLoop._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSRunLoop1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSRunLoop1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSRunLoop1, _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSRunLoop1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSRunLoop1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSRunLoop1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSRunLoop1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSRunLoop1, _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSRunLoop1, _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

typedef NSRunLoopMode = ffi.Pointer<ObjCObject>;
typedef CFRunLoopRef = ffi.Pointer<__CFRunLoop>;

class __CFRunLoop extends ffi.Opaque {}

void _ObjCBlock18_fnPtrTrampoline(ffi.Pointer<_ObjCBlock> block) {
  return block.ref.target
      .cast<ffi.NativeFunction<ffi.Void Function()>>()
      .asFunction<void Function()>()();
}

final _ObjCBlock18_closureRegistry = <int, Function>{};
int _ObjCBlock18_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock18_registerClosure(Function fn) {
  final id = ++_ObjCBlock18_closureRegistryIndex;
  _ObjCBlock18_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock18_closureTrampoline(ffi.Pointer<_ObjCBlock> block) {
  return _ObjCBlock18_closureRegistry[block.ref.target.address]!();
}

class ObjCBlock18 {
  final ffi.Pointer<_ObjCBlock> _impl;
  final AVFAudio _lib;
  ObjCBlock18._(this._impl, this._lib);
  ObjCBlock18.fromFunctionPointer(
      this._lib, ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> ptr)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<_ObjCBlock> block)>(
                    _ObjCBlock18_fnPtrTrampoline)
                .cast(),
            ptr.cast());
  ObjCBlock18.fromFunction(this._lib, void Function() fn)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<_ObjCBlock> block)>(
                    _ObjCBlock18_closureTrampoline)
                .cast(),
            _ObjCBlock18_registerClosure(fn));
  void call() {
    return _impl.ref.invoke
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<_ObjCBlock> block)>>()
        .asFunction<void Function(ffi.Pointer<_ObjCBlock> block)>()(_impl);
  }

  ffi.Pointer<_ObjCBlock> get pointer => _impl;
}

class NSFileHandle extends NSObject {
  NSFileHandle._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSFileHandle] that points to the same underlying object as [other].
  static NSFileHandle castFrom<T extends _ObjCWrapper>(T other) {
    return NSFileHandle._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSFileHandle] that wraps the given raw object pointer.
  static NSFileHandle castFromPointer(
      AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSFileHandle._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSFileHandle].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSFileHandle1);
  }

  NSObject? get availableData {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_availableData1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSFileHandle initWithFileDescriptor_closeOnDealloc_(int fd, bool closeopt) {
    final _ret = _lib._objc_msgSend_295(
        _id, _lib._sel_initWithFileDescriptor_closeOnDealloc_1, fd, closeopt);
    return NSFileHandle._(_ret, _lib, retain: true, release: true);
  }

  NSFileHandle initWithCoder_(NSObject? coder) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_initWithCoder_1, coder?._id ?? ffi.nullptr);
    return NSFileHandle._(_ret, _lib, retain: true, release: true);
  }

  NSObject readDataToEndOfFileAndReturnError_(
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_203(
        _id, _lib._sel_readDataToEndOfFileAndReturnError_1, error);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject readDataUpToLength_error_(
      int length, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_296(
        _id, _lib._sel_readDataUpToLength_error_1, length, error);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool writeData_error_(
      NSObject? data, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_89(
        _id, _lib._sel_writeData_error_1, data?._id ?? ffi.nullptr, error);
  }

  bool getOffset_error_(ffi.Pointer<ffi.UnsignedLongLong> offsetInFile,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_297(
        _id, _lib._sel_getOffset_error_1, offsetInFile, error);
  }

  bool seekToEndReturningOffset_error_(
      ffi.Pointer<ffi.UnsignedLongLong> offsetInFile,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_297(
        _id, _lib._sel_seekToEndReturningOffset_error_1, offsetInFile, error);
  }

  bool seekToOffset_error_(
      int offset, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_298(
        _id, _lib._sel_seekToOffset_error_1, offset, error);
  }

  bool truncateAtOffset_error_(
      int offset, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_298(
        _id, _lib._sel_truncateAtOffset_error_1, offset, error);
  }

  bool synchronizeAndReturnError_(ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_195(
        _id, _lib._sel_synchronizeAndReturnError_1, error);
  }

  bool closeAndReturnError_(ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_195(_id, _lib._sel_closeAndReturnError_1, error);
  }

  static NSObject? getFileHandleWithStandardInput(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSFileHandle1, _lib._sel_fileHandleWithStandardInput1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? getFileHandleWithStandardOutput(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSFileHandle1, _lib._sel_fileHandleWithStandardOutput1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? getFileHandleWithStandardError(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSFileHandle1, _lib._sel_fileHandleWithStandardError1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? getFileHandleWithNullDevice(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSFileHandle1, _lib._sel_fileHandleWithNullDevice1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSFileHandle fileHandleForReadingAtPath_(
      AVFAudio _lib, NSObject? path) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSFileHandle1,
        _lib._sel_fileHandleForReadingAtPath_1, path?._id ?? ffi.nullptr);
    return NSFileHandle._(_ret, _lib, retain: true, release: true);
  }

  static NSFileHandle fileHandleForWritingAtPath_(
      AVFAudio _lib, NSObject? path) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSFileHandle1,
        _lib._sel_fileHandleForWritingAtPath_1, path?._id ?? ffi.nullptr);
    return NSFileHandle._(_ret, _lib, retain: true, release: true);
  }

  static NSFileHandle fileHandleForUpdatingAtPath_(
      AVFAudio _lib, NSObject? path) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSFileHandle1,
        _lib._sel_fileHandleForUpdatingAtPath_1, path?._id ?? ffi.nullptr);
    return NSFileHandle._(_ret, _lib, retain: true, release: true);
  }

  static NSFileHandle fileHandleForReadingFromURL_error_(AVFAudio _lib,
      NSObject? url, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_103(
        _lib._class_NSFileHandle1,
        _lib._sel_fileHandleForReadingFromURL_error_1,
        url?._id ?? ffi.nullptr,
        error);
    return NSFileHandle._(_ret, _lib, retain: true, release: true);
  }

  static NSFileHandle fileHandleForWritingToURL_error_(AVFAudio _lib,
      NSObject? url, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_103(
        _lib._class_NSFileHandle1,
        _lib._sel_fileHandleForWritingToURL_error_1,
        url?._id ?? ffi.nullptr,
        error);
    return NSFileHandle._(_ret, _lib, retain: true, release: true);
  }

  static NSFileHandle fileHandleForUpdatingURL_error_(AVFAudio _lib,
      NSObject? url, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_103(
        _lib._class_NSFileHandle1,
        _lib._sel_fileHandleForUpdatingURL_error_1,
        url?._id ?? ffi.nullptr,
        error);
    return NSFileHandle._(_ret, _lib, retain: true, release: true);
  }

  void readInBackgroundAndNotifyForModes_(NSObject? modes) {
    return _lib._objc_msgSend_8(
        _id,
        _lib._sel_readInBackgroundAndNotifyForModes_1,
        modes?._id ?? ffi.nullptr);
  }

  void readInBackgroundAndNotify() {
    return _lib._objc_msgSend_1(_id, _lib._sel_readInBackgroundAndNotify1);
  }

  void readToEndOfFileInBackgroundAndNotifyForModes_(NSObject? modes) {
    return _lib._objc_msgSend_8(
        _id,
        _lib._sel_readToEndOfFileInBackgroundAndNotifyForModes_1,
        modes?._id ?? ffi.nullptr);
  }

  void readToEndOfFileInBackgroundAndNotify() {
    return _lib._objc_msgSend_1(
        _id, _lib._sel_readToEndOfFileInBackgroundAndNotify1);
  }

  void acceptConnectionInBackgroundAndNotifyForModes_(NSObject? modes) {
    return _lib._objc_msgSend_8(
        _id,
        _lib._sel_acceptConnectionInBackgroundAndNotifyForModes_1,
        modes?._id ?? ffi.nullptr);
  }

  void acceptConnectionInBackgroundAndNotify() {
    return _lib._objc_msgSend_1(
        _id, _lib._sel_acceptConnectionInBackgroundAndNotify1);
  }

  void waitForDataInBackgroundAndNotifyForModes_(NSObject? modes) {
    return _lib._objc_msgSend_8(
        _id,
        _lib._sel_waitForDataInBackgroundAndNotifyForModes_1,
        modes?._id ?? ffi.nullptr);
  }

  void waitForDataInBackgroundAndNotify() {
    return _lib._objc_msgSend_1(
        _id, _lib._sel_waitForDataInBackgroundAndNotify1);
  }

  ObjCBlock19 get readabilityHandler {
    final _ret = _lib._objc_msgSend_299(_id, _lib._sel_readabilityHandler1);
    return ObjCBlock19._(_ret, _lib);
  }

  set readabilityHandler(ObjCBlock19 value) {
    _lib._objc_msgSend_300(_id, _lib._sel_setReadabilityHandler_1, value._impl);
  }

  ObjCBlock19 get writeabilityHandler {
    final _ret = _lib._objc_msgSend_299(_id, _lib._sel_writeabilityHandler1);
    return ObjCBlock19._(_ret, _lib);
  }

  set writeabilityHandler(ObjCBlock19 value) {
    _lib._objc_msgSend_300(
        _id, _lib._sel_setWriteabilityHandler_1, value._impl);
  }

  NSFileHandle initWithFileDescriptor_(int fd) {
    final _ret =
        _lib._objc_msgSend_62(_id, _lib._sel_initWithFileDescriptor_1, fd);
    return NSFileHandle._(_ret, _lib, retain: true, release: true);
  }

  int get fileDescriptor {
    return _lib._objc_msgSend_75(_id, _lib._sel_fileDescriptor1);
  }

  NSObject readDataToEndOfFile() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_readDataToEndOfFile1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject readDataOfLength_(int length) {
    final _ret =
        _lib._objc_msgSend_65(_id, _lib._sel_readDataOfLength_1, length);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void writeData_(NSObject? data) {
    return _lib._objc_msgSend_8(
        _id, _lib._sel_writeData_1, data?._id ?? ffi.nullptr);
  }

  int get offsetInFile {
    return _lib._objc_msgSend_77(_id, _lib._sel_offsetInFile1);
  }

  int seekToEndOfFile() {
    return _lib._objc_msgSend_77(_id, _lib._sel_seekToEndOfFile1);
  }

  void seekToFileOffset_(int offset) {
    return _lib._objc_msgSend_301(_id, _lib._sel_seekToFileOffset_1, offset);
  }

  void truncateFileAtOffset_(int offset) {
    return _lib._objc_msgSend_301(
        _id, _lib._sel_truncateFileAtOffset_1, offset);
  }

  void synchronizeFile() {
    return _lib._objc_msgSend_1(_id, _lib._sel_synchronizeFile1);
  }

  void closeFile() {
    return _lib._objc_msgSend_1(_id, _lib._sel_closeFile1);
  }

  static NSFileHandle new1(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSFileHandle1, _lib._sel_new1);
    return NSFileHandle._(_ret, _lib, retain: false, release: true);
  }

  static NSFileHandle alloc(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSFileHandle1, _lib._sel_alloc1);
    return NSFileHandle._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSFileHandle1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSFileHandle1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSFileHandle1, _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSFileHandle1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSFileHandle1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSFileHandle1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSFileHandle1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSFileHandle1, _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSFileHandle1, _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

void _ObjCBlock19_fnPtrTrampoline(
    ffi.Pointer<_ObjCBlock> block, ffi.Pointer<ObjCObject> arg0) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject> arg0)>>()
      .asFunction<void Function(ffi.Pointer<ObjCObject> arg0)>()(arg0);
}

final _ObjCBlock19_closureRegistry = <int, Function>{};
int _ObjCBlock19_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock19_registerClosure(Function fn) {
  final id = ++_ObjCBlock19_closureRegistryIndex;
  _ObjCBlock19_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock19_closureTrampoline(
    ffi.Pointer<_ObjCBlock> block, ffi.Pointer<ObjCObject> arg0) {
  return _ObjCBlock19_closureRegistry[block.ref.target.address]!(arg0);
}

class ObjCBlock19 {
  final ffi.Pointer<_ObjCBlock> _impl;
  final AVFAudio _lib;
  ObjCBlock19._(this._impl, this._lib);
  ObjCBlock19.fromFunctionPointer(
      this._lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ObjCObject> arg0)>>
          ptr)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<_ObjCBlock> block,
                            ffi.Pointer<ObjCObject> arg0)>(
                    _ObjCBlock19_fnPtrTrampoline)
                .cast(),
            ptr.cast());
  ObjCBlock19.fromFunction(
      this._lib, void Function(ffi.Pointer<ObjCObject> arg0) fn)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<_ObjCBlock> block,
                            ffi.Pointer<ObjCObject> arg0)>(
                    _ObjCBlock19_closureTrampoline)
                .cast(),
            _ObjCBlock19_registerClosure(fn));
  void call(ffi.Pointer<ObjCObject> arg0) {
    return _impl.ref.invoke
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<_ObjCBlock> block,
                    ffi.Pointer<ObjCObject> arg0)>>()
        .asFunction<
            void Function(ffi.Pointer<_ObjCBlock> block,
                ffi.Pointer<ObjCObject> arg0)>()(_impl, arg0);
  }

  ffi.Pointer<_ObjCBlock> get pointer => _impl;
}

class NSURL extends NSObject {
  NSURL._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSURL] that points to the same underlying object as [other].
  static NSURL castFrom<T extends _ObjCWrapper>(T other) {
    return NSURL._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSURL] that wraps the given raw object pointer.
  static NSURL castFromPointer(AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSURL._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSURL].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSURL1);
  }

  NSURL initWithScheme_host_path_(
      NSObject? scheme, NSObject? host, NSObject? path) {
    final _ret = _lib._objc_msgSend_35(
        _id,
        _lib._sel_initWithScheme_host_path_1,
        scheme?._id ?? ffi.nullptr,
        host?._id ?? ffi.nullptr,
        path?._id ?? ffi.nullptr);
    return NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL initFileURLWithPath_isDirectory_relativeToURL_(
      NSObject? path, bool isDir, NSObject? baseURL) {
    final _ret = _lib._objc_msgSend_302(
        _id,
        _lib._sel_initFileURLWithPath_isDirectory_relativeToURL_1,
        path?._id ?? ffi.nullptr,
        isDir,
        baseURL?._id ?? ffi.nullptr);
    return NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL initFileURLWithPath_relativeToURL_(NSObject? path, NSObject? baseURL) {
    final _ret = _lib._objc_msgSend_39(
        _id,
        _lib._sel_initFileURLWithPath_relativeToURL_1,
        path?._id ?? ffi.nullptr,
        baseURL?._id ?? ffi.nullptr);
    return NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL initFileURLWithPath_isDirectory_(NSObject? path, bool isDir) {
    final _ret = _lib._objc_msgSend_102(
        _id,
        _lib._sel_initFileURLWithPath_isDirectory_1,
        path?._id ?? ffi.nullptr,
        isDir);
    return NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL initFileURLWithPath_(NSObject? path) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_initFileURLWithPath_1, path?._id ?? ffi.nullptr);
    return NSURL._(_ret, _lib, retain: true, release: true);
  }

  static NSObject fileURLWithPath_isDirectory_relativeToURL_(
      AVFAudio _lib, NSObject? path, bool isDir, NSObject? baseURL) {
    final _ret = _lib._objc_msgSend_302(
        _lib._class_NSURL1,
        _lib._sel_fileURLWithPath_isDirectory_relativeToURL_1,
        path?._id ?? ffi.nullptr,
        isDir,
        baseURL?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject fileURLWithPath_relativeToURL_(
      AVFAudio _lib, NSObject? path, NSObject? baseURL) {
    final _ret = _lib._objc_msgSend_39(
        _lib._class_NSURL1,
        _lib._sel_fileURLWithPath_relativeToURL_1,
        path?._id ?? ffi.nullptr,
        baseURL?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject fileURLWithPath_isDirectory_(
      AVFAudio _lib, NSObject? path, bool isDir) {
    final _ret = _lib._objc_msgSend_102(
        _lib._class_NSURL1,
        _lib._sel_fileURLWithPath_isDirectory_1,
        path?._id ?? ffi.nullptr,
        isDir);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject fileURLWithPath_(AVFAudio _lib, NSObject? path) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSURL1,
        _lib._sel_fileURLWithPath_1, path?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSURL initFileURLWithFileSystemRepresentation_isDirectory_relativeToURL_(
      ffi.Pointer<ffi.Char> path, bool isDir, NSObject? baseURL) {
    final _ret = _lib._objc_msgSend_303(
        _id,
        _lib._sel_initFileURLWithFileSystemRepresentation_isDirectory_relativeToURL_1,
        path,
        isDir,
        baseURL?._id ?? ffi.nullptr);
    return NSURL._(_ret, _lib, retain: true, release: true);
  }

  static NSObject
      fileURLWithFileSystemRepresentation_isDirectory_relativeToURL_(
          AVFAudio _lib,
          ffi.Pointer<ffi.Char> path,
          bool isDir,
          NSObject? baseURL) {
    final _ret = _lib._objc_msgSend_303(
        _lib._class_NSURL1,
        _lib._sel_fileURLWithFileSystemRepresentation_isDirectory_relativeToURL_1,
        path,
        isDir,
        baseURL?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSURL initWithString_(NSObject? URLString) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_initWithString_1, URLString?._id ?? ffi.nullptr);
    return NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL initWithString_relativeToURL_(NSObject? URLString, NSObject? baseURL) {
    final _ret = _lib._objc_msgSend_39(
        _id,
        _lib._sel_initWithString_relativeToURL_1,
        URLString?._id ?? ffi.nullptr,
        baseURL?._id ?? ffi.nullptr);
    return NSURL._(_ret, _lib, retain: true, release: true);
  }

  static NSURL URLWithString_(AVFAudio _lib, NSObject? URLString) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSURL1,
        _lib._sel_URLWithString_1, URLString?._id ?? ffi.nullptr);
    return NSURL._(_ret, _lib, retain: true, release: true);
  }

  static NSURL URLWithString_relativeToURL_(
      AVFAudio _lib, NSObject? URLString, NSObject? baseURL) {
    final _ret = _lib._objc_msgSend_39(
        _lib._class_NSURL1,
        _lib._sel_URLWithString_relativeToURL_1,
        URLString?._id ?? ffi.nullptr,
        baseURL?._id ?? ffi.nullptr);
    return NSURL._(_ret, _lib, retain: true, release: true);
  }

  NSURL initWithDataRepresentation_relativeToURL_(
      NSObject? data, NSObject? baseURL) {
    final _ret = _lib._objc_msgSend_39(
        _id,
        _lib._sel_initWithDataRepresentation_relativeToURL_1,
        data?._id ?? ffi.nullptr,
        baseURL?._id ?? ffi.nullptr);
    return NSURL._(_ret, _lib, retain: true, release: true);
  }

  static NSObject URLWithDataRepresentation_relativeToURL_(
      AVFAudio _lib, NSObject? data, NSObject? baseURL) {
    final _ret = _lib._objc_msgSend_39(
        _lib._class_NSURL1,
        _lib._sel_URLWithDataRepresentation_relativeToURL_1,
        data?._id ?? ffi.nullptr,
        baseURL?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSURL initAbsoluteURLWithDataRepresentation_relativeToURL_(
      NSObject? data, NSObject? baseURL) {
    final _ret = _lib._objc_msgSend_39(
        _id,
        _lib._sel_initAbsoluteURLWithDataRepresentation_relativeToURL_1,
        data?._id ?? ffi.nullptr,
        baseURL?._id ?? ffi.nullptr);
    return NSURL._(_ret, _lib, retain: true, release: true);
  }

  static NSObject absoluteURLWithDataRepresentation_relativeToURL_(
      AVFAudio _lib, NSObject? data, NSObject? baseURL) {
    final _ret = _lib._objc_msgSend_39(
        _lib._class_NSURL1,
        _lib._sel_absoluteURLWithDataRepresentation_relativeToURL_1,
        data?._id ?? ffi.nullptr,
        baseURL?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get dataRepresentation {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_dataRepresentation1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get absoluteString {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_absoluteString1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get relativeString {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_relativeString1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get baseURL {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_baseURL1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get absoluteURL {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_absoluteURL1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get scheme {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_scheme1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get resourceSpecifier {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_resourceSpecifier1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get host {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_host1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get port {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_port1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get user {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_user1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get password {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_password1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get path {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_path1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get fragment {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_fragment1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get parameterString {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_parameterString1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get query {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_query1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get relativePath {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_relativePath1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool get hasDirectoryPath {
    return _lib._objc_msgSend_9(_id, _lib._sel_hasDirectoryPath1);
  }

  bool getFileSystemRepresentation_maxLength_(
      ffi.Pointer<ffi.Char> buffer, int maxBufferLength) {
    return _lib._objc_msgSend_179(
        _id,
        _lib._sel_getFileSystemRepresentation_maxLength_1,
        buffer,
        maxBufferLength);
  }

  ffi.Pointer<ffi.Char> get fileSystemRepresentation {
    return _lib._objc_msgSend_44(_id, _lib._sel_fileSystemRepresentation1);
  }

  bool get fileURL {
    return _lib._objc_msgSend_9(_id, _lib._sel_isFileURL1);
  }

  NSObject? get standardizedURL {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_standardizedURL1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool checkResourceIsReachableAndReturnError_(
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_195(
        _id, _lib._sel_checkResourceIsReachableAndReturnError_1, error);
  }

  bool isFileReferenceURL() {
    return _lib._objc_msgSend_9(_id, _lib._sel_isFileReferenceURL1);
  }

  NSObject fileReferenceURL() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_fileReferenceURL1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get filePathURL {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_filePathURL1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool getResourceValue_forKey_error_(
      ffi.Pointer<ffi.Pointer<ObjCObject>> value,
      NSURLResourceKey key,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_21(
        _id, _lib._sel_getResourceValue_forKey_error_1, value, key, error);
  }

  NSObject resourceValuesForKeys_error_(
      NSObject? keys, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_103(
        _id,
        _lib._sel_resourceValuesForKeys_error_1,
        keys?._id ?? ffi.nullptr,
        error);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool setResourceValue_forKey_error_(NSObject value, NSURLResourceKey key,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_304(
        _id, _lib._sel_setResourceValue_forKey_error_1, value._id, key, error);
  }

  bool setResourceValues_error_(
      NSObject? keyedValues, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_89(_id, _lib._sel_setResourceValues_error_1,
        keyedValues?._id ?? ffi.nullptr, error);
  }

  void removeCachedResourceValueForKey_(NSURLResourceKey key) {
    return _lib._objc_msgSend_8(
        _id, _lib._sel_removeCachedResourceValueForKey_1, key);
  }

  void removeAllCachedResourceValues() {
    return _lib._objc_msgSend_1(_id, _lib._sel_removeAllCachedResourceValues1);
  }

  void setTemporaryResourceValue_forKey_(NSObject value, NSURLResourceKey key) {
    return _lib._objc_msgSend_19(
        _id, _lib._sel_setTemporaryResourceValue_forKey_1, value._id, key);
  }

  NSObject
      bookmarkDataWithOptions_includingResourceValuesForKeys_relativeToURL_error_(
          int options,
          NSObject? keys,
          NSObject? relativeURL,
          ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_305(
        _id,
        _lib._sel_bookmarkDataWithOptions_includingResourceValuesForKeys_relativeToURL_error_1,
        options,
        keys?._id ?? ffi.nullptr,
        relativeURL?._id ?? ffi.nullptr,
        error);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSURL
      initByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error_(
          NSObject? bookmarkData,
          int options,
          NSObject? relativeURL,
          ffi.Pointer<ffi.Bool> isStale,
          ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_306(
        _id,
        _lib._sel_initByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error_1,
        bookmarkData?._id ?? ffi.nullptr,
        options,
        relativeURL?._id ?? ffi.nullptr,
        isStale,
        error);
    return NSURL._(_ret, _lib, retain: true, release: true);
  }

  static NSURL
      URLByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error_(
          AVFAudio _lib,
          NSObject? bookmarkData,
          int options,
          NSObject? relativeURL,
          ffi.Pointer<ffi.Bool> isStale,
          ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_306(
        _lib._class_NSURL1,
        _lib._sel_URLByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error_1,
        bookmarkData?._id ?? ffi.nullptr,
        options,
        relativeURL?._id ?? ffi.nullptr,
        isStale,
        error);
    return NSURL._(_ret, _lib, retain: true, release: true);
  }

  static NSObject resourceValuesForKeys_fromBookmarkData_(
      AVFAudio _lib, NSObject? keys, NSObject? bookmarkData) {
    final _ret = _lib._objc_msgSend_39(
        _lib._class_NSURL1,
        _lib._sel_resourceValuesForKeys_fromBookmarkData_1,
        keys?._id ?? ffi.nullptr,
        bookmarkData?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool writeBookmarkData_toURL_options_error_(
      AVFAudio _lib,
      NSObject? bookmarkData,
      NSObject? bookmarkFileURL,
      int options,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_307(
        _lib._class_NSURL1,
        _lib._sel_writeBookmarkData_toURL_options_error_1,
        bookmarkData?._id ?? ffi.nullptr,
        bookmarkFileURL?._id ?? ffi.nullptr,
        options,
        error);
  }

  static NSObject bookmarkDataWithContentsOfURL_error_(AVFAudio _lib,
      NSObject? bookmarkFileURL, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_103(
        _lib._class_NSURL1,
        _lib._sel_bookmarkDataWithContentsOfURL_error_1,
        bookmarkFileURL?._id ?? ffi.nullptr,
        error);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSURL URLByResolvingAliasFileAtURL_options_error_(AVFAudio _lib,
      NSObject? url, int options, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_308(
        _lib._class_NSURL1,
        _lib._sel_URLByResolvingAliasFileAtURL_options_error_1,
        url?._id ?? ffi.nullptr,
        options,
        error);
    return NSURL._(_ret, _lib, retain: true, release: true);
  }

  bool startAccessingSecurityScopedResource() {
    return _lib._objc_msgSend_9(
        _id, _lib._sel_startAccessingSecurityScopedResource1);
  }

  void stopAccessingSecurityScopedResource() {
    return _lib._objc_msgSend_1(
        _id, _lib._sel_stopAccessingSecurityScopedResource1);
  }

  bool getPromisedItemResourceValue_forKey_error_(
      ffi.Pointer<ffi.Pointer<ObjCObject>> value,
      NSURLResourceKey key,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_21(
        _id,
        _lib._sel_getPromisedItemResourceValue_forKey_error_1,
        value,
        key,
        error);
  }

  NSObject promisedItemResourceValuesForKeys_error_(
      NSObject? keys, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_103(
        _id,
        _lib._sel_promisedItemResourceValuesForKeys_error_1,
        keys?._id ?? ffi.nullptr,
        error);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool checkPromisedItemIsReachableAndReturnError_(
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_195(
        _id, _lib._sel_checkPromisedItemIsReachableAndReturnError_1, error);
  }

  static NSObject fileURLWithPathComponents_(
      AVFAudio _lib, NSObject? components) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSURL1,
        _lib._sel_fileURLWithPathComponents_1, components?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get pathComponents {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_pathComponents1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get lastPathComponent {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_lastPathComponent1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get pathExtension {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_pathExtension1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject URLByAppendingPathComponent_(NSObject? pathComponent) {
    final _ret = _lib._objc_msgSend_13(
        _id,
        _lib._sel_URLByAppendingPathComponent_1,
        pathComponent?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject URLByAppendingPathComponent_isDirectory_(
      NSObject? pathComponent, bool isDirectory) {
    final _ret = _lib._objc_msgSend_102(
        _id,
        _lib._sel_URLByAppendingPathComponent_isDirectory_1,
        pathComponent?._id ?? ffi.nullptr,
        isDirectory);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get URLByDeletingLastPathComponent {
    final _ret =
        _lib._objc_msgSend_2(_id, _lib._sel_URLByDeletingLastPathComponent1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject URLByAppendingPathExtension_(NSObject? pathExtension) {
    final _ret = _lib._objc_msgSend_13(
        _id,
        _lib._sel_URLByAppendingPathExtension_1,
        pathExtension?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get URLByDeletingPathExtension {
    final _ret =
        _lib._objc_msgSend_2(_id, _lib._sel_URLByDeletingPathExtension1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get URLByStandardizingPath {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_URLByStandardizingPath1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get URLByResolvingSymlinksInPath {
    final _ret =
        _lib._objc_msgSend_2(_id, _lib._sel_URLByResolvingSymlinksInPath1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject resourceDataUsingCache_(bool shouldUseCache) {
    final _ret = _lib._objc_msgSend_70(
        _id, _lib._sel_resourceDataUsingCache_1, shouldUseCache);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void loadResourceDataNotifyingClient_usingCache_(
      NSObject client, bool shouldUseCache) {
    return _lib._objc_msgSend_309(
        _id,
        _lib._sel_loadResourceDataNotifyingClient_usingCache_1,
        client._id,
        shouldUseCache);
  }

  NSObject propertyForKey_(NSObject? propertyKey) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_propertyForKey_1, propertyKey?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool setResourceData_(NSObject? data) {
    return _lib._objc_msgSend_0(
        _id, _lib._sel_setResourceData_1, data?._id ?? ffi.nullptr);
  }

  bool setProperty_forKey_(NSObject property, NSObject? propertyKey) {
    return _lib._objc_msgSend_20(_id, _lib._sel_setProperty_forKey_1,
        property._id, propertyKey?._id ?? ffi.nullptr);
  }

  NSObject URLHandleUsingCache_(bool shouldUseCache) {
    final _ret = _lib._objc_msgSend_70(
        _id, _lib._sel_URLHandleUsingCache_1, shouldUseCache);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSURL new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSURL1, _lib._sel_new1);
    return NSURL._(_ret, _lib, retain: false, release: true);
  }

  static NSURL alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSURL1, _lib._sel_alloc1);
    return NSURL._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSURL1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSURL1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSURL1, _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSURL1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSURL1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSURL1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSURL1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSURL1, _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSURL1, _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

typedef NSURLResourceKey = ffi.Pointer<ObjCObject>;

abstract class NSURLBookmarkCreationOptions {
  static const int NSURLBookmarkCreationPreferFileIDResolution = 256;
  static const int NSURLBookmarkCreationMinimalBookmark = 512;
  static const int NSURLBookmarkCreationSuitableForBookmarkFile = 1024;
  static const int NSURLBookmarkCreationWithSecurityScope = 2048;
  static const int NSURLBookmarkCreationSecurityScopeAllowOnlyReadAccess = 4096;
  static const int NSURLBookmarkCreationWithoutImplicitSecurityScope =
      536870912;
}

abstract class NSURLBookmarkResolutionOptions {
  static const int NSURLBookmarkResolutionWithoutUI = 256;
  static const int NSURLBookmarkResolutionWithoutMounting = 512;
  static const int NSURLBookmarkResolutionWithSecurityScope = 1024;
  static const int NSURLBookmarkResolutionWithoutImplicitStartAccessing = 32768;
}

typedef NSURLBookmarkFileCreationOptions = NSUInteger;

class NSCharacterSet extends NSObject {
  NSCharacterSet._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSCharacterSet] that points to the same underlying object as [other].
  static NSCharacterSet castFrom<T extends _ObjCWrapper>(T other) {
    return NSCharacterSet._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSCharacterSet] that wraps the given raw object pointer.
  static NSCharacterSet castFromPointer(
      AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSCharacterSet._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSCharacterSet].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSCharacterSet1);
  }

  static NSObject? getControlCharacterSet(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSCharacterSet1, _lib._sel_controlCharacterSet1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? getWhitespaceCharacterSet(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSCharacterSet1, _lib._sel_whitespaceCharacterSet1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? getWhitespaceAndNewlineCharacterSet(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSCharacterSet1,
        _lib._sel_whitespaceAndNewlineCharacterSet1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? getDecimalDigitCharacterSet(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSCharacterSet1, _lib._sel_decimalDigitCharacterSet1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? getLetterCharacterSet(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSCharacterSet1, _lib._sel_letterCharacterSet1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? getLowercaseLetterCharacterSet(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSCharacterSet1, _lib._sel_lowercaseLetterCharacterSet1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? getUppercaseLetterCharacterSet(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSCharacterSet1, _lib._sel_uppercaseLetterCharacterSet1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? getNonBaseCharacterSet(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSCharacterSet1, _lib._sel_nonBaseCharacterSet1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? getAlphanumericCharacterSet(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSCharacterSet1, _lib._sel_alphanumericCharacterSet1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? getDecomposableCharacterSet(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSCharacterSet1, _lib._sel_decomposableCharacterSet1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? getIllegalCharacterSet(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSCharacterSet1, _lib._sel_illegalCharacterSet1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? getPunctuationCharacterSet(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSCharacterSet1, _lib._sel_punctuationCharacterSet1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? getCapitalizedLetterCharacterSet(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSCharacterSet1, _lib._sel_capitalizedLetterCharacterSet1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? getSymbolCharacterSet(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSCharacterSet1, _lib._sel_symbolCharacterSet1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? getNewlineCharacterSet(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSCharacterSet1, _lib._sel_newlineCharacterSet1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: false, release: true);
  }

  static NSObject characterSetWithRange_(AVFAudio _lib, NSRange aRange) {
    final _ret = _lib._objc_msgSend_48(
        _lib._class_NSCharacterSet1, _lib._sel_characterSetWithRange_1, aRange);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject characterSetWithCharactersInString_(
      AVFAudio _lib, NSObject? aString) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSCharacterSet1,
        _lib._sel_characterSetWithCharactersInString_1,
        aString?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject characterSetWithBitmapRepresentation_(
      AVFAudio _lib, NSObject? data) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSCharacterSet1,
        _lib._sel_characterSetWithBitmapRepresentation_1,
        data?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject characterSetWithContentsOfFile_(
      AVFAudio _lib, NSObject? fName) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSCharacterSet1,
        _lib._sel_characterSetWithContentsOfFile_1, fName?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSCharacterSet initWithCoder_(NSObject? coder) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_initWithCoder_1, coder?._id ?? ffi.nullptr);
    return NSCharacterSet._(_ret, _lib, retain: true, release: true);
  }

  bool characterIsMember_(int aCharacter) {
    return _lib._objc_msgSend_310(
        _id, _lib._sel_characterIsMember_1, aCharacter);
  }

  NSObject? get bitmapRepresentation {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_bitmapRepresentation1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get invertedSet {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_invertedSet1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool longCharacterIsMember_(int theLongChar) {
    return _lib._objc_msgSend_311(
        _id, _lib._sel_longCharacterIsMember_1, theLongChar);
  }

  bool isSupersetOfSet_(NSObject? theOtherSet) {
    return _lib._objc_msgSend_0(
        _id, _lib._sel_isSupersetOfSet_1, theOtherSet?._id ?? ffi.nullptr);
  }

  bool hasMemberInPlane_(int thePlane) {
    return _lib._objc_msgSend_312(_id, _lib._sel_hasMemberInPlane_1, thePlane);
  }

  static NSObject? getURLUserAllowedCharacterSet(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSCharacterSet1, _lib._sel_URLUserAllowedCharacterSet1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? getURLPasswordAllowedCharacterSet(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSCharacterSet1, _lib._sel_URLPasswordAllowedCharacterSet1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? getURLHostAllowedCharacterSet(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSCharacterSet1, _lib._sel_URLHostAllowedCharacterSet1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? getURLPathAllowedCharacterSet(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSCharacterSet1, _lib._sel_URLPathAllowedCharacterSet1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? getURLQueryAllowedCharacterSet(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSCharacterSet1, _lib._sel_URLQueryAllowedCharacterSet1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? getURLFragmentAllowedCharacterSet(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSCharacterSet1, _lib._sel_URLFragmentAllowedCharacterSet1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSCharacterSet new1(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSCharacterSet1, _lib._sel_new1);
    return NSCharacterSet._(_ret, _lib, retain: false, release: true);
  }

  static NSCharacterSet alloc(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSCharacterSet1, _lib._sel_alloc1);
    return NSCharacterSet._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSCharacterSet1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSCharacterSet1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(_lib._class_NSCharacterSet1,
        _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSCharacterSet1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSCharacterSet1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSCharacterSet1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSCharacterSet1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSCharacterSet1, _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSCharacterSet1, _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

typedef UTF32Char = UInt32;

class NSFileManager extends NSObject {
  NSFileManager._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSFileManager] that points to the same underlying object as [other].
  static NSFileManager castFrom<T extends _ObjCWrapper>(T other) {
    return NSFileManager._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSFileManager] that wraps the given raw object pointer.
  static NSFileManager castFromPointer(
      AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSFileManager._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSFileManager].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSFileManager1);
  }

  static NSObject? getDefaultManager(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSFileManager1, _lib._sel_defaultManager1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject mountedVolumeURLsIncludingResourceValuesForKeys_options_(
      NSObject? propertyKeys, int options) {
    final _ret = _lib._objc_msgSend_313(
        _id,
        _lib._sel_mountedVolumeURLsIncludingResourceValuesForKeys_options_1,
        propertyKeys?._id ?? ffi.nullptr,
        options);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void unmountVolumeAtURL_options_completionHandler_(
      NSObject? url, int mask, ObjCBlock19 completionHandler) {
    return _lib._objc_msgSend_314(
        _id,
        _lib._sel_unmountVolumeAtURL_options_completionHandler_1,
        url?._id ?? ffi.nullptr,
        mask,
        completionHandler._impl);
  }

  NSObject contentsOfDirectoryAtURL_includingPropertiesForKeys_options_error_(
      NSObject? url,
      NSObject? keys,
      int mask,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_315(
        _id,
        _lib._sel_contentsOfDirectoryAtURL_includingPropertiesForKeys_options_error_1,
        url?._id ?? ffi.nullptr,
        keys?._id ?? ffi.nullptr,
        mask,
        error);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject URLsForDirectory_inDomains_(int directory, int domainMask) {
    final _ret = _lib._objc_msgSend_316(
        _id, _lib._sel_URLsForDirectory_inDomains_1, directory, domainMask);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject URLForDirectory_inDomain_appropriateForURL_create_error_(
      int directory,
      int domain,
      NSObject? url,
      bool shouldCreate,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_317(
        _id,
        _lib._sel_URLForDirectory_inDomain_appropriateForURL_create_error_1,
        directory,
        domain,
        url?._id ?? ffi.nullptr,
        shouldCreate,
        error);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool getRelationship_ofDirectoryAtURL_toItemAtURL_error_(
      ffi.Pointer<ffi.Int32> outRelationship,
      NSObject? directoryURL,
      NSObject? otherURL,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_318(
        _id,
        _lib._sel_getRelationship_ofDirectoryAtURL_toItemAtURL_error_1,
        outRelationship,
        directoryURL?._id ?? ffi.nullptr,
        otherURL?._id ?? ffi.nullptr,
        error);
  }

  bool getRelationship_ofDirectory_inDomain_toItemAtURL_error_(
      ffi.Pointer<ffi.Int32> outRelationship,
      int directory,
      int domainMask,
      NSObject? url,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_319(
        _id,
        _lib._sel_getRelationship_ofDirectory_inDomain_toItemAtURL_error_1,
        outRelationship,
        directory,
        domainMask,
        url?._id ?? ffi.nullptr,
        error);
  }

  bool createDirectoryAtURL_withIntermediateDirectories_attributes_error_(
      NSObject? url,
      bool createIntermediates,
      NSObject? attributes,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_320(
        _id,
        _lib._sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_1,
        url?._id ?? ffi.nullptr,
        createIntermediates,
        attributes?._id ?? ffi.nullptr,
        error);
  }

  bool createSymbolicLinkAtURL_withDestinationURL_error_(NSObject? url,
      NSObject? destURL, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_304(
        _id,
        _lib._sel_createSymbolicLinkAtURL_withDestinationURL_error_1,
        url?._id ?? ffi.nullptr,
        destURL?._id ?? ffi.nullptr,
        error);
  }

  NSObject? get delegate {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_delegate1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set delegate(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setDelegate_1, value?._id ?? ffi.nullptr);
  }

  bool setAttributes_ofItemAtPath_error_(NSObject? attributes, NSObject? path,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_304(
        _id,
        _lib._sel_setAttributes_ofItemAtPath_error_1,
        attributes?._id ?? ffi.nullptr,
        path?._id ?? ffi.nullptr,
        error);
  }

  bool createDirectoryAtPath_withIntermediateDirectories_attributes_error_(
      NSObject? path,
      bool createIntermediates,
      NSObject? attributes,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_320(
        _id,
        _lib._sel_createDirectoryAtPath_withIntermediateDirectories_attributes_error_1,
        path?._id ?? ffi.nullptr,
        createIntermediates,
        attributes?._id ?? ffi.nullptr,
        error);
  }

  NSObject contentsOfDirectoryAtPath_error_(
      NSObject? path, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_103(
        _id,
        _lib._sel_contentsOfDirectoryAtPath_error_1,
        path?._id ?? ffi.nullptr,
        error);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject subpathsOfDirectoryAtPath_error_(
      NSObject? path, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_103(
        _id,
        _lib._sel_subpathsOfDirectoryAtPath_error_1,
        path?._id ?? ffi.nullptr,
        error);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject attributesOfItemAtPath_error_(
      NSObject? path, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_103(
        _id,
        _lib._sel_attributesOfItemAtPath_error_1,
        path?._id ?? ffi.nullptr,
        error);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject attributesOfFileSystemForPath_error_(
      NSObject? path, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_103(
        _id,
        _lib._sel_attributesOfFileSystemForPath_error_1,
        path?._id ?? ffi.nullptr,
        error);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool createSymbolicLinkAtPath_withDestinationPath_error_(NSObject? path,
      NSObject? destPath, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_304(
        _id,
        _lib._sel_createSymbolicLinkAtPath_withDestinationPath_error_1,
        path?._id ?? ffi.nullptr,
        destPath?._id ?? ffi.nullptr,
        error);
  }

  NSObject destinationOfSymbolicLinkAtPath_error_(
      NSObject? path, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_103(
        _id,
        _lib._sel_destinationOfSymbolicLinkAtPath_error_1,
        path?._id ?? ffi.nullptr,
        error);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool copyItemAtPath_toPath_error_(NSObject? srcPath, NSObject? dstPath,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_304(_id, _lib._sel_copyItemAtPath_toPath_error_1,
        srcPath?._id ?? ffi.nullptr, dstPath?._id ?? ffi.nullptr, error);
  }

  bool moveItemAtPath_toPath_error_(NSObject? srcPath, NSObject? dstPath,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_304(_id, _lib._sel_moveItemAtPath_toPath_error_1,
        srcPath?._id ?? ffi.nullptr, dstPath?._id ?? ffi.nullptr, error);
  }

  bool linkItemAtPath_toPath_error_(NSObject? srcPath, NSObject? dstPath,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_304(_id, _lib._sel_linkItemAtPath_toPath_error_1,
        srcPath?._id ?? ffi.nullptr, dstPath?._id ?? ffi.nullptr, error);
  }

  bool removeItemAtPath_error_(
      NSObject? path, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_89(_id, _lib._sel_removeItemAtPath_error_1,
        path?._id ?? ffi.nullptr, error);
  }

  bool copyItemAtURL_toURL_error_(NSObject? srcURL, NSObject? dstURL,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_304(_id, _lib._sel_copyItemAtURL_toURL_error_1,
        srcURL?._id ?? ffi.nullptr, dstURL?._id ?? ffi.nullptr, error);
  }

  bool moveItemAtURL_toURL_error_(NSObject? srcURL, NSObject? dstURL,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_304(_id, _lib._sel_moveItemAtURL_toURL_error_1,
        srcURL?._id ?? ffi.nullptr, dstURL?._id ?? ffi.nullptr, error);
  }

  bool linkItemAtURL_toURL_error_(NSObject? srcURL, NSObject? dstURL,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_304(_id, _lib._sel_linkItemAtURL_toURL_error_1,
        srcURL?._id ?? ffi.nullptr, dstURL?._id ?? ffi.nullptr, error);
  }

  bool removeItemAtURL_error_(
      NSObject? URL, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_89(
        _id, _lib._sel_removeItemAtURL_error_1, URL?._id ?? ffi.nullptr, error);
  }

  bool trashItemAtURL_resultingItemURL_error_(
      NSObject? url,
      ffi.Pointer<ffi.Pointer<ObjCObject>> outResultingURL,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_256(
        _id,
        _lib._sel_trashItemAtURL_resultingItemURL_error_1,
        url?._id ?? ffi.nullptr,
        outResultingURL,
        error);
  }

  NSObject fileAttributesAtPath_traverseLink_(NSObject? path, bool yorn) {
    final _ret = _lib._objc_msgSend_102(
        _id,
        _lib._sel_fileAttributesAtPath_traverseLink_1,
        path?._id ?? ffi.nullptr,
        yorn);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool changeFileAttributes_atPath_(NSObject? attributes, NSObject? path) {
    return _lib._objc_msgSend_20(_id, _lib._sel_changeFileAttributes_atPath_1,
        attributes?._id ?? ffi.nullptr, path?._id ?? ffi.nullptr);
  }

  NSObject directoryContentsAtPath_(NSObject? path) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_directoryContentsAtPath_1, path?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject fileSystemAttributesAtPath_(NSObject? path) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_fileSystemAttributesAtPath_1, path?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject pathContentOfSymbolicLinkAtPath_(NSObject? path) {
    final _ret = _lib._objc_msgSend_13(_id,
        _lib._sel_pathContentOfSymbolicLinkAtPath_1, path?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool createSymbolicLinkAtPath_pathContent_(
      NSObject? path, NSObject? otherpath) {
    return _lib._objc_msgSend_20(
        _id,
        _lib._sel_createSymbolicLinkAtPath_pathContent_1,
        path?._id ?? ffi.nullptr,
        otherpath?._id ?? ffi.nullptr);
  }

  bool createDirectoryAtPath_attributes_(NSObject? path, NSObject? attributes) {
    return _lib._objc_msgSend_20(
        _id,
        _lib._sel_createDirectoryAtPath_attributes_1,
        path?._id ?? ffi.nullptr,
        attributes?._id ?? ffi.nullptr);
  }

  bool linkPath_toPath_handler_(
      NSObject? src, NSObject? dest, NSObject handler) {
    return _lib._objc_msgSend_321(_id, _lib._sel_linkPath_toPath_handler_1,
        src?._id ?? ffi.nullptr, dest?._id ?? ffi.nullptr, handler._id);
  }

  bool copyPath_toPath_handler_(
      NSObject? src, NSObject? dest, NSObject handler) {
    return _lib._objc_msgSend_321(_id, _lib._sel_copyPath_toPath_handler_1,
        src?._id ?? ffi.nullptr, dest?._id ?? ffi.nullptr, handler._id);
  }

  bool movePath_toPath_handler_(
      NSObject? src, NSObject? dest, NSObject handler) {
    return _lib._objc_msgSend_321(_id, _lib._sel_movePath_toPath_handler_1,
        src?._id ?? ffi.nullptr, dest?._id ?? ffi.nullptr, handler._id);
  }

  bool removeFileAtPath_handler_(NSObject? path, NSObject handler) {
    return _lib._objc_msgSend_20(_id, _lib._sel_removeFileAtPath_handler_1,
        path?._id ?? ffi.nullptr, handler._id);
  }

  NSObject? get currentDirectoryPath {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_currentDirectoryPath1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool changeCurrentDirectoryPath_(NSObject? path) {
    return _lib._objc_msgSend_0(
        _id, _lib._sel_changeCurrentDirectoryPath_1, path?._id ?? ffi.nullptr);
  }

  bool fileExistsAtPath_(NSObject? path) {
    return _lib._objc_msgSend_0(
        _id, _lib._sel_fileExistsAtPath_1, path?._id ?? ffi.nullptr);
  }

  bool fileExistsAtPath_isDirectory_(
      NSObject? path, ffi.Pointer<ffi.Bool> isDirectory) {
    return _lib._objc_msgSend_322(_id, _lib._sel_fileExistsAtPath_isDirectory_1,
        path?._id ?? ffi.nullptr, isDirectory);
  }

  bool isReadableFileAtPath_(NSObject? path) {
    return _lib._objc_msgSend_0(
        _id, _lib._sel_isReadableFileAtPath_1, path?._id ?? ffi.nullptr);
  }

  bool isWritableFileAtPath_(NSObject? path) {
    return _lib._objc_msgSend_0(
        _id, _lib._sel_isWritableFileAtPath_1, path?._id ?? ffi.nullptr);
  }

  bool isExecutableFileAtPath_(NSObject? path) {
    return _lib._objc_msgSend_0(
        _id, _lib._sel_isExecutableFileAtPath_1, path?._id ?? ffi.nullptr);
  }

  bool isDeletableFileAtPath_(NSObject? path) {
    return _lib._objc_msgSend_0(
        _id, _lib._sel_isDeletableFileAtPath_1, path?._id ?? ffi.nullptr);
  }

  bool contentsEqualAtPath_andPath_(NSObject? path1, NSObject? path2) {
    return _lib._objc_msgSend_20(_id, _lib._sel_contentsEqualAtPath_andPath_1,
        path1?._id ?? ffi.nullptr, path2?._id ?? ffi.nullptr);
  }

  NSObject displayNameAtPath_(NSObject? path) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_displayNameAtPath_1, path?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject componentsToDisplayForPath_(NSObject? path) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_componentsToDisplayForPath_1, path?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject enumeratorAtPath_(NSObject? path) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_enumeratorAtPath_1, path?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject enumeratorAtURL_includingPropertiesForKeys_options_errorHandler_(
      NSObject? url, NSObject? keys, int mask, ObjCBlock3 handler) {
    final _ret = _lib._objc_msgSend_323(
        _id,
        _lib._sel_enumeratorAtURL_includingPropertiesForKeys_options_errorHandler_1,
        url?._id ?? ffi.nullptr,
        keys?._id ?? ffi.nullptr,
        mask,
        handler._impl);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject subpathsAtPath_(NSObject? path) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_subpathsAtPath_1, path?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject contentsAtPath_(NSObject? path) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_contentsAtPath_1, path?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool createFileAtPath_contents_attributes_(
      NSObject? path, NSObject? data, NSObject? attr) {
    return _lib._objc_msgSend_321(
        _id,
        _lib._sel_createFileAtPath_contents_attributes_1,
        path?._id ?? ffi.nullptr,
        data?._id ?? ffi.nullptr,
        attr?._id ?? ffi.nullptr);
  }

  ffi.Pointer<ffi.Char> fileSystemRepresentationWithPath_(NSObject? path) {
    return _lib._objc_msgSend_324(_id,
        _lib._sel_fileSystemRepresentationWithPath_1, path?._id ?? ffi.nullptr);
  }

  NSObject stringWithFileSystemRepresentation_length_(
      ffi.Pointer<ffi.Char> str, int len) {
    final _ret = _lib._objc_msgSend_169(
        _id, _lib._sel_stringWithFileSystemRepresentation_length_1, str, len);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool
      replaceItemAtURL_withItemAtURL_backupItemName_options_resultingItemURL_error_(
          NSObject? originalItemURL,
          NSObject? newItemURL,
          NSObject? backupItemName,
          int options,
          ffi.Pointer<ffi.Pointer<ObjCObject>> resultingURL,
          ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_325(
        _id,
        _lib._sel_replaceItemAtURL_withItemAtURL_backupItemName_options_resultingItemURL_error_1,
        originalItemURL?._id ?? ffi.nullptr,
        newItemURL?._id ?? ffi.nullptr,
        backupItemName?._id ?? ffi.nullptr,
        options,
        resultingURL,
        error);
  }

  bool setUbiquitous_itemAtURL_destinationURL_error_(bool flag, NSObject? url,
      NSObject? destinationURL, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_326(
        _id,
        _lib._sel_setUbiquitous_itemAtURL_destinationURL_error_1,
        flag,
        url?._id ?? ffi.nullptr,
        destinationURL?._id ?? ffi.nullptr,
        error);
  }

  bool isUbiquitousItemAtURL_(NSObject? url) {
    return _lib._objc_msgSend_0(
        _id, _lib._sel_isUbiquitousItemAtURL_1, url?._id ?? ffi.nullptr);
  }

  bool startDownloadingUbiquitousItemAtURL_error_(
      NSObject? url, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_89(
        _id,
        _lib._sel_startDownloadingUbiquitousItemAtURL_error_1,
        url?._id ?? ffi.nullptr,
        error);
  }

  bool evictUbiquitousItemAtURL_error_(
      NSObject? url, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_89(
        _id,
        _lib._sel_evictUbiquitousItemAtURL_error_1,
        url?._id ?? ffi.nullptr,
        error);
  }

  NSObject URLForUbiquityContainerIdentifier_(NSObject? containerIdentifier) {
    final _ret = _lib._objc_msgSend_13(
        _id,
        _lib._sel_URLForUbiquityContainerIdentifier_1,
        containerIdentifier?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject URLForPublishingUbiquitousItemAtURL_expirationDate_error_(
      NSObject? url,
      ffi.Pointer<ffi.Pointer<ObjCObject>> outDate,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_327(
        _id,
        _lib._sel_URLForPublishingUbiquitousItemAtURL_expirationDate_error_1,
        url?._id ?? ffi.nullptr,
        outDate,
        error);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get ubiquityIdentityToken {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_ubiquityIdentityToken1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  void getFileProviderServicesForItemAtURL_completionHandler_(
      NSObject? url, ObjCBlock5 completionHandler) {
    return _lib._objc_msgSend_132(
        _id,
        _lib._sel_getFileProviderServicesForItemAtURL_completionHandler_1,
        url?._id ?? ffi.nullptr,
        completionHandler._impl);
  }

  NSObject containerURLForSecurityApplicationGroupIdentifier_(
      NSObject? groupIdentifier) {
    final _ret = _lib._objc_msgSend_13(
        _id,
        _lib._sel_containerURLForSecurityApplicationGroupIdentifier_1,
        groupIdentifier?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get homeDirectoryForCurrentUser {
    final _ret =
        _lib._objc_msgSend_2(_id, _lib._sel_homeDirectoryForCurrentUser1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get temporaryDirectory {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_temporaryDirectory1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject homeDirectoryForUser_(NSObject? userName) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_homeDirectoryForUser_1, userName?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSFileManager new1(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSFileManager1, _lib._sel_new1);
    return NSFileManager._(_ret, _lib, retain: false, release: true);
  }

  static NSFileManager alloc(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSFileManager1, _lib._sel_alloc1);
    return NSFileManager._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSFileManager1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSFileManager1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSFileManager1, _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSFileManager1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSFileManager1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSFileManager1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSFileManager1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSFileManager1, _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSFileManager1, _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

abstract class NSVolumeEnumerationOptions {
  static const int NSVolumeEnumerationSkipHiddenVolumes = 2;
  static const int NSVolumeEnumerationProduceFileReferenceURLs = 4;
}

abstract class NSFileManagerUnmountOptions {
  static const int NSFileManagerUnmountAllPartitionsAndEjectDisk = 1;
  static const int NSFileManagerUnmountWithoutUI = 2;
}

abstract class NSDirectoryEnumerationOptions {
  static const int NSDirectoryEnumerationSkipsSubdirectoryDescendants = 1;
  static const int NSDirectoryEnumerationSkipsPackageDescendants = 2;
  static const int NSDirectoryEnumerationSkipsHiddenFiles = 4;
  static const int NSDirectoryEnumerationIncludesDirectoriesPostOrder = 8;
  static const int NSDirectoryEnumerationProducesRelativePathURLs = 16;
}

abstract class NSSearchPathDirectory {
  static const int NSApplicationDirectory = 1;
  static const int NSDemoApplicationDirectory = 2;
  static const int NSDeveloperApplicationDirectory = 3;
  static const int NSAdminApplicationDirectory = 4;
  static const int NSLibraryDirectory = 5;
  static const int NSDeveloperDirectory = 6;
  static const int NSUserDirectory = 7;
  static const int NSDocumentationDirectory = 8;
  static const int NSDocumentDirectory = 9;
  static const int NSCoreServiceDirectory = 10;
  static const int NSAutosavedInformationDirectory = 11;
  static const int NSDesktopDirectory = 12;
  static const int NSCachesDirectory = 13;
  static const int NSApplicationSupportDirectory = 14;
  static const int NSDownloadsDirectory = 15;
  static const int NSInputMethodsDirectory = 16;
  static const int NSMoviesDirectory = 17;
  static const int NSMusicDirectory = 18;
  static const int NSPicturesDirectory = 19;
  static const int NSPrinterDescriptionDirectory = 20;
  static const int NSSharedPublicDirectory = 21;
  static const int NSPreferencePanesDirectory = 22;
  static const int NSApplicationScriptsDirectory = 23;
  static const int NSItemReplacementDirectory = 99;
  static const int NSAllApplicationsDirectory = 100;
  static const int NSAllLibrariesDirectory = 101;
  static const int NSTrashDirectory = 102;
}

abstract class NSSearchPathDomainMask {
  static const int NSUserDomainMask = 1;
  static const int NSLocalDomainMask = 2;
  static const int NSNetworkDomainMask = 4;
  static const int NSSystemDomainMask = 8;
  static const int NSAllDomainsMask = 65535;
}

abstract class NSURLRelationship {
  static const int NSURLRelationshipContains = 0;
  static const int NSURLRelationshipSame = 1;
  static const int NSURLRelationshipOther = 2;
}

abstract class NSFileManagerItemReplacementOptions {
  static const int NSFileManagerItemReplacementUsingNewMetadataOnly = 1;
  static const int NSFileManagerItemReplacementWithoutDeletingBackupItem = 2;
}

class NSHTTPCookieStorage extends NSObject {
  NSHTTPCookieStorage._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSHTTPCookieStorage] that points to the same underlying object as [other].
  static NSHTTPCookieStorage castFrom<T extends _ObjCWrapper>(T other) {
    return NSHTTPCookieStorage._(other._id, other._lib,
        retain: true, release: true);
  }

  /// Returns a [NSHTTPCookieStorage] that wraps the given raw object pointer.
  static NSHTTPCookieStorage castFromPointer(
      AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSHTTPCookieStorage._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSHTTPCookieStorage].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSHTTPCookieStorage1);
  }

  static NSObject? getSharedHTTPCookieStorage(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSHTTPCookieStorage1, _lib._sel_sharedHTTPCookieStorage1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject sharedCookieStorageForGroupContainerIdentifier_(
      AVFAudio _lib, NSObject? identifier) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSHTTPCookieStorage1,
        _lib._sel_sharedCookieStorageForGroupContainerIdentifier_1,
        identifier?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get cookies {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_cookies1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  void setCookie_(NSObject? cookie) {
    return _lib._objc_msgSend_8(
        _id, _lib._sel_setCookie_1, cookie?._id ?? ffi.nullptr);
  }

  void deleteCookie_(NSObject? cookie) {
    return _lib._objc_msgSend_8(
        _id, _lib._sel_deleteCookie_1, cookie?._id ?? ffi.nullptr);
  }

  void removeCookiesSinceDate_(NSObject? date) {
    return _lib._objc_msgSend_8(
        _id, _lib._sel_removeCookiesSinceDate_1, date?._id ?? ffi.nullptr);
  }

  NSObject cookiesForURL_(NSObject? URL) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_cookiesForURL_1, URL?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void setCookies_forURL_mainDocumentURL_(
      NSObject? cookies, NSObject? URL, NSObject? mainDocumentURL) {
    return _lib._objc_msgSend_109(
        _id,
        _lib._sel_setCookies_forURL_mainDocumentURL_1,
        cookies?._id ?? ffi.nullptr,
        URL?._id ?? ffi.nullptr,
        mainDocumentURL?._id ?? ffi.nullptr);
  }

  int get cookieAcceptPolicy {
    return _lib._objc_msgSend_328(_id, _lib._sel_cookieAcceptPolicy1);
  }

  set cookieAcceptPolicy(int value) {
    _lib._objc_msgSend_329(_id, _lib._sel_setCookieAcceptPolicy_1, value);
  }

  NSObject sortedCookiesUsingDescriptors_(NSObject? sortOrder) {
    final _ret = _lib._objc_msgSend_13(
        _id,
        _lib._sel_sortedCookiesUsingDescriptors_1,
        sortOrder?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void storeCookies_forTask_(NSObject? cookies, NSObject? task) {
    return _lib._objc_msgSend_19(_id, _lib._sel_storeCookies_forTask_1,
        cookies?._id ?? ffi.nullptr, task?._id ?? ffi.nullptr);
  }

  void getCookiesForTask_completionHandler_(
      NSObject? task, ObjCBlock19 completionHandler) {
    return _lib._objc_msgSend_330(
        _id,
        _lib._sel_getCookiesForTask_completionHandler_1,
        task?._id ?? ffi.nullptr,
        completionHandler._impl);
  }

  static NSHTTPCookieStorage new1(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSHTTPCookieStorage1, _lib._sel_new1);
    return NSHTTPCookieStorage._(_ret, _lib, retain: false, release: true);
  }

  static NSHTTPCookieStorage alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSHTTPCookieStorage1, _lib._sel_alloc1);
    return NSHTTPCookieStorage._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSHTTPCookieStorage1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSHTTPCookieStorage1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(_lib._class_NSHTTPCookieStorage1,
        _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSHTTPCookieStorage1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSHTTPCookieStorage1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSHTTPCookieStorage1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSHTTPCookieStorage1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSHTTPCookieStorage1,
        _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSHTTPCookieStorage1, _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

abstract class NSHTTPCookieAcceptPolicy {
  static const int NSHTTPCookieAcceptPolicyAlways = 0;
  static const int NSHTTPCookieAcceptPolicyNever = 1;
  static const int NSHTTPCookieAcceptPolicyOnlyFromMainDocumentDomain = 2;
}

class NSIndexPath extends NSObject {
  NSIndexPath._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSIndexPath] that points to the same underlying object as [other].
  static NSIndexPath castFrom<T extends _ObjCWrapper>(T other) {
    return NSIndexPath._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSIndexPath] that wraps the given raw object pointer.
  static NSIndexPath castFromPointer(
      AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSIndexPath._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSIndexPath].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSIndexPath1);
  }

  static NSIndexPath indexPathWithIndex_(AVFAudio _lib, int index) {
    final _ret = _lib._objc_msgSend_65(
        _lib._class_NSIndexPath1, _lib._sel_indexPathWithIndex_1, index);
    return NSIndexPath._(_ret, _lib, retain: true, release: true);
  }

  static NSIndexPath indexPathWithIndexes_length_(
      AVFAudio _lib, ffi.Pointer<NSUInteger> indexes, int length) {
    final _ret = _lib._objc_msgSend_331(_lib._class_NSIndexPath1,
        _lib._sel_indexPathWithIndexes_length_1, indexes, length);
    return NSIndexPath._(_ret, _lib, retain: true, release: true);
  }

  NSIndexPath initWithIndexes_length_(
      ffi.Pointer<NSUInteger> indexes, int length) {
    final _ret = _lib._objc_msgSend_331(
        _id, _lib._sel_initWithIndexes_length_1, indexes, length);
    return NSIndexPath._(_ret, _lib, retain: true, release: true);
  }

  NSIndexPath initWithIndex_(int index) {
    final _ret = _lib._objc_msgSend_65(_id, _lib._sel_initWithIndex_1, index);
    return NSIndexPath._(_ret, _lib, retain: true, release: true);
  }

  NSObject indexPathByAddingIndex_(int index) {
    final _ret =
        _lib._objc_msgSend_65(_id, _lib._sel_indexPathByAddingIndex_1, index);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject indexPathByRemovingLastIndex() {
    final _ret =
        _lib._objc_msgSend_2(_id, _lib._sel_indexPathByRemovingLastIndex1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  int indexAtPosition_(int position) {
    return _lib._objc_msgSend_153(_id, _lib._sel_indexAtPosition_1, position);
  }

  int get length {
    return _lib._objc_msgSend_10(_id, _lib._sel_length1);
  }

  void getIndexes_range_(
      ffi.Pointer<NSUInteger> indexes, NSRange positionRange) {
    return _lib._objc_msgSend_332(
        _id, _lib._sel_getIndexes_range_1, indexes, positionRange);
  }

  int compare_(NSObject? otherObject) {
    return _lib._objc_msgSend_80(
        _id, _lib._sel_compare_1, otherObject?._id ?? ffi.nullptr);
  }

  void getIndexes_(ffi.Pointer<NSUInteger> indexes) {
    return _lib._objc_msgSend_333(_id, _lib._sel_getIndexes_1, indexes);
  }

  static NSIndexPath new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSIndexPath1, _lib._sel_new1);
    return NSIndexPath._(_ret, _lib, retain: false, release: true);
  }

  static NSIndexPath alloc(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSIndexPath1, _lib._sel_alloc1);
    return NSIndexPath._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSIndexPath1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSIndexPath1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSIndexPath1, _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSIndexPath1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSIndexPath1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSIndexPath1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSIndexPath1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSIndexPath1, _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSIndexPath1, _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSInflectionRule extends NSObject {
  NSInflectionRule._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSInflectionRule] that points to the same underlying object as [other].
  static NSInflectionRule castFrom<T extends _ObjCWrapper>(T other) {
    return NSInflectionRule._(other._id, other._lib,
        retain: true, release: true);
  }

  /// Returns a [NSInflectionRule] that wraps the given raw object pointer.
  static NSInflectionRule castFromPointer(
      AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSInflectionRule._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSInflectionRule].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSInflectionRule1);
  }

  @override
  NSObject init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? getAutomaticRule(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSInflectionRule1, _lib._sel_automaticRule1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool canInflectLanguage_(AVFAudio _lib, NSObject? language) {
    return _lib._objc_msgSend_0(_lib._class_NSInflectionRule1,
        _lib._sel_canInflectLanguage_1, language?._id ?? ffi.nullptr);
  }

  static bool getCanInflectPreferredLocalization(AVFAudio _lib) {
    return _lib._objc_msgSend_9(_lib._class_NSInflectionRule1,
        _lib._sel_canInflectPreferredLocalization1);
  }

  static NSInflectionRule new1(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSInflectionRule1, _lib._sel_new1);
    return NSInflectionRule._(_ret, _lib, retain: false, release: true);
  }

  static NSInflectionRule alloc(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSInflectionRule1, _lib._sel_alloc1);
    return NSInflectionRule._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSInflectionRule1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSInflectionRule1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(_lib._class_NSInflectionRule1,
        _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSInflectionRule1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSInflectionRule1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSInflectionRule1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSInflectionRule1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSInflectionRule1,
        _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSInflectionRule1, _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSOrderedSet extends NSObject {
  NSOrderedSet._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSOrderedSet] that points to the same underlying object as [other].
  static NSOrderedSet castFrom<T extends _ObjCWrapper>(T other) {
    return NSOrderedSet._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSOrderedSet] that wraps the given raw object pointer.
  static NSOrderedSet castFromPointer(
      AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSOrderedSet._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSOrderedSet].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSOrderedSet1);
  }

  int get count {
    return _lib._objc_msgSend_10(_id, _lib._sel_count1);
  }

  NSObject objectAtIndex_(int idx) {
    final _ret = _lib._objc_msgSend_65(_id, _lib._sel_objectAtIndex_1, idx);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  int indexOfObject_(NSObject object) {
    return _lib._objc_msgSend_85(_id, _lib._sel_indexOfObject_1, object._id);
  }

  @override
  NSOrderedSet init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSOrderedSet._(_ret, _lib, retain: true, release: true);
  }

  NSOrderedSet initWithObjects_count_(
      ffi.Pointer<ffi.Pointer<ObjCObject>> objects, int cnt) {
    final _ret = _lib._objc_msgSend_82(
        _id, _lib._sel_initWithObjects_count_1, objects, cnt);
    return NSOrderedSet._(_ret, _lib, retain: true, release: true);
  }

  NSOrderedSet initWithCoder_(NSObject? coder) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_initWithCoder_1, coder?._id ?? ffi.nullptr);
    return NSOrderedSet._(_ret, _lib, retain: true, release: true);
  }

  void getObjects_range_(
      ffi.Pointer<ffi.Pointer<ObjCObject>> objects, NSRange range) {
    return _lib._objc_msgSend_84(
        _id, _lib._sel_getObjects_range_1, objects, range);
  }

  NSObject objectsAtIndexes_(NSObject? indexes) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_objectsAtIndexes_1, indexes?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject get firstObject {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_firstObject1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject get lastObject {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_lastObject1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool isEqualToOrderedSet_(NSObject? other) {
    return _lib._objc_msgSend_0(
        _id, _lib._sel_isEqualToOrderedSet_1, other?._id ?? ffi.nullptr);
  }

  bool containsObject_(NSObject object) {
    return _lib._objc_msgSend_0(_id, _lib._sel_containsObject_1, object._id);
  }

  bool intersectsOrderedSet_(NSObject? other) {
    return _lib._objc_msgSend_0(
        _id, _lib._sel_intersectsOrderedSet_1, other?._id ?? ffi.nullptr);
  }

  bool intersectsSet_(NSObject? set) {
    return _lib._objc_msgSend_0(
        _id, _lib._sel_intersectsSet_1, set?._id ?? ffi.nullptr);
  }

  bool isSubsetOfOrderedSet_(NSObject? other) {
    return _lib._objc_msgSend_0(
        _id, _lib._sel_isSubsetOfOrderedSet_1, other?._id ?? ffi.nullptr);
  }

  bool isSubsetOfSet_(NSObject? set) {
    return _lib._objc_msgSend_0(
        _id, _lib._sel_isSubsetOfSet_1, set?._id ?? ffi.nullptr);
  }

  NSObject objectAtIndexedSubscript_(int idx) {
    final _ret =
        _lib._objc_msgSend_65(_id, _lib._sel_objectAtIndexedSubscript_1, idx);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject objectEnumerator() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_objectEnumerator1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject reverseObjectEnumerator() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_reverseObjectEnumerator1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get reversedOrderedSet {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_reversedOrderedSet1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get array {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_array1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get set1 {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_set1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  void enumerateObjectsUsingBlock_(ObjCBlock block) {
    return _lib._objc_msgSend_90(
        _id, _lib._sel_enumerateObjectsUsingBlock_1, block._impl);
  }

  void enumerateObjectsWithOptions_usingBlock_(int opts, ObjCBlock block) {
    return _lib._objc_msgSend_91(_id,
        _lib._sel_enumerateObjectsWithOptions_usingBlock_1, opts, block._impl);
  }

  void enumerateObjectsAtIndexes_options_usingBlock_(
      NSObject? s, int opts, ObjCBlock block) {
    return _lib._objc_msgSend_92(
        _id,
        _lib._sel_enumerateObjectsAtIndexes_options_usingBlock_1,
        s?._id ?? ffi.nullptr,
        opts,
        block._impl);
  }

  int indexOfObjectPassingTest_(ObjCBlock1 predicate) {
    return _lib._objc_msgSend_93(
        _id, _lib._sel_indexOfObjectPassingTest_1, predicate._impl);
  }

  int indexOfObjectWithOptions_passingTest_(int opts, ObjCBlock1 predicate) {
    return _lib._objc_msgSend_94(
        _id,
        _lib._sel_indexOfObjectWithOptions_passingTest_1,
        opts,
        predicate._impl);
  }

  int indexOfObjectAtIndexes_options_passingTest_(
      NSObject? s, int opts, ObjCBlock1 predicate) {
    return _lib._objc_msgSend_95(
        _id,
        _lib._sel_indexOfObjectAtIndexes_options_passingTest_1,
        s?._id ?? ffi.nullptr,
        opts,
        predicate._impl);
  }

  NSObject indexesOfObjectsPassingTest_(ObjCBlock1 predicate) {
    final _ret = _lib._objc_msgSend_96(
        _id, _lib._sel_indexesOfObjectsPassingTest_1, predicate._impl);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject indexesOfObjectsWithOptions_passingTest_(
      int opts, ObjCBlock1 predicate) {
    final _ret = _lib._objc_msgSend_97(
        _id,
        _lib._sel_indexesOfObjectsWithOptions_passingTest_1,
        opts,
        predicate._impl);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject indexesOfObjectsAtIndexes_options_passingTest_(
      NSObject? s, int opts, ObjCBlock1 predicate) {
    final _ret = _lib._objc_msgSend_98(
        _id,
        _lib._sel_indexesOfObjectsAtIndexes_options_passingTest_1,
        s?._id ?? ffi.nullptr,
        opts,
        predicate._impl);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  int indexOfObject_inSortedRange_options_usingComparator_(
      NSObject object, NSRange range, int opts, NSComparator cmp) {
    return _lib._objc_msgSend_101(
        _id,
        _lib._sel_indexOfObject_inSortedRange_options_usingComparator_1,
        object._id,
        range,
        opts,
        cmp);
  }

  NSObject sortedArrayUsingComparator_(NSComparator cmptr) {
    final _ret = _lib._objc_msgSend_99(
        _id, _lib._sel_sortedArrayUsingComparator_1, cmptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject sortedArrayWithOptions_usingComparator_(
      int opts, NSComparator cmptr) {
    final _ret = _lib._objc_msgSend_100(
        _id, _lib._sel_sortedArrayWithOptions_usingComparator_1, opts, cmptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get description {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_description1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject descriptionWithLocale_(NSObject locale) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_descriptionWithLocale_1, locale._id);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject descriptionWithLocale_indent_(NSObject locale, int level) {
    final _ret = _lib._objc_msgSend_83(
        _id, _lib._sel_descriptionWithLocale_indent_1, locale._id, level);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSOrderedSet orderedSet(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSOrderedSet1, _lib._sel_orderedSet1);
    return NSOrderedSet._(_ret, _lib, retain: true, release: true);
  }

  static NSOrderedSet orderedSetWithObject_(AVFAudio _lib, NSObject object) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSOrderedSet1,
        _lib._sel_orderedSetWithObject_1, object._id);
    return NSOrderedSet._(_ret, _lib, retain: true, release: true);
  }

  static NSOrderedSet orderedSetWithObjects_count_(
      AVFAudio _lib, ffi.Pointer<ffi.Pointer<ObjCObject>> objects, int cnt) {
    final _ret = _lib._objc_msgSend_82(_lib._class_NSOrderedSet1,
        _lib._sel_orderedSetWithObjects_count_1, objects, cnt);
    return NSOrderedSet._(_ret, _lib, retain: true, release: true);
  }

  static NSOrderedSet orderedSetWithObjects_(AVFAudio _lib, NSObject firstObj) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSOrderedSet1,
        _lib._sel_orderedSetWithObjects_1, firstObj._id);
    return NSOrderedSet._(_ret, _lib, retain: true, release: true);
  }

  static NSOrderedSet orderedSetWithOrderedSet_(AVFAudio _lib, NSObject? set) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSOrderedSet1,
        _lib._sel_orderedSetWithOrderedSet_1, set?._id ?? ffi.nullptr);
    return NSOrderedSet._(_ret, _lib, retain: true, release: true);
  }

  static NSOrderedSet orderedSetWithOrderedSet_range_copyItems_(
      AVFAudio _lib, NSObject? set, NSRange range, bool flag) {
    final _ret = _lib._objc_msgSend_334(
        _lib._class_NSOrderedSet1,
        _lib._sel_orderedSetWithOrderedSet_range_copyItems_1,
        set?._id ?? ffi.nullptr,
        range,
        flag);
    return NSOrderedSet._(_ret, _lib, retain: false, release: true);
  }

  static NSOrderedSet orderedSetWithArray_(AVFAudio _lib, NSObject? array) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSOrderedSet1,
        _lib._sel_orderedSetWithArray_1, array?._id ?? ffi.nullptr);
    return NSOrderedSet._(_ret, _lib, retain: true, release: true);
  }

  static NSOrderedSet orderedSetWithArray_range_copyItems_(
      AVFAudio _lib, NSObject? array, NSRange range, bool flag) {
    final _ret = _lib._objc_msgSend_334(
        _lib._class_NSOrderedSet1,
        _lib._sel_orderedSetWithArray_range_copyItems_1,
        array?._id ?? ffi.nullptr,
        range,
        flag);
    return NSOrderedSet._(_ret, _lib, retain: false, release: true);
  }

  static NSOrderedSet orderedSetWithSet_(AVFAudio _lib, NSObject? set) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSOrderedSet1,
        _lib._sel_orderedSetWithSet_1, set?._id ?? ffi.nullptr);
    return NSOrderedSet._(_ret, _lib, retain: true, release: true);
  }

  static NSOrderedSet orderedSetWithSet_copyItems_(
      AVFAudio _lib, NSObject? set, bool flag) {
    final _ret = _lib._objc_msgSend_102(_lib._class_NSOrderedSet1,
        _lib._sel_orderedSetWithSet_copyItems_1, set?._id ?? ffi.nullptr, flag);
    return NSOrderedSet._(_ret, _lib, retain: false, release: true);
  }

  NSOrderedSet initWithObject_(NSObject object) {
    final _ret =
        _lib._objc_msgSend_13(_id, _lib._sel_initWithObject_1, object._id);
    return NSOrderedSet._(_ret, _lib, retain: true, release: true);
  }

  NSOrderedSet initWithObjects_(NSObject firstObj) {
    final _ret =
        _lib._objc_msgSend_13(_id, _lib._sel_initWithObjects_1, firstObj._id);
    return NSOrderedSet._(_ret, _lib, retain: true, release: true);
  }

  NSOrderedSet initWithOrderedSet_(NSObject? set) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_initWithOrderedSet_1, set?._id ?? ffi.nullptr);
    return NSOrderedSet._(_ret, _lib, retain: true, release: true);
  }

  NSOrderedSet initWithOrderedSet_copyItems_(NSObject? set, bool flag) {
    final _ret = _lib._objc_msgSend_102(
        _id,
        _lib._sel_initWithOrderedSet_copyItems_1,
        set?._id ?? ffi.nullptr,
        flag);
    return NSOrderedSet._(_ret, _lib, retain: false, release: true);
  }

  NSOrderedSet initWithOrderedSet_range_copyItems_(
      NSObject? set, NSRange range, bool flag) {
    final _ret = _lib._objc_msgSend_334(
        _id,
        _lib._sel_initWithOrderedSet_range_copyItems_1,
        set?._id ?? ffi.nullptr,
        range,
        flag);
    return NSOrderedSet._(_ret, _lib, retain: false, release: true);
  }

  NSOrderedSet initWithArray_(NSObject? array) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_initWithArray_1, array?._id ?? ffi.nullptr);
    return NSOrderedSet._(_ret, _lib, retain: true, release: true);
  }

  NSOrderedSet initWithArray_copyItems_(NSObject? set, bool flag) {
    final _ret = _lib._objc_msgSend_102(_id,
        _lib._sel_initWithArray_copyItems_1, set?._id ?? ffi.nullptr, flag);
    return NSOrderedSet._(_ret, _lib, retain: false, release: true);
  }

  NSOrderedSet initWithArray_range_copyItems_(
      NSObject? set, NSRange range, bool flag) {
    final _ret = _lib._objc_msgSend_334(
        _id,
        _lib._sel_initWithArray_range_copyItems_1,
        set?._id ?? ffi.nullptr,
        range,
        flag);
    return NSOrderedSet._(_ret, _lib, retain: false, release: true);
  }

  NSOrderedSet initWithSet_(NSObject? set) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_initWithSet_1, set?._id ?? ffi.nullptr);
    return NSOrderedSet._(_ret, _lib, retain: true, release: true);
  }

  NSOrderedSet initWithSet_copyItems_(NSObject? set, bool flag) {
    final _ret = _lib._objc_msgSend_102(
        _id, _lib._sel_initWithSet_copyItems_1, set?._id ?? ffi.nullptr, flag);
    return NSOrderedSet._(_ret, _lib, retain: false, release: true);
  }

  NSObject differenceFromOrderedSet_withOptions_usingEquivalenceTest_(
      NSObject? other, int options, ObjCBlock3 block) {
    final _ret = _lib._objc_msgSend_104(
        _id,
        _lib._sel_differenceFromOrderedSet_withOptions_usingEquivalenceTest_1,
        other?._id ?? ffi.nullptr,
        options,
        block._impl);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject differenceFromOrderedSet_withOptions_(NSObject? other, int options) {
    final _ret = _lib._objc_msgSend_105(
        _id,
        _lib._sel_differenceFromOrderedSet_withOptions_1,
        other?._id ?? ffi.nullptr,
        options);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject differenceFromOrderedSet_(NSObject? other) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_differenceFromOrderedSet_1, other?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject orderedSetByApplyingDifference_(NSObject? difference) {
    final _ret = _lib._objc_msgSend_13(
        _id,
        _lib._sel_orderedSetByApplyingDifference_1,
        difference?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSObject valueForKey_(NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_valueForKey_1, key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  @override
  void setValue_forKey_(NSObject value, NSObject? key) {
    return _lib._objc_msgSend_19(
        _id, _lib._sel_setValue_forKey_1, value._id, key?._id ?? ffi.nullptr);
  }

  @override
  void addObserver_forKeyPath_options_context_(NSObject? observer,
      NSObject? keyPath, int options, ffi.Pointer<ffi.Void> context) {
    return _lib._objc_msgSend_23(
        _id,
        _lib._sel_addObserver_forKeyPath_options_context_1,
        observer?._id ?? ffi.nullptr,
        keyPath?._id ?? ffi.nullptr,
        options,
        context);
  }

  @override
  void removeObserver_forKeyPath_context_(
      NSObject? observer, NSObject? keyPath, ffi.Pointer<ffi.Void> context) {
    return _lib._objc_msgSend_24(
        _id,
        _lib._sel_removeObserver_forKeyPath_context_1,
        observer?._id ?? ffi.nullptr,
        keyPath?._id ?? ffi.nullptr,
        context);
  }

  @override
  void removeObserver_forKeyPath_(NSObject? observer, NSObject? keyPath) {
    return _lib._objc_msgSend_19(_id, _lib._sel_removeObserver_forKeyPath_1,
        observer?._id ?? ffi.nullptr, keyPath?._id ?? ffi.nullptr);
  }

  NSObject sortedArrayUsingDescriptors_(NSObject? sortDescriptors) {
    final _ret = _lib._objc_msgSend_13(
        _id,
        _lib._sel_sortedArrayUsingDescriptors_1,
        sortDescriptors?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject filteredOrderedSetUsingPredicate_(NSObject? p) {
    final _ret = _lib._objc_msgSend_13(_id,
        _lib._sel_filteredOrderedSetUsingPredicate_1, p?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSOrderedSet new1(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSOrderedSet1, _lib._sel_new1);
    return NSOrderedSet._(_ret, _lib, retain: false, release: true);
  }

  static NSOrderedSet alloc(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSOrderedSet1, _lib._sel_alloc1);
    return NSOrderedSet._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSOrderedSet1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSOrderedSet1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSOrderedSet1, _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSOrderedSet1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSOrderedSet1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSOrderedSet1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSOrderedSet1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSOrderedSet1, _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSOrderedSet1, _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSMutableOrderedSet extends NSOrderedSet {
  NSMutableOrderedSet._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSMutableOrderedSet] that points to the same underlying object as [other].
  static NSMutableOrderedSet castFrom<T extends _ObjCWrapper>(T other) {
    return NSMutableOrderedSet._(other._id, other._lib,
        retain: true, release: true);
  }

  /// Returns a [NSMutableOrderedSet] that wraps the given raw object pointer.
  static NSMutableOrderedSet castFromPointer(
      AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSMutableOrderedSet._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSMutableOrderedSet].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSMutableOrderedSet1);
  }

  void insertObject_atIndex_(NSObject object, int idx) {
    return _lib._objc_msgSend_110(
        _id, _lib._sel_insertObject_atIndex_1, object._id, idx);
  }

  void removeObjectAtIndex_(int idx) {
    return _lib._objc_msgSend_111(_id, _lib._sel_removeObjectAtIndex_1, idx);
  }

  void replaceObjectAtIndex_withObject_(int idx, NSObject object) {
    return _lib._objc_msgSend_41(
        _id, _lib._sel_replaceObjectAtIndex_withObject_1, idx, object._id);
  }

  @override
  NSMutableOrderedSet initWithCoder_(NSObject? coder) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_initWithCoder_1, coder?._id ?? ffi.nullptr);
    return NSMutableOrderedSet._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSMutableOrderedSet init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSMutableOrderedSet._(_ret, _lib, retain: true, release: true);
  }

  NSMutableOrderedSet initWithCapacity_(int numItems) {
    final _ret =
        _lib._objc_msgSend_65(_id, _lib._sel_initWithCapacity_1, numItems);
    return NSMutableOrderedSet._(_ret, _lib, retain: true, release: true);
  }

  void addObject_(NSObject object) {
    return _lib._objc_msgSend_8(_id, _lib._sel_addObject_1, object._id);
  }

  void addObjects_count_(
      ffi.Pointer<ffi.Pointer<ObjCObject>> objects, int count) {
    return _lib._objc_msgSend_335(
        _id, _lib._sel_addObjects_count_1, objects, count);
  }

  void addObjectsFromArray_(NSObject? array) {
    return _lib._objc_msgSend_8(
        _id, _lib._sel_addObjectsFromArray_1, array?._id ?? ffi.nullptr);
  }

  void exchangeObjectAtIndex_withObjectAtIndex_(int idx1, int idx2) {
    return _lib._objc_msgSend_112(
        _id, _lib._sel_exchangeObjectAtIndex_withObjectAtIndex_1, idx1, idx2);
  }

  void moveObjectsAtIndexes_toIndex_(NSObject? indexes, int idx) {
    return _lib._objc_msgSend_110(_id, _lib._sel_moveObjectsAtIndexes_toIndex_1,
        indexes?._id ?? ffi.nullptr, idx);
  }

  void insertObjects_atIndexes_(NSObject? objects, NSObject? indexes) {
    return _lib._objc_msgSend_19(_id, _lib._sel_insertObjects_atIndexes_1,
        objects?._id ?? ffi.nullptr, indexes?._id ?? ffi.nullptr);
  }

  void setObject_atIndex_(NSObject obj, int idx) {
    return _lib._objc_msgSend_110(
        _id, _lib._sel_setObject_atIndex_1, obj._id, idx);
  }

  void setObject_atIndexedSubscript_(NSObject obj, int idx) {
    return _lib._objc_msgSend_110(
        _id, _lib._sel_setObject_atIndexedSubscript_1, obj._id, idx);
  }

  void replaceObjectsInRange_withObjects_count_(
      NSRange range, ffi.Pointer<ffi.Pointer<ObjCObject>> objects, int count) {
    return _lib._objc_msgSend_336(
        _id,
        _lib._sel_replaceObjectsInRange_withObjects_count_1,
        range,
        objects,
        count);
  }

  void replaceObjectsAtIndexes_withObjects_(
      NSObject? indexes, NSObject? objects) {
    return _lib._objc_msgSend_19(
        _id,
        _lib._sel_replaceObjectsAtIndexes_withObjects_1,
        indexes?._id ?? ffi.nullptr,
        objects?._id ?? ffi.nullptr);
  }

  void removeObjectsInRange_(NSRange range) {
    return _lib._objc_msgSend_115(_id, _lib._sel_removeObjectsInRange_1, range);
  }

  void removeObjectsAtIndexes_(NSObject? indexes) {
    return _lib._objc_msgSend_8(
        _id, _lib._sel_removeObjectsAtIndexes_1, indexes?._id ?? ffi.nullptr);
  }

  void removeAllObjects() {
    return _lib._objc_msgSend_1(_id, _lib._sel_removeAllObjects1);
  }

  void removeObject_(NSObject object) {
    return _lib._objc_msgSend_8(_id, _lib._sel_removeObject_1, object._id);
  }

  void removeObjectsInArray_(NSObject? array) {
    return _lib._objc_msgSend_8(
        _id, _lib._sel_removeObjectsInArray_1, array?._id ?? ffi.nullptr);
  }

  void intersectOrderedSet_(NSObject? other) {
    return _lib._objc_msgSend_8(
        _id, _lib._sel_intersectOrderedSet_1, other?._id ?? ffi.nullptr);
  }

  void minusOrderedSet_(NSObject? other) {
    return _lib._objc_msgSend_8(
        _id, _lib._sel_minusOrderedSet_1, other?._id ?? ffi.nullptr);
  }

  void unionOrderedSet_(NSObject? other) {
    return _lib._objc_msgSend_8(
        _id, _lib._sel_unionOrderedSet_1, other?._id ?? ffi.nullptr);
  }

  void intersectSet_(NSObject? other) {
    return _lib._objc_msgSend_8(
        _id, _lib._sel_intersectSet_1, other?._id ?? ffi.nullptr);
  }

  void minusSet_(NSObject? other) {
    return _lib._objc_msgSend_8(
        _id, _lib._sel_minusSet_1, other?._id ?? ffi.nullptr);
  }

  void unionSet_(NSObject? other) {
    return _lib._objc_msgSend_8(
        _id, _lib._sel_unionSet_1, other?._id ?? ffi.nullptr);
  }

  void sortUsingComparator_(NSComparator cmptr) {
    return _lib._objc_msgSend_119(_id, _lib._sel_sortUsingComparator_1, cmptr);
  }

  void sortWithOptions_usingComparator_(int opts, NSComparator cmptr) {
    return _lib._objc_msgSend_120(
        _id, _lib._sel_sortWithOptions_usingComparator_1, opts, cmptr);
  }

  void sortRange_options_usingComparator_(
      NSRange range, int opts, NSComparator cmptr) {
    return _lib._objc_msgSend_337(
        _id, _lib._sel_sortRange_options_usingComparator_1, range, opts, cmptr);
  }

  static NSMutableOrderedSet orderedSetWithCapacity_(
      AVFAudio _lib, int numItems) {
    final _ret = _lib._objc_msgSend_65(_lib._class_NSMutableOrderedSet1,
        _lib._sel_orderedSetWithCapacity_1, numItems);
    return NSMutableOrderedSet._(_ret, _lib, retain: true, release: true);
  }

  void applyDifference_(NSObject? difference) {
    return _lib._objc_msgSend_8(
        _id, _lib._sel_applyDifference_1, difference?._id ?? ffi.nullptr);
  }

  void sortUsingDescriptors_(NSObject? sortDescriptors) {
    return _lib._objc_msgSend_8(_id, _lib._sel_sortUsingDescriptors_1,
        sortDescriptors?._id ?? ffi.nullptr);
  }

  void filterUsingPredicate_(NSObject? p) {
    return _lib._objc_msgSend_8(
        _id, _lib._sel_filterUsingPredicate_1, p?._id ?? ffi.nullptr);
  }

  static NSMutableOrderedSet orderedSet(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSMutableOrderedSet1, _lib._sel_orderedSet1);
    return NSMutableOrderedSet._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableOrderedSet orderedSetWithObject_(
      AVFAudio _lib, NSObject object) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSMutableOrderedSet1,
        _lib._sel_orderedSetWithObject_1, object._id);
    return NSMutableOrderedSet._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableOrderedSet orderedSetWithObjects_count_(
      AVFAudio _lib, ffi.Pointer<ffi.Pointer<ObjCObject>> objects, int cnt) {
    final _ret = _lib._objc_msgSend_82(_lib._class_NSMutableOrderedSet1,
        _lib._sel_orderedSetWithObjects_count_1, objects, cnt);
    return NSMutableOrderedSet._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableOrderedSet orderedSetWithObjects_(
      AVFAudio _lib, NSObject firstObj) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSMutableOrderedSet1,
        _lib._sel_orderedSetWithObjects_1, firstObj._id);
    return NSMutableOrderedSet._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableOrderedSet orderedSetWithOrderedSet_(
      AVFAudio _lib, NSObject? set) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSMutableOrderedSet1,
        _lib._sel_orderedSetWithOrderedSet_1, set?._id ?? ffi.nullptr);
    return NSMutableOrderedSet._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableOrderedSet orderedSetWithOrderedSet_range_copyItems_(
      AVFAudio _lib, NSObject? set, NSRange range, bool flag) {
    final _ret = _lib._objc_msgSend_334(
        _lib._class_NSMutableOrderedSet1,
        _lib._sel_orderedSetWithOrderedSet_range_copyItems_1,
        set?._id ?? ffi.nullptr,
        range,
        flag);
    return NSMutableOrderedSet._(_ret, _lib, retain: false, release: true);
  }

  static NSMutableOrderedSet orderedSetWithArray_(
      AVFAudio _lib, NSObject? array) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSMutableOrderedSet1,
        _lib._sel_orderedSetWithArray_1, array?._id ?? ffi.nullptr);
    return NSMutableOrderedSet._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableOrderedSet orderedSetWithArray_range_copyItems_(
      AVFAudio _lib, NSObject? array, NSRange range, bool flag) {
    final _ret = _lib._objc_msgSend_334(
        _lib._class_NSMutableOrderedSet1,
        _lib._sel_orderedSetWithArray_range_copyItems_1,
        array?._id ?? ffi.nullptr,
        range,
        flag);
    return NSMutableOrderedSet._(_ret, _lib, retain: false, release: true);
  }

  static NSMutableOrderedSet orderedSetWithSet_(AVFAudio _lib, NSObject? set) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSMutableOrderedSet1,
        _lib._sel_orderedSetWithSet_1, set?._id ?? ffi.nullptr);
    return NSMutableOrderedSet._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableOrderedSet orderedSetWithSet_copyItems_(
      AVFAudio _lib, NSObject? set, bool flag) {
    final _ret = _lib._objc_msgSend_102(_lib._class_NSMutableOrderedSet1,
        _lib._sel_orderedSetWithSet_copyItems_1, set?._id ?? ffi.nullptr, flag);
    return NSMutableOrderedSet._(_ret, _lib, retain: false, release: true);
  }

  static NSMutableOrderedSet new1(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSMutableOrderedSet1, _lib._sel_new1);
    return NSMutableOrderedSet._(_ret, _lib, retain: false, release: true);
  }

  static NSMutableOrderedSet alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSMutableOrderedSet1, _lib._sel_alloc1);
    return NSMutableOrderedSet._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSMutableOrderedSet1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSMutableOrderedSet1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(_lib._class_NSMutableOrderedSet1,
        _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSMutableOrderedSet1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSMutableOrderedSet1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSMutableOrderedSet1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSMutableOrderedSet1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSMutableOrderedSet1,
        _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSMutableOrderedSet1, _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSMorphology extends NSObject {
  NSMorphology._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSMorphology] that points to the same underlying object as [other].
  static NSMorphology castFrom<T extends _ObjCWrapper>(T other) {
    return NSMorphology._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSMorphology] that wraps the given raw object pointer.
  static NSMorphology castFromPointer(
      AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSMorphology._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSMorphology].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSMorphology1);
  }

  int get grammaticalGender {
    return _lib._objc_msgSend_338(_id, _lib._sel_grammaticalGender1);
  }

  set grammaticalGender(int value) {
    _lib._objc_msgSend_339(_id, _lib._sel_setGrammaticalGender_1, value);
  }

  int get partOfSpeech {
    return _lib._objc_msgSend_340(_id, _lib._sel_partOfSpeech1);
  }

  set partOfSpeech(int value) {
    _lib._objc_msgSend_341(_id, _lib._sel_setPartOfSpeech_1, value);
  }

  int get number {
    return _lib._objc_msgSend_342(_id, _lib._sel_number1);
  }

  set number(int value) {
    _lib._objc_msgSend_343(_id, _lib._sel_setNumber_1, value);
  }

  NSObject customPronounForLanguage_(NSObject? language) {
    final _ret = _lib._objc_msgSend_13(_id,
        _lib._sel_customPronounForLanguage_1, language?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool setCustomPronoun_forLanguage_error_(NSObject? features,
      NSObject? language, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_304(
        _id,
        _lib._sel_setCustomPronoun_forLanguage_error_1,
        features?._id ?? ffi.nullptr,
        language?._id ?? ffi.nullptr,
        error);
  }

  bool get unspecified {
    return _lib._objc_msgSend_9(_id, _lib._sel_isUnspecified1);
  }

  static NSObject? getUserMorphology(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSMorphology1, _lib._sel_userMorphology1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSMorphology new1(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSMorphology1, _lib._sel_new1);
    return NSMorphology._(_ret, _lib, retain: false, release: true);
  }

  static NSMorphology alloc(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSMorphology1, _lib._sel_alloc1);
    return NSMorphology._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSMorphology1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSMorphology1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSMorphology1, _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSMorphology1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSMorphology1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSMorphology1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSMorphology1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSMorphology1, _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSMorphology1, _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

abstract class NSGrammaticalGender {
  static const int NSGrammaticalGenderNotSet = 0;
  static const int NSGrammaticalGenderFeminine = 1;
  static const int NSGrammaticalGenderMasculine = 2;
  static const int NSGrammaticalGenderNeuter = 3;
}

abstract class NSGrammaticalPartOfSpeech {
  static const int NSGrammaticalPartOfSpeechNotSet = 0;
  static const int NSGrammaticalPartOfSpeechDeterminer = 1;
  static const int NSGrammaticalPartOfSpeechPronoun = 2;
  static const int NSGrammaticalPartOfSpeechLetter = 3;
  static const int NSGrammaticalPartOfSpeechAdverb = 4;
  static const int NSGrammaticalPartOfSpeechParticle = 5;
  static const int NSGrammaticalPartOfSpeechAdjective = 6;
  static const int NSGrammaticalPartOfSpeechAdposition = 7;
  static const int NSGrammaticalPartOfSpeechVerb = 8;
  static const int NSGrammaticalPartOfSpeechNoun = 9;
  static const int NSGrammaticalPartOfSpeechConjunction = 10;
  static const int NSGrammaticalPartOfSpeechNumeral = 11;
  static const int NSGrammaticalPartOfSpeechInterjection = 12;
  static const int NSGrammaticalPartOfSpeechPreposition = 13;
  static const int NSGrammaticalPartOfSpeechAbbreviation = 14;
}

abstract class NSGrammaticalNumber {
  static const int NSGrammaticalNumberNotSet = 0;
  static const int NSGrammaticalNumberSingular = 1;
  static const int NSGrammaticalNumberZero = 2;
  static const int NSGrammaticalNumberPlural = 3;
  static const int NSGrammaticalNumberPluralTwo = 4;
  static const int NSGrammaticalNumberPluralFew = 5;
  static const int NSGrammaticalNumberPluralMany = 6;
}

class NSOperationQueue extends NSObject {
  NSOperationQueue._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSOperationQueue] that points to the same underlying object as [other].
  static NSOperationQueue castFrom<T extends _ObjCWrapper>(T other) {
    return NSOperationQueue._(other._id, other._lib,
        retain: true, release: true);
  }

  /// Returns a [NSOperationQueue] that wraps the given raw object pointer.
  static NSOperationQueue castFromPointer(
      AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSOperationQueue._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSOperationQueue].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSOperationQueue1);
  }

  NSObject? get progress {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_progress1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  void addOperation_(NSObject? op) {
    return _lib._objc_msgSend_8(
        _id, _lib._sel_addOperation_1, op?._id ?? ffi.nullptr);
  }

  void addOperations_waitUntilFinished_(NSObject? ops, bool wait) {
    return _lib._objc_msgSend_309(
        _id,
        _lib._sel_addOperations_waitUntilFinished_1,
        ops?._id ?? ffi.nullptr,
        wait);
  }

  void addOperationWithBlock_(ObjCBlock18 block) {
    return _lib._objc_msgSend_292(
        _id, _lib._sel_addOperationWithBlock_1, block._impl);
  }

  void addBarrierBlock_(ObjCBlock18 barrier) {
    return _lib._objc_msgSend_292(
        _id, _lib._sel_addBarrierBlock_1, barrier._impl);
  }

  int get maxConcurrentOperationCount {
    return _lib._objc_msgSend_11(_id, _lib._sel_maxConcurrentOperationCount1);
  }

  set maxConcurrentOperationCount(int value) {
    _lib._objc_msgSend_344(
        _id, _lib._sel_setMaxConcurrentOperationCount_1, value);
  }

  bool get suspended {
    return _lib._objc_msgSend_9(_id, _lib._sel_isSuspended1);
  }

  set suspended(bool value) {
    _lib._objc_msgSend_267(_id, _lib._sel_setSuspended_1, value);
  }

  NSObject? get name {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_name1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set name(NSObject? value) {
    _lib._objc_msgSend_34(_id, _lib._sel_setName_1, value?._id ?? ffi.nullptr);
  }

  int get qualityOfService {
    return _lib._objc_msgSend_345(_id, _lib._sel_qualityOfService1);
  }

  set qualityOfService(int value) {
    _lib._objc_msgSend_346(_id, _lib._sel_setQualityOfService_1, value);
  }

  dispatch_queue_t get underlyingQueue {
    return _lib._objc_msgSend_2(_id, _lib._sel_underlyingQueue1);
  }

  set underlyingQueue(dispatch_queue_t value) {
    _lib._objc_msgSend_34(_id, _lib._sel_setUnderlyingQueue_1, value);
  }

  void cancelAllOperations() {
    return _lib._objc_msgSend_1(_id, _lib._sel_cancelAllOperations1);
  }

  void waitUntilAllOperationsAreFinished() {
    return _lib._objc_msgSend_1(
        _id, _lib._sel_waitUntilAllOperationsAreFinished1);
  }

  static NSObject? getCurrentQueue(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSOperationQueue1, _lib._sel_currentQueue1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? getMainQueue(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSOperationQueue1, _lib._sel_mainQueue1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get operations {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_operations1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  int get operationCount {
    return _lib._objc_msgSend_10(_id, _lib._sel_operationCount1);
  }

  static NSOperationQueue new1(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSOperationQueue1, _lib._sel_new1);
    return NSOperationQueue._(_ret, _lib, retain: false, release: true);
  }

  static NSOperationQueue alloc(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSOperationQueue1, _lib._sel_alloc1);
    return NSOperationQueue._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSOperationQueue1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSOperationQueue1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(_lib._class_NSOperationQueue1,
        _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSOperationQueue1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSOperationQueue1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSOperationQueue1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSOperationQueue1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSOperationQueue1,
        _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSOperationQueue1, _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

abstract class NSQualityOfService {
  static const int NSQualityOfServiceUserInteractive = 33;
  static const int NSQualityOfServiceUserInitiated = 25;
  static const int NSQualityOfServiceUtility = 17;
  static const int NSQualityOfServiceBackground = 9;
  static const int NSQualityOfServiceDefault = -1;
}

typedef dispatch_queue_t = ffi.Pointer<ObjCObject>;

class NSOrthography extends NSObject {
  NSOrthography._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSOrthography] that points to the same underlying object as [other].
  static NSOrthography castFrom<T extends _ObjCWrapper>(T other) {
    return NSOrthography._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSOrthography] that wraps the given raw object pointer.
  static NSOrthography castFromPointer(
      AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSOrthography._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSOrthography].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSOrthography1);
  }

  NSObject? get dominantScript {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_dominantScript1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get languageMap {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_languageMap1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSOrthography initWithDominantScript_languageMap_(
      NSObject? script, NSObject? map) {
    final _ret = _lib._objc_msgSend_39(
        _id,
        _lib._sel_initWithDominantScript_languageMap_1,
        script?._id ?? ffi.nullptr,
        map?._id ?? ffi.nullptr);
    return NSOrthography._(_ret, _lib, retain: true, release: true);
  }

  NSOrthography initWithCoder_(NSObject? coder) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_initWithCoder_1, coder?._id ?? ffi.nullptr);
    return NSOrthography._(_ret, _lib, retain: true, release: true);
  }

  NSObject languagesForScript_(NSObject? script) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_languagesForScript_1, script?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject dominantLanguageForScript_(NSObject? script) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_dominantLanguageForScript_1, script?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get dominantLanguage {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_dominantLanguage1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get allScripts {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_allScripts1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get allLanguages {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_allLanguages1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSOrthography defaultOrthographyForLanguage_(
      AVFAudio _lib, NSObject? language) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSOrthography1,
        _lib._sel_defaultOrthographyForLanguage_1,
        language?._id ?? ffi.nullptr);
    return NSOrthography._(_ret, _lib, retain: true, release: true);
  }

  static NSOrthography orthographyWithDominantScript_languageMap_(
      AVFAudio _lib, NSObject? script, NSObject? map) {
    final _ret = _lib._objc_msgSend_39(
        _lib._class_NSOrthography1,
        _lib._sel_orthographyWithDominantScript_languageMap_1,
        script?._id ?? ffi.nullptr,
        map?._id ?? ffi.nullptr);
    return NSOrthography._(_ret, _lib, retain: true, release: true);
  }

  static NSOrthography new1(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSOrthography1, _lib._sel_new1);
    return NSOrthography._(_ret, _lib, retain: false, release: true);
  }

  static NSOrthography alloc(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSOrthography1, _lib._sel_alloc1);
    return NSOrthography._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSOrthography1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSOrthography1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSOrthography1, _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSOrthography1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSOrthography1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSOrthography1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSOrthography1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSOrthography1, _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSOrthography1, _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSPointerArray extends NSObject {
  NSPointerArray._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSPointerArray] that points to the same underlying object as [other].
  static NSPointerArray castFrom<T extends _ObjCWrapper>(T other) {
    return NSPointerArray._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSPointerArray] that wraps the given raw object pointer.
  static NSPointerArray castFromPointer(
      AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSPointerArray._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSPointerArray].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSPointerArray1);
  }

  NSPointerArray initWithOptions_(int options) {
    final _ret =
        _lib._objc_msgSend_347(_id, _lib._sel_initWithOptions_1, options);
    return NSPointerArray._(_ret, _lib, retain: true, release: true);
  }

  NSPointerArray initWithPointerFunctions_(NSObject? functions) {
    final _ret = _lib._objc_msgSend_13(_id,
        _lib._sel_initWithPointerFunctions_1, functions?._id ?? ffi.nullptr);
    return NSPointerArray._(_ret, _lib, retain: true, release: true);
  }

  static NSObject pointerArrayWithOptions_(AVFAudio _lib, int options) {
    final _ret = _lib._objc_msgSend_347(_lib._class_NSPointerArray1,
        _lib._sel_pointerArrayWithOptions_1, options);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject pointerArrayWithPointerFunctions_(
      AVFAudio _lib, NSObject? functions) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSPointerArray1,
        _lib._sel_pointerArrayWithPointerFunctions_1,
        functions?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get pointerFunctions {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_pointerFunctions1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  ffi.Pointer<ffi.Void> pointerAtIndex_(int index) {
    return _lib._objc_msgSend_348(_id, _lib._sel_pointerAtIndex_1, index);
  }

  void addPointer_(ffi.Pointer<ffi.Void> pointer) {
    return _lib._objc_msgSend_47(_id, _lib._sel_addPointer_1, pointer);
  }

  void removePointerAtIndex_(int index) {
    return _lib._objc_msgSend_111(_id, _lib._sel_removePointerAtIndex_1, index);
  }

  void insertPointer_atIndex_(ffi.Pointer<ffi.Void> item, int index) {
    return _lib._objc_msgSend_43(
        _id, _lib._sel_insertPointer_atIndex_1, item, index);
  }

  void replacePointerAtIndex_withPointer_(
      int index, ffi.Pointer<ffi.Void> item) {
    return _lib._objc_msgSend_349(
        _id, _lib._sel_replacePointerAtIndex_withPointer_1, index, item);
  }

  void compact() {
    return _lib._objc_msgSend_1(_id, _lib._sel_compact1);
  }

  int get count {
    return _lib._objc_msgSend_10(_id, _lib._sel_count1);
  }

  set count(int value) {
    _lib._objc_msgSend_241(_id, _lib._sel_setCount_1, value);
  }

  static NSObject pointerArrayWithStrongObjects(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSPointerArray1, _lib._sel_pointerArrayWithStrongObjects1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject pointerArrayWithWeakObjects(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSPointerArray1, _lib._sel_pointerArrayWithWeakObjects1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject strongObjectsPointerArray(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSPointerArray1, _lib._sel_strongObjectsPointerArray1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject weakObjectsPointerArray(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSPointerArray1, _lib._sel_weakObjectsPointerArray1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get allObjects {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_allObjects1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSPointerArray new1(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSPointerArray1, _lib._sel_new1);
    return NSPointerArray._(_ret, _lib, retain: false, release: true);
  }

  static NSPointerArray alloc(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSPointerArray1, _lib._sel_alloc1);
    return NSPointerArray._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSPointerArray1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSPointerArray1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(_lib._class_NSPointerArray1,
        _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSPointerArray1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSPointerArray1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSPointerArray1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSPointerArray1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSPointerArray1, _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSPointerArray1, _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

abstract class NSPointerFunctionsOptions {
  static const int NSPointerFunctionsStrongMemory = 0;
  static const int NSPointerFunctionsZeroingWeakMemory = 1;
  static const int NSPointerFunctionsOpaqueMemory = 2;
  static const int NSPointerFunctionsMallocMemory = 3;
  static const int NSPointerFunctionsMachVirtualMemory = 4;
  static const int NSPointerFunctionsWeakMemory = 5;
  static const int NSPointerFunctionsObjectPersonality = 0;
  static const int NSPointerFunctionsOpaquePersonality = 256;
  static const int NSPointerFunctionsObjectPointerPersonality = 512;
  static const int NSPointerFunctionsCStringPersonality = 768;
  static const int NSPointerFunctionsStructPersonality = 1024;
  static const int NSPointerFunctionsIntegerPersonality = 1280;
  static const int NSPointerFunctionsCopyIn = 65536;
}

class NSProcessInfo extends NSObject {
  NSProcessInfo._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSProcessInfo] that points to the same underlying object as [other].
  static NSProcessInfo castFrom<T extends _ObjCWrapper>(T other) {
    return NSProcessInfo._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSProcessInfo] that wraps the given raw object pointer.
  static NSProcessInfo castFromPointer(
      AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSProcessInfo._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSProcessInfo].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSProcessInfo1);
  }

  static NSObject? getProcessInfo(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSProcessInfo1, _lib._sel_processInfo1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get environment {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_environment1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get arguments {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_arguments1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get hostName {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_hostName1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get processName {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_processName1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set processName(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setProcessName_1, value?._id ?? ffi.nullptr);
  }

  int get processIdentifier {
    return _lib._objc_msgSend_75(_id, _lib._sel_processIdentifier1);
  }

  NSObject? get globallyUniqueString {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_globallyUniqueString1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  int operatingSystem() {
    return _lib._objc_msgSend_10(_id, _lib._sel_operatingSystem1);
  }

  NSObject operatingSystemName() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_operatingSystemName1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get operatingSystemVersionString {
    final _ret =
        _lib._objc_msgSend_2(_id, _lib._sel_operatingSystemVersionString1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSOperatingSystemVersion get operatingSystemVersion {
    return _lib._objc_msgSend_350(_id, _lib._sel_operatingSystemVersion1);
  }

  int get processorCount {
    return _lib._objc_msgSend_10(_id, _lib._sel_processorCount1);
  }

  int get activeProcessorCount {
    return _lib._objc_msgSend_10(_id, _lib._sel_activeProcessorCount1);
  }

  int get physicalMemory {
    return _lib._objc_msgSend_77(_id, _lib._sel_physicalMemory1);
  }

  bool isOperatingSystemAtLeastVersion_(NSOperatingSystemVersion version) {
    return _lib._objc_msgSend_351(
        _id, _lib._sel_isOperatingSystemAtLeastVersion_1, version);
  }

  double get systemUptime {
    return _lib._objc_msgSend_79(_id, _lib._sel_systemUptime1);
  }

  void disableSuddenTermination() {
    return _lib._objc_msgSend_1(_id, _lib._sel_disableSuddenTermination1);
  }

  void enableSuddenTermination() {
    return _lib._objc_msgSend_1(_id, _lib._sel_enableSuddenTermination1);
  }

  void disableAutomaticTermination_(NSObject? reason) {
    return _lib._objc_msgSend_8(_id, _lib._sel_disableAutomaticTermination_1,
        reason?._id ?? ffi.nullptr);
  }

  void enableAutomaticTermination_(NSObject? reason) {
    return _lib._objc_msgSend_8(_id, _lib._sel_enableAutomaticTermination_1,
        reason?._id ?? ffi.nullptr);
  }

  bool get automaticTerminationSupportEnabled {
    return _lib._objc_msgSend_9(
        _id, _lib._sel_automaticTerminationSupportEnabled1);
  }

  set automaticTerminationSupportEnabled(bool value) {
    _lib._objc_msgSend_267(
        _id, _lib._sel_setAutomaticTerminationSupportEnabled_1, value);
  }

  NSObject beginActivityWithOptions_reason_(int options, NSObject? reason) {
    final _ret = _lib._objc_msgSend_352(
        _id,
        _lib._sel_beginActivityWithOptions_reason_1,
        options,
        reason?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void endActivity_(NSObject? activity) {
    return _lib._objc_msgSend_8(
        _id, _lib._sel_endActivity_1, activity?._id ?? ffi.nullptr);
  }

  void performActivityWithOptions_reason_usingBlock_(
      int options, NSObject? reason, ObjCBlock18 block) {
    return _lib._objc_msgSend_353(
        _id,
        _lib._sel_performActivityWithOptions_reason_usingBlock_1,
        options,
        reason?._id ?? ffi.nullptr,
        block._impl);
  }

  void performExpiringActivityWithReason_usingBlock_(
      NSObject? reason, ObjCBlock20 block) {
    return _lib._objc_msgSend_354(
        _id,
        _lib._sel_performExpiringActivityWithReason_usingBlock_1,
        reason?._id ?? ffi.nullptr,
        block._impl);
  }

  NSObject? get userName {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_userName1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get fullUserName {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_fullUserName1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  int get thermalState {
    return _lib._objc_msgSend_355(_id, _lib._sel_thermalState1);
  }

  bool get lowPowerModeEnabled {
    return _lib._objc_msgSend_9(_id, _lib._sel_isLowPowerModeEnabled1);
  }

  bool get macCatalystApp {
    return _lib._objc_msgSend_9(_id, _lib._sel_isMacCatalystApp1);
  }

  bool get iOSAppOnMac {
    return _lib._objc_msgSend_9(_id, _lib._sel_isiOSAppOnMac1);
  }

  static NSProcessInfo new1(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSProcessInfo1, _lib._sel_new1);
    return NSProcessInfo._(_ret, _lib, retain: false, release: true);
  }

  static NSProcessInfo alloc(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSProcessInfo1, _lib._sel_alloc1);
    return NSProcessInfo._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSProcessInfo1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSProcessInfo1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSProcessInfo1, _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSProcessInfo1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSProcessInfo1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSProcessInfo1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSProcessInfo1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSProcessInfo1, _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSProcessInfo1, _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSOperatingSystemVersion extends ffi.Struct {
  @NSInteger()
  external int majorVersion;

  @NSInteger()
  external int minorVersion;

  @NSInteger()
  external int patchVersion;
}

abstract class NSActivityOptions {
  static const int NSActivityIdleDisplaySleepDisabled = 1099511627776;
  static const int NSActivityIdleSystemSleepDisabled = 1048576;
  static const int NSActivitySuddenTerminationDisabled = 16384;
  static const int NSActivityAutomaticTerminationDisabled = 32768;
  static const int NSActivityUserInitiated = 16777215;
  static const int NSActivityUserInitiatedAllowingIdleSystemSleep = 15728639;
  static const int NSActivityBackground = 255;
  static const int NSActivityLatencyCritical = 1095216660480;
}

void _ObjCBlock20_fnPtrTrampoline(ffi.Pointer<_ObjCBlock> block, bool arg0) {
  return block.ref.target
      .cast<ffi.NativeFunction<ffi.Void Function(ffi.Bool arg0)>>()
      .asFunction<void Function(bool arg0)>()(arg0);
}

final _ObjCBlock20_closureRegistry = <int, Function>{};
int _ObjCBlock20_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock20_registerClosure(Function fn) {
  final id = ++_ObjCBlock20_closureRegistryIndex;
  _ObjCBlock20_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock20_closureTrampoline(ffi.Pointer<_ObjCBlock> block, bool arg0) {
  return _ObjCBlock20_closureRegistry[block.ref.target.address]!(arg0);
}

class ObjCBlock20 {
  final ffi.Pointer<_ObjCBlock> _impl;
  final AVFAudio _lib;
  ObjCBlock20._(this._impl, this._lib);
  ObjCBlock20.fromFunctionPointer(this._lib,
      ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Bool arg0)>> ptr)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                    ffi.Void Function(ffi.Pointer<_ObjCBlock> block,
                        ffi.Bool arg0)>(_ObjCBlock20_fnPtrTrampoline)
                .cast(),
            ptr.cast());
  ObjCBlock20.fromFunction(this._lib, void Function(bool arg0) fn)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                    ffi.Void Function(ffi.Pointer<_ObjCBlock> block,
                        ffi.Bool arg0)>(_ObjCBlock20_closureTrampoline)
                .cast(),
            _ObjCBlock20_registerClosure(fn));
  void call(bool arg0) {
    return _impl.ref.invoke
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<_ObjCBlock> block, ffi.Bool arg0)>>()
        .asFunction<
            void Function(
                ffi.Pointer<_ObjCBlock> block, bool arg0)>()(_impl, arg0);
  }

  ffi.Pointer<_ObjCBlock> get pointer => _impl;
}

abstract class NSProcessInfoThermalState {
  static const int NSProcessInfoThermalStateNominal = 0;
  static const int NSProcessInfoThermalStateFair = 1;
  static const int NSProcessInfoThermalStateSerious = 2;
  static const int NSProcessInfoThermalStateCritical = 3;
}

class NSTextCheckingResult extends NSObject {
  NSTextCheckingResult._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSTextCheckingResult] that points to the same underlying object as [other].
  static NSTextCheckingResult castFrom<T extends _ObjCWrapper>(T other) {
    return NSTextCheckingResult._(other._id, other._lib,
        retain: true, release: true);
  }

  /// Returns a [NSTextCheckingResult] that wraps the given raw object pointer.
  static NSTextCheckingResult castFromPointer(
      AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSTextCheckingResult._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSTextCheckingResult].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSTextCheckingResult1);
  }

  int get resultType {
    return _lib._objc_msgSend_356(_id, _lib._sel_resultType1);
  }

  NSRange get range {
    return _lib._objc_msgSend_49(_id, _lib._sel_range1);
  }

  NSObject? get orthography {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_orthography1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get grammarDetails {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_grammarDetails1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get date {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_date1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get timeZone {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_timeZone1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  double get duration {
    return _lib._objc_msgSend_79(_id, _lib._sel_duration1);
  }

  NSObject? get components {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_components1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get URL {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_URL1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get replacementString {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_replacementString1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get alternativeStrings {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_alternativeStrings1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get regularExpression {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_regularExpression1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get phoneNumber {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_phoneNumber1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  int get numberOfRanges {
    return _lib._objc_msgSend_10(_id, _lib._sel_numberOfRanges1);
  }

  NSRange rangeAtIndex_(int idx) {
    return _lib._objc_msgSend_143(_id, _lib._sel_rangeAtIndex_1, idx);
  }

  NSRange rangeWithName_(NSObject? name) {
    return _lib._objc_msgSend_139(
        _id, _lib._sel_rangeWithName_1, name?._id ?? ffi.nullptr);
  }

  NSObject resultByAdjustingRangesWithOffset_(int offset) {
    final _ret = _lib._objc_msgSend_64(
        _id, _lib._sel_resultByAdjustingRangesWithOffset_1, offset);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get addressComponents {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_addressComponents1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject orthographyCheckingResultWithRange_orthography_(
      AVFAudio _lib, NSRange range, NSObject? orthography) {
    final _ret = _lib._objc_msgSend_158(
        _lib._class_NSTextCheckingResult1,
        _lib._sel_orthographyCheckingResultWithRange_orthography_1,
        range,
        orthography?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject spellCheckingResultWithRange_(AVFAudio _lib, NSRange range) {
    final _ret = _lib._objc_msgSend_48(_lib._class_NSTextCheckingResult1,
        _lib._sel_spellCheckingResultWithRange_1, range);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject grammarCheckingResultWithRange_details_(
      AVFAudio _lib, NSRange range, NSObject? details) {
    final _ret = _lib._objc_msgSend_158(
        _lib._class_NSTextCheckingResult1,
        _lib._sel_grammarCheckingResultWithRange_details_1,
        range,
        details?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject dateCheckingResultWithRange_date_(
      AVFAudio _lib, NSRange range, NSObject? date) {
    final _ret = _lib._objc_msgSend_158(
        _lib._class_NSTextCheckingResult1,
        _lib._sel_dateCheckingResultWithRange_date_1,
        range,
        date?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject dateCheckingResultWithRange_date_timeZone_duration_(
      AVFAudio _lib,
      NSRange range,
      NSObject? date,
      NSObject? timeZone,
      double duration) {
    final _ret = _lib._objc_msgSend_357(
        _lib._class_NSTextCheckingResult1,
        _lib._sel_dateCheckingResultWithRange_date_timeZone_duration_1,
        range,
        date?._id ?? ffi.nullptr,
        timeZone?._id ?? ffi.nullptr,
        duration);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject addressCheckingResultWithRange_components_(
      AVFAudio _lib, NSRange range, NSObject? components) {
    final _ret = _lib._objc_msgSend_158(
        _lib._class_NSTextCheckingResult1,
        _lib._sel_addressCheckingResultWithRange_components_1,
        range,
        components?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject linkCheckingResultWithRange_URL_(
      AVFAudio _lib, NSRange range, NSObject? url) {
    final _ret = _lib._objc_msgSend_158(
        _lib._class_NSTextCheckingResult1,
        _lib._sel_linkCheckingResultWithRange_URL_1,
        range,
        url?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject quoteCheckingResultWithRange_replacementString_(
      AVFAudio _lib, NSRange range, NSObject? replacementString) {
    final _ret = _lib._objc_msgSend_158(
        _lib._class_NSTextCheckingResult1,
        _lib._sel_quoteCheckingResultWithRange_replacementString_1,
        range,
        replacementString?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject dashCheckingResultWithRange_replacementString_(
      AVFAudio _lib, NSRange range, NSObject? replacementString) {
    final _ret = _lib._objc_msgSend_158(
        _lib._class_NSTextCheckingResult1,
        _lib._sel_dashCheckingResultWithRange_replacementString_1,
        range,
        replacementString?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject replacementCheckingResultWithRange_replacementString_(
      AVFAudio _lib, NSRange range, NSObject? replacementString) {
    final _ret = _lib._objc_msgSend_158(
        _lib._class_NSTextCheckingResult1,
        _lib._sel_replacementCheckingResultWithRange_replacementString_1,
        range,
        replacementString?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject correctionCheckingResultWithRange_replacementString_(
      AVFAudio _lib, NSRange range, NSObject? replacementString) {
    final _ret = _lib._objc_msgSend_158(
        _lib._class_NSTextCheckingResult1,
        _lib._sel_correctionCheckingResultWithRange_replacementString_1,
        range,
        replacementString?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject
      correctionCheckingResultWithRange_replacementString_alternativeStrings_(
          AVFAudio _lib,
          NSRange range,
          NSObject? replacementString,
          NSObject? alternativeStrings) {
    final _ret = _lib._objc_msgSend_358(
        _lib._class_NSTextCheckingResult1,
        _lib._sel_correctionCheckingResultWithRange_replacementString_alternativeStrings_1,
        range,
        replacementString?._id ?? ffi.nullptr,
        alternativeStrings?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject
      regularExpressionCheckingResultWithRanges_count_regularExpression_(
          AVFAudio _lib,
          NSRangePointer ranges,
          int count,
          NSObject? regularExpression) {
    final _ret = _lib._objc_msgSend_359(
        _lib._class_NSTextCheckingResult1,
        _lib._sel_regularExpressionCheckingResultWithRanges_count_regularExpression_1,
        ranges,
        count,
        regularExpression?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject phoneNumberCheckingResultWithRange_phoneNumber_(
      AVFAudio _lib, NSRange range, NSObject? phoneNumber) {
    final _ret = _lib._objc_msgSend_158(
        _lib._class_NSTextCheckingResult1,
        _lib._sel_phoneNumberCheckingResultWithRange_phoneNumber_1,
        range,
        phoneNumber?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject transitInformationCheckingResultWithRange_components_(
      AVFAudio _lib, NSRange range, NSObject? components) {
    final _ret = _lib._objc_msgSend_158(
        _lib._class_NSTextCheckingResult1,
        _lib._sel_transitInformationCheckingResultWithRange_components_1,
        range,
        components?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSTextCheckingResult new1(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSTextCheckingResult1, _lib._sel_new1);
    return NSTextCheckingResult._(_ret, _lib, retain: false, release: true);
  }

  static NSTextCheckingResult alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSTextCheckingResult1, _lib._sel_alloc1);
    return NSTextCheckingResult._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSTextCheckingResult1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSTextCheckingResult1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(_lib._class_NSTextCheckingResult1,
        _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSTextCheckingResult1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSTextCheckingResult1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSTextCheckingResult1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSTextCheckingResult1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSTextCheckingResult1,
        _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSTextCheckingResult1, _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

abstract class NSTextCheckingType {
  static const int NSTextCheckingTypeOrthography = 1;
  static const int NSTextCheckingTypeSpelling = 2;
  static const int NSTextCheckingTypeGrammar = 4;
  static const int NSTextCheckingTypeDate = 8;
  static const int NSTextCheckingTypeAddress = 16;
  static const int NSTextCheckingTypeLink = 32;
  static const int NSTextCheckingTypeQuote = 64;
  static const int NSTextCheckingTypeDash = 128;
  static const int NSTextCheckingTypeReplacement = 256;
  static const int NSTextCheckingTypeCorrection = 512;
  static const int NSTextCheckingTypeRegularExpression = 1024;
  static const int NSTextCheckingTypePhoneNumber = 2048;
  static const int NSTextCheckingTypeTransitInformation = 4096;
}

class NSRegularExpression extends NSObject {
  NSRegularExpression._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSRegularExpression] that points to the same underlying object as [other].
  static NSRegularExpression castFrom<T extends _ObjCWrapper>(T other) {
    return NSRegularExpression._(other._id, other._lib,
        retain: true, release: true);
  }

  /// Returns a [NSRegularExpression] that wraps the given raw object pointer.
  static NSRegularExpression castFromPointer(
      AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSRegularExpression._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSRegularExpression].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSRegularExpression1);
  }

  static NSObject regularExpressionWithPattern_options_error_(
      AVFAudio _lib,
      NSObject? pattern,
      int options,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_360(
        _lib._class_NSRegularExpression1,
        _lib._sel_regularExpressionWithPattern_options_error_1,
        pattern?._id ?? ffi.nullptr,
        options,
        error);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSRegularExpression initWithPattern_options_error_(NSObject? pattern,
      int options, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_360(
        _id,
        _lib._sel_initWithPattern_options_error_1,
        pattern?._id ?? ffi.nullptr,
        options,
        error);
    return NSRegularExpression._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get pattern {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_pattern1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  int get options {
    return _lib._objc_msgSend_361(_id, _lib._sel_options1);
  }

  int get numberOfCaptureGroups {
    return _lib._objc_msgSend_10(_id, _lib._sel_numberOfCaptureGroups1);
  }

  static NSObject escapedPatternForString_(AVFAudio _lib, NSObject? string) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSRegularExpression1,
        _lib._sel_escapedPatternForString_1, string?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void enumerateMatchesInString_options_range_usingBlock_(
      NSObject? string, int options, NSRange range, ObjCBlock21 block) {
    return _lib._objc_msgSend_362(
        _id,
        _lib._sel_enumerateMatchesInString_options_range_usingBlock_1,
        string?._id ?? ffi.nullptr,
        options,
        range,
        block._impl);
  }

  NSObject matchesInString_options_range_(
      NSObject? string, int options, NSRange range) {
    final _ret = _lib._objc_msgSend_363(
        _id,
        _lib._sel_matchesInString_options_range_1,
        string?._id ?? ffi.nullptr,
        options,
        range);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  int numberOfMatchesInString_options_range_(
      NSObject? string, int options, NSRange range) {
    return _lib._objc_msgSend_364(
        _id,
        _lib._sel_numberOfMatchesInString_options_range_1,
        string?._id ?? ffi.nullptr,
        options,
        range);
  }

  NSObject firstMatchInString_options_range_(
      NSObject? string, int options, NSRange range) {
    final _ret = _lib._objc_msgSend_363(
        _id,
        _lib._sel_firstMatchInString_options_range_1,
        string?._id ?? ffi.nullptr,
        options,
        range);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSRange rangeOfFirstMatchInString_options_range_(
      NSObject? string, int options, NSRange range) {
    return _lib._objc_msgSend_365(
        _id,
        _lib._sel_rangeOfFirstMatchInString_options_range_1,
        string?._id ?? ffi.nullptr,
        options,
        range);
  }

  NSObject stringByReplacingMatchesInString_options_range_withTemplate_(
      NSObject? string, int options, NSRange range, NSObject? templ) {
    final _ret = _lib._objc_msgSend_366(
        _id,
        _lib._sel_stringByReplacingMatchesInString_options_range_withTemplate_1,
        string?._id ?? ffi.nullptr,
        options,
        range,
        templ?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  int replaceMatchesInString_options_range_withTemplate_(
      NSObject? string, int options, NSRange range, NSObject? templ) {
    return _lib._objc_msgSend_367(
        _id,
        _lib._sel_replaceMatchesInString_options_range_withTemplate_1,
        string?._id ?? ffi.nullptr,
        options,
        range,
        templ?._id ?? ffi.nullptr);
  }

  NSObject replacementStringForResult_inString_offset_template_(
      NSObject? result, NSObject? string, int offset, NSObject? templ) {
    final _ret = _lib._objc_msgSend_368(
        _id,
        _lib._sel_replacementStringForResult_inString_offset_template_1,
        result?._id ?? ffi.nullptr,
        string?._id ?? ffi.nullptr,
        offset,
        templ?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject escapedTemplateForString_(AVFAudio _lib, NSObject? string) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSRegularExpression1,
        _lib._sel_escapedTemplateForString_1, string?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSRegularExpression new1(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSRegularExpression1, _lib._sel_new1);
    return NSRegularExpression._(_ret, _lib, retain: false, release: true);
  }

  static NSRegularExpression alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSRegularExpression1, _lib._sel_alloc1);
    return NSRegularExpression._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSRegularExpression1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSRegularExpression1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(_lib._class_NSRegularExpression1,
        _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSRegularExpression1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSRegularExpression1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSRegularExpression1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSRegularExpression1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSRegularExpression1,
        _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSRegularExpression1, _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

abstract class NSRegularExpressionOptions {
  static const int NSRegularExpressionCaseInsensitive = 1;
  static const int NSRegularExpressionAllowCommentsAndWhitespace = 2;
  static const int NSRegularExpressionIgnoreMetacharacters = 4;
  static const int NSRegularExpressionDotMatchesLineSeparators = 8;
  static const int NSRegularExpressionAnchorsMatchLines = 16;
  static const int NSRegularExpressionUseUnixLineSeparators = 32;
  static const int NSRegularExpressionUseUnicodeWordBoundaries = 64;
}

abstract class NSMatchingOptions {
  static const int NSMatchingReportProgress = 1;
  static const int NSMatchingReportCompletion = 2;
  static const int NSMatchingAnchored = 4;
  static const int NSMatchingWithTransparentBounds = 8;
  static const int NSMatchingWithoutAnchoringBounds = 16;
}

void _ObjCBlock21_fnPtrTrampoline(ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0, int arg1, ffi.Pointer<ffi.Bool> arg2) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ObjCObject> arg0, ffi.Int32 arg1,
                  ffi.Pointer<ffi.Bool> arg2)>>()
      .asFunction<
          void Function(ffi.Pointer<ObjCObject> arg0, int arg1,
              ffi.Pointer<ffi.Bool> arg2)>()(arg0, arg1, arg2);
}

final _ObjCBlock21_closureRegistry = <int, Function>{};
int _ObjCBlock21_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock21_registerClosure(Function fn) {
  final id = ++_ObjCBlock21_closureRegistryIndex;
  _ObjCBlock21_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock21_closureTrampoline(ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0, int arg1, ffi.Pointer<ffi.Bool> arg2) {
  return _ObjCBlock21_closureRegistry[block.ref.target.address]!(
      arg0, arg1, arg2);
}

class ObjCBlock21 {
  final ffi.Pointer<_ObjCBlock> _impl;
  final AVFAudio _lib;
  ObjCBlock21._(this._impl, this._lib);
  ObjCBlock21.fromFunctionPointer(
      this._lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ObjCObject> arg0,
                      ffi.Int32 arg1, ffi.Pointer<ffi.Bool> arg2)>>
          ptr)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<_ObjCBlock> block,
                            ffi.Pointer<ObjCObject> arg0,
                            ffi.Int32 arg1,
                            ffi.Pointer<ffi.Bool> arg2)>(
                    _ObjCBlock21_fnPtrTrampoline)
                .cast(),
            ptr.cast());
  ObjCBlock21.fromFunction(
      this._lib,
      void Function(ffi.Pointer<ObjCObject> arg0, int arg1,
              ffi.Pointer<ffi.Bool> arg2)
          fn)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<_ObjCBlock> block,
                            ffi.Pointer<ObjCObject> arg0,
                            ffi.Int32 arg1,
                            ffi.Pointer<ffi.Bool> arg2)>(
                    _ObjCBlock21_closureTrampoline)
                .cast(),
            _ObjCBlock21_registerClosure(fn));
  void call(
      ffi.Pointer<ObjCObject> arg0, int arg1, ffi.Pointer<ffi.Bool> arg2) {
    return _impl.ref.invoke
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<_ObjCBlock> block,
                    ffi.Pointer<ObjCObject> arg0,
                    ffi.Int32 arg1,
                    ffi.Pointer<ffi.Bool> arg2)>>()
        .asFunction<
            void Function(
                ffi.Pointer<_ObjCBlock> block,
                ffi.Pointer<ObjCObject> arg0,
                int arg1,
                ffi.Pointer<ffi.Bool> arg2)>()(_impl, arg0, arg1, arg2);
  }

  ffi.Pointer<_ObjCBlock> get pointer => _impl;
}

abstract class NSMatchingFlags {
  static const int NSMatchingProgress = 1;
  static const int NSMatchingCompleted = 2;
  static const int NSMatchingHitEnd = 4;
  static const int NSMatchingRequiredEnd = 8;
  static const int NSMatchingInternalError = 16;
}

class NSStream extends NSObject {
  NSStream._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSStream] that points to the same underlying object as [other].
  static NSStream castFrom<T extends _ObjCWrapper>(T other) {
    return NSStream._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSStream] that wraps the given raw object pointer.
  static NSStream castFromPointer(AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSStream._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSStream].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSStream1);
  }

  void open() {
    return _lib._objc_msgSend_1(_id, _lib._sel_open1);
  }

  void close() {
    return _lib._objc_msgSend_1(_id, _lib._sel_close1);
  }

  NSObject? get delegate {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_delegate1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set delegate(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setDelegate_1, value?._id ?? ffi.nullptr);
  }

  NSObject propertyForKey_(NSStreamPropertyKey key) {
    final _ret = _lib._objc_msgSend_13(_id, _lib._sel_propertyForKey_1, key);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool setProperty_forKey_(NSObject property, NSStreamPropertyKey key) {
    return _lib._objc_msgSend_20(
        _id, _lib._sel_setProperty_forKey_1, property._id, key);
  }

  void scheduleInRunLoop_forMode_(NSObject? aRunLoop, NSRunLoopMode mode) {
    return _lib._objc_msgSend_19(_id, _lib._sel_scheduleInRunLoop_forMode_1,
        aRunLoop?._id ?? ffi.nullptr, mode);
  }

  void removeFromRunLoop_forMode_(NSObject? aRunLoop, NSRunLoopMode mode) {
    return _lib._objc_msgSend_19(_id, _lib._sel_removeFromRunLoop_forMode_1,
        aRunLoop?._id ?? ffi.nullptr, mode);
  }

  int get streamStatus {
    return _lib._objc_msgSend_369(_id, _lib._sel_streamStatus1);
  }

  NSObject? get streamError {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_streamError1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static void getStreamsToHostWithName_port_inputStream_outputStream_(
      AVFAudio _lib,
      NSObject? hostname,
      int port,
      ffi.Pointer<ffi.Pointer<ObjCObject>> inputStream,
      ffi.Pointer<ffi.Pointer<ObjCObject>> outputStream) {
    return _lib._objc_msgSend_370(
        _lib._class_NSStream1,
        _lib._sel_getStreamsToHostWithName_port_inputStream_outputStream_1,
        hostname?._id ?? ffi.nullptr,
        port,
        inputStream,
        outputStream);
  }

  static void getStreamsToHost_port_inputStream_outputStream_(
      AVFAudio _lib,
      NSObject? host,
      int port,
      ffi.Pointer<ffi.Pointer<ObjCObject>> inputStream,
      ffi.Pointer<ffi.Pointer<ObjCObject>> outputStream) {
    return _lib._objc_msgSend_370(
        _lib._class_NSStream1,
        _lib._sel_getStreamsToHost_port_inputStream_outputStream_1,
        host?._id ?? ffi.nullptr,
        port,
        inputStream,
        outputStream);
  }

  static void getBoundStreamsWithBufferSize_inputStream_outputStream_(
      AVFAudio _lib,
      int bufferSize,
      ffi.Pointer<ffi.Pointer<ObjCObject>> inputStream,
      ffi.Pointer<ffi.Pointer<ObjCObject>> outputStream) {
    return _lib._objc_msgSend_371(
        _lib._class_NSStream1,
        _lib._sel_getBoundStreamsWithBufferSize_inputStream_outputStream_1,
        bufferSize,
        inputStream,
        outputStream);
  }

  static NSStream new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSStream1, _lib._sel_new1);
    return NSStream._(_ret, _lib, retain: false, release: true);
  }

  static NSStream alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSStream1, _lib._sel_alloc1);
    return NSStream._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSStream1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSStream1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSStream1, _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSStream1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSStream1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSStream1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSStream1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSStream1, _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSStream1, _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

typedef NSStreamPropertyKey = ffi.Pointer<ObjCObject>;

abstract class NSStreamStatus {
  static const int NSStreamStatusNotOpen = 0;
  static const int NSStreamStatusOpening = 1;
  static const int NSStreamStatusOpen = 2;
  static const int NSStreamStatusReading = 3;
  static const int NSStreamStatusWriting = 4;
  static const int NSStreamStatusAtEnd = 5;
  static const int NSStreamStatusClosed = 6;
  static const int NSStreamStatusError = 7;
}

class NSInputStream extends NSStream {
  NSInputStream._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSInputStream] that points to the same underlying object as [other].
  static NSInputStream castFrom<T extends _ObjCWrapper>(T other) {
    return NSInputStream._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSInputStream] that wraps the given raw object pointer.
  static NSInputStream castFromPointer(
      AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSInputStream._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSInputStream].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSInputStream1);
  }

  int read_maxLength_(ffi.Pointer<ffi.Uint8> buffer, int len) {
    return _lib._objc_msgSend_372(_id, _lib._sel_read_maxLength_1, buffer, len);
  }

  bool getBuffer_length_(
      ffi.Pointer<ffi.Pointer<ffi.Uint8>> buffer, ffi.Pointer<NSUInteger> len) {
    return _lib._objc_msgSend_373(
        _id, _lib._sel_getBuffer_length_1, buffer, len);
  }

  bool get hasBytesAvailable {
    return _lib._objc_msgSend_9(_id, _lib._sel_hasBytesAvailable1);
  }

  NSInputStream initWithData_(NSObject? data) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_initWithData_1, data?._id ?? ffi.nullptr);
    return NSInputStream._(_ret, _lib, retain: true, release: true);
  }

  NSInputStream initWithURL_(NSObject? url) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_initWithURL_1, url?._id ?? ffi.nullptr);
    return NSInputStream._(_ret, _lib, retain: true, release: true);
  }

  NSInputStream initWithFileAtPath_(NSObject? path) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_initWithFileAtPath_1, path?._id ?? ffi.nullptr);
    return NSInputStream._(_ret, _lib, retain: true, release: true);
  }

  static NSInputStream inputStreamWithData_(AVFAudio _lib, NSObject? data) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSInputStream1,
        _lib._sel_inputStreamWithData_1, data?._id ?? ffi.nullptr);
    return NSInputStream._(_ret, _lib, retain: true, release: true);
  }

  static NSInputStream inputStreamWithFileAtPath_(
      AVFAudio _lib, NSObject? path) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSInputStream1,
        _lib._sel_inputStreamWithFileAtPath_1, path?._id ?? ffi.nullptr);
    return NSInputStream._(_ret, _lib, retain: true, release: true);
  }

  static NSInputStream inputStreamWithURL_(AVFAudio _lib, NSObject? url) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSInputStream1,
        _lib._sel_inputStreamWithURL_1, url?._id ?? ffi.nullptr);
    return NSInputStream._(_ret, _lib, retain: true, release: true);
  }

  static void getStreamsToHostWithName_port_inputStream_outputStream_(
      AVFAudio _lib,
      NSObject? hostname,
      int port,
      ffi.Pointer<ffi.Pointer<ObjCObject>> inputStream,
      ffi.Pointer<ffi.Pointer<ObjCObject>> outputStream) {
    return _lib._objc_msgSend_370(
        _lib._class_NSInputStream1,
        _lib._sel_getStreamsToHostWithName_port_inputStream_outputStream_1,
        hostname?._id ?? ffi.nullptr,
        port,
        inputStream,
        outputStream);
  }

  static void getStreamsToHost_port_inputStream_outputStream_(
      AVFAudio _lib,
      NSObject? host,
      int port,
      ffi.Pointer<ffi.Pointer<ObjCObject>> inputStream,
      ffi.Pointer<ffi.Pointer<ObjCObject>> outputStream) {
    return _lib._objc_msgSend_370(
        _lib._class_NSInputStream1,
        _lib._sel_getStreamsToHost_port_inputStream_outputStream_1,
        host?._id ?? ffi.nullptr,
        port,
        inputStream,
        outputStream);
  }

  static void getBoundStreamsWithBufferSize_inputStream_outputStream_(
      AVFAudio _lib,
      int bufferSize,
      ffi.Pointer<ffi.Pointer<ObjCObject>> inputStream,
      ffi.Pointer<ffi.Pointer<ObjCObject>> outputStream) {
    return _lib._objc_msgSend_371(
        _lib._class_NSInputStream1,
        _lib._sel_getBoundStreamsWithBufferSize_inputStream_outputStream_1,
        bufferSize,
        inputStream,
        outputStream);
  }

  static NSInputStream new1(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSInputStream1, _lib._sel_new1);
    return NSInputStream._(_ret, _lib, retain: false, release: true);
  }

  static NSInputStream alloc(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSInputStream1, _lib._sel_alloc1);
    return NSInputStream._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSInputStream1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSInputStream1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSInputStream1, _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSInputStream1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSInputStream1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSInputStream1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSInputStream1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSInputStream1, _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSInputStream1, _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSOutputStream extends NSStream {
  NSOutputStream._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSOutputStream] that points to the same underlying object as [other].
  static NSOutputStream castFrom<T extends _ObjCWrapper>(T other) {
    return NSOutputStream._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSOutputStream] that wraps the given raw object pointer.
  static NSOutputStream castFromPointer(
      AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSOutputStream._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSOutputStream].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSOutputStream1);
  }

  int write_maxLength_(ffi.Pointer<ffi.Uint8> buffer, int len) {
    return _lib._objc_msgSend_372(
        _id, _lib._sel_write_maxLength_1, buffer, len);
  }

  bool get hasSpaceAvailable {
    return _lib._objc_msgSend_9(_id, _lib._sel_hasSpaceAvailable1);
  }

  NSOutputStream initToMemory() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_initToMemory1);
    return NSOutputStream._(_ret, _lib, retain: true, release: true);
  }

  NSOutputStream initToBuffer_capacity_(
      ffi.Pointer<ffi.Uint8> buffer, int capacity) {
    final _ret = _lib._objc_msgSend_374(
        _id, _lib._sel_initToBuffer_capacity_1, buffer, capacity);
    return NSOutputStream._(_ret, _lib, retain: true, release: true);
  }

  NSOutputStream initWithURL_append_(NSObject? url, bool shouldAppend) {
    final _ret = _lib._objc_msgSend_102(_id, _lib._sel_initWithURL_append_1,
        url?._id ?? ffi.nullptr, shouldAppend);
    return NSOutputStream._(_ret, _lib, retain: true, release: true);
  }

  NSOutputStream initToFileAtPath_append_(NSObject? path, bool shouldAppend) {
    final _ret = _lib._objc_msgSend_102(
        _id,
        _lib._sel_initToFileAtPath_append_1,
        path?._id ?? ffi.nullptr,
        shouldAppend);
    return NSOutputStream._(_ret, _lib, retain: true, release: true);
  }

  static NSOutputStream outputStreamToMemory(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSOutputStream1, _lib._sel_outputStreamToMemory1);
    return NSOutputStream._(_ret, _lib, retain: true, release: true);
  }

  static NSOutputStream outputStreamToBuffer_capacity_(
      AVFAudio _lib, ffi.Pointer<ffi.Uint8> buffer, int capacity) {
    final _ret = _lib._objc_msgSend_374(_lib._class_NSOutputStream1,
        _lib._sel_outputStreamToBuffer_capacity_1, buffer, capacity);
    return NSOutputStream._(_ret, _lib, retain: true, release: true);
  }

  static NSOutputStream outputStreamToFileAtPath_append_(
      AVFAudio _lib, NSObject? path, bool shouldAppend) {
    final _ret = _lib._objc_msgSend_102(
        _lib._class_NSOutputStream1,
        _lib._sel_outputStreamToFileAtPath_append_1,
        path?._id ?? ffi.nullptr,
        shouldAppend);
    return NSOutputStream._(_ret, _lib, retain: true, release: true);
  }

  static NSOutputStream outputStreamWithURL_append_(
      AVFAudio _lib, NSObject? url, bool shouldAppend) {
    final _ret = _lib._objc_msgSend_102(
        _lib._class_NSOutputStream1,
        _lib._sel_outputStreamWithURL_append_1,
        url?._id ?? ffi.nullptr,
        shouldAppend);
    return NSOutputStream._(_ret, _lib, retain: true, release: true);
  }

  static void getStreamsToHostWithName_port_inputStream_outputStream_(
      AVFAudio _lib,
      NSObject? hostname,
      int port,
      ffi.Pointer<ffi.Pointer<ObjCObject>> inputStream,
      ffi.Pointer<ffi.Pointer<ObjCObject>> outputStream) {
    return _lib._objc_msgSend_370(
        _lib._class_NSOutputStream1,
        _lib._sel_getStreamsToHostWithName_port_inputStream_outputStream_1,
        hostname?._id ?? ffi.nullptr,
        port,
        inputStream,
        outputStream);
  }

  static void getStreamsToHost_port_inputStream_outputStream_(
      AVFAudio _lib,
      NSObject? host,
      int port,
      ffi.Pointer<ffi.Pointer<ObjCObject>> inputStream,
      ffi.Pointer<ffi.Pointer<ObjCObject>> outputStream) {
    return _lib._objc_msgSend_370(
        _lib._class_NSOutputStream1,
        _lib._sel_getStreamsToHost_port_inputStream_outputStream_1,
        host?._id ?? ffi.nullptr,
        port,
        inputStream,
        outputStream);
  }

  static void getBoundStreamsWithBufferSize_inputStream_outputStream_(
      AVFAudio _lib,
      int bufferSize,
      ffi.Pointer<ffi.Pointer<ObjCObject>> inputStream,
      ffi.Pointer<ffi.Pointer<ObjCObject>> outputStream) {
    return _lib._objc_msgSend_371(
        _lib._class_NSOutputStream1,
        _lib._sel_getBoundStreamsWithBufferSize_inputStream_outputStream_1,
        bufferSize,
        inputStream,
        outputStream);
  }

  static NSOutputStream new1(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSOutputStream1, _lib._sel_new1);
    return NSOutputStream._(_ret, _lib, retain: false, release: true);
  }

  static NSOutputStream alloc(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSOutputStream1, _lib._sel_alloc1);
    return NSOutputStream._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSOutputStream1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSOutputStream1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(_lib._class_NSOutputStream1,
        _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSOutputStream1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSOutputStream1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSOutputStream1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSOutputStream1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSOutputStream1, _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSOutputStream1, _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSTimeZone extends NSObject {
  NSTimeZone._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSTimeZone] that points to the same underlying object as [other].
  static NSTimeZone castFrom<T extends _ObjCWrapper>(T other) {
    return NSTimeZone._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSTimeZone] that wraps the given raw object pointer.
  static NSTimeZone castFromPointer(AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSTimeZone._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSTimeZone].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSTimeZone1);
  }

  NSObject? get name {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_name1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get data {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_data1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  int secondsFromGMTForDate_(NSObject? aDate) {
    return _lib._objc_msgSend_201(
        _id, _lib._sel_secondsFromGMTForDate_1, aDate?._id ?? ffi.nullptr);
  }

  NSObject abbreviationForDate_(NSObject? aDate) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_abbreviationForDate_1, aDate?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool isDaylightSavingTimeForDate_(NSObject? aDate) {
    return _lib._objc_msgSend_0(_id, _lib._sel_isDaylightSavingTimeForDate_1,
        aDate?._id ?? ffi.nullptr);
  }

  double daylightSavingTimeOffsetForDate_(NSObject? aDate) {
    return _lib._objc_msgSend_197(_id,
        _lib._sel_daylightSavingTimeOffsetForDate_1, aDate?._id ?? ffi.nullptr);
  }

  NSObject nextDaylightSavingTimeTransitionAfterDate_(NSObject? aDate) {
    final _ret = _lib._objc_msgSend_13(
        _id,
        _lib._sel_nextDaylightSavingTimeTransitionAfterDate_1,
        aDate?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? getSystemTimeZone(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSTimeZone1, _lib._sel_systemTimeZone1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static void resetSystemTimeZone(AVFAudio _lib) {
    return _lib._objc_msgSend_1(
        _lib._class_NSTimeZone1, _lib._sel_resetSystemTimeZone1);
  }

  static NSObject? getDefaultTimeZone(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSTimeZone1, _lib._sel_defaultTimeZone1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static void setDefaultTimeZone(AVFAudio _lib, NSObject? value) {
    _lib._objc_msgSend_34(_lib._class_NSTimeZone1,
        _lib._sel_setDefaultTimeZone_1, value?._id ?? ffi.nullptr);
  }

  static NSObject? getLocalTimeZone(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSTimeZone1, _lib._sel_localTimeZone1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? getKnownTimeZoneNames(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSTimeZone1, _lib._sel_knownTimeZoneNames1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? getAbbreviationDictionary(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSTimeZone1, _lib._sel_abbreviationDictionary1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static void setAbbreviationDictionary(AVFAudio _lib, NSObject? value) {
    _lib._objc_msgSend_34(_lib._class_NSTimeZone1,
        _lib._sel_setAbbreviationDictionary_1, value?._id ?? ffi.nullptr);
  }

  static NSObject? getTimeZoneDataVersion(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSTimeZone1, _lib._sel_timeZoneDataVersion1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  int get secondsFromGMT {
    return _lib._objc_msgSend_11(_id, _lib._sel_secondsFromGMT1);
  }

  NSObject? get abbreviation {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_abbreviation1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool get daylightSavingTime {
    return _lib._objc_msgSend_9(_id, _lib._sel_isDaylightSavingTime1);
  }

  double get daylightSavingTimeOffset {
    return _lib._objc_msgSend_79(_id, _lib._sel_daylightSavingTimeOffset1);
  }

  NSObject? get nextDaylightSavingTimeTransition {
    final _ret =
        _lib._objc_msgSend_2(_id, _lib._sel_nextDaylightSavingTimeTransition1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get description {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_description1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool isEqualToTimeZone_(NSObject? aTimeZone) {
    return _lib._objc_msgSend_0(
        _id, _lib._sel_isEqualToTimeZone_1, aTimeZone?._id ?? ffi.nullptr);
  }

  NSObject localizedName_locale_(int style, NSObject? locale) {
    final _ret = _lib._objc_msgSend_375(_id, _lib._sel_localizedName_locale_1,
        style, locale?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSTimeZone timeZoneWithName_(AVFAudio _lib, NSObject? tzName) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSTimeZone1,
        _lib._sel_timeZoneWithName_1, tzName?._id ?? ffi.nullptr);
    return NSTimeZone._(_ret, _lib, retain: true, release: true);
  }

  static NSTimeZone timeZoneWithName_data_(
      AVFAudio _lib, NSObject? tzName, NSObject? aData) {
    final _ret = _lib._objc_msgSend_39(
        _lib._class_NSTimeZone1,
        _lib._sel_timeZoneWithName_data_1,
        tzName?._id ?? ffi.nullptr,
        aData?._id ?? ffi.nullptr);
    return NSTimeZone._(_ret, _lib, retain: true, release: true);
  }

  NSTimeZone initWithName_(NSObject? tzName) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_initWithName_1, tzName?._id ?? ffi.nullptr);
    return NSTimeZone._(_ret, _lib, retain: true, release: true);
  }

  NSTimeZone initWithName_data_(NSObject? tzName, NSObject? aData) {
    final _ret = _lib._objc_msgSend_39(_id, _lib._sel_initWithName_data_1,
        tzName?._id ?? ffi.nullptr, aData?._id ?? ffi.nullptr);
    return NSTimeZone._(_ret, _lib, retain: true, release: true);
  }

  static NSTimeZone timeZoneForSecondsFromGMT_(AVFAudio _lib, int seconds) {
    final _ret = _lib._objc_msgSend_64(_lib._class_NSTimeZone1,
        _lib._sel_timeZoneForSecondsFromGMT_1, seconds);
    return NSTimeZone._(_ret, _lib, retain: true, release: true);
  }

  static NSTimeZone timeZoneWithAbbreviation_(
      AVFAudio _lib, NSObject? abbreviation) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSTimeZone1,
        _lib._sel_timeZoneWithAbbreviation_1, abbreviation?._id ?? ffi.nullptr);
    return NSTimeZone._(_ret, _lib, retain: true, release: true);
  }

  static NSTimeZone new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSTimeZone1, _lib._sel_new1);
    return NSTimeZone._(_ret, _lib, retain: false, release: true);
  }

  static NSTimeZone alloc(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSTimeZone1, _lib._sel_alloc1);
    return NSTimeZone._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSTimeZone1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSTimeZone1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSTimeZone1, _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSTimeZone1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSTimeZone1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSTimeZone1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSTimeZone1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSTimeZone1, _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSTimeZone1, _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

abstract class NSTimeZoneNameStyle {
  static const int NSTimeZoneNameStyleStandard = 0;
  static const int NSTimeZoneNameStyleShortStandard = 1;
  static const int NSTimeZoneNameStyleDaylightSaving = 2;
  static const int NSTimeZoneNameStyleShortDaylightSaving = 3;
  static const int NSTimeZoneNameStyleGeneric = 4;
  static const int NSTimeZoneNameStyleShortGeneric = 5;
}

class NSURLCache extends NSObject {
  NSURLCache._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSURLCache] that points to the same underlying object as [other].
  static NSURLCache castFrom<T extends _ObjCWrapper>(T other) {
    return NSURLCache._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSURLCache] that wraps the given raw object pointer.
  static NSURLCache castFromPointer(AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSURLCache._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSURLCache].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSURLCache1);
  }

  static NSObject? getSharedURLCache(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSURLCache1, _lib._sel_sharedURLCache1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static void setSharedURLCache(AVFAudio _lib, NSObject? value) {
    _lib._objc_msgSend_34(_lib._class_NSURLCache1,
        _lib._sel_setSharedURLCache_1, value?._id ?? ffi.nullptr);
  }

  NSURLCache initWithMemoryCapacity_diskCapacity_diskPath_(
      int memoryCapacity, int diskCapacity, NSObject? path) {
    final _ret = _lib._objc_msgSend_376(
        _id,
        _lib._sel_initWithMemoryCapacity_diskCapacity_diskPath_1,
        memoryCapacity,
        diskCapacity,
        path?._id ?? ffi.nullptr);
    return NSURLCache._(_ret, _lib, retain: true, release: true);
  }

  NSURLCache initWithMemoryCapacity_diskCapacity_directoryURL_(
      int memoryCapacity, int diskCapacity, NSObject? directoryURL) {
    final _ret = _lib._objc_msgSend_376(
        _id,
        _lib._sel_initWithMemoryCapacity_diskCapacity_directoryURL_1,
        memoryCapacity,
        diskCapacity,
        directoryURL?._id ?? ffi.nullptr);
    return NSURLCache._(_ret, _lib, retain: true, release: true);
  }

  NSObject cachedResponseForRequest_(NSObject? request) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_cachedResponseForRequest_1, request?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void storeCachedResponse_forRequest_(
      NSObject? cachedResponse, NSObject? request) {
    return _lib._objc_msgSend_19(
        _id,
        _lib._sel_storeCachedResponse_forRequest_1,
        cachedResponse?._id ?? ffi.nullptr,
        request?._id ?? ffi.nullptr);
  }

  void removeCachedResponseForRequest_(NSObject? request) {
    return _lib._objc_msgSend_8(_id, _lib._sel_removeCachedResponseForRequest_1,
        request?._id ?? ffi.nullptr);
  }

  void removeAllCachedResponses() {
    return _lib._objc_msgSend_1(_id, _lib._sel_removeAllCachedResponses1);
  }

  void removeCachedResponsesSinceDate_(NSObject? date) {
    return _lib._objc_msgSend_8(_id, _lib._sel_removeCachedResponsesSinceDate_1,
        date?._id ?? ffi.nullptr);
  }

  int get memoryCapacity {
    return _lib._objc_msgSend_10(_id, _lib._sel_memoryCapacity1);
  }

  set memoryCapacity(int value) {
    _lib._objc_msgSend_241(_id, _lib._sel_setMemoryCapacity_1, value);
  }

  int get diskCapacity {
    return _lib._objc_msgSend_10(_id, _lib._sel_diskCapacity1);
  }

  set diskCapacity(int value) {
    _lib._objc_msgSend_241(_id, _lib._sel_setDiskCapacity_1, value);
  }

  int get currentMemoryUsage {
    return _lib._objc_msgSend_10(_id, _lib._sel_currentMemoryUsage1);
  }

  int get currentDiskUsage {
    return _lib._objc_msgSend_10(_id, _lib._sel_currentDiskUsage1);
  }

  void storeCachedResponse_forDataTask_(
      NSObject? cachedResponse, NSObject? dataTask) {
    return _lib._objc_msgSend_19(
        _id,
        _lib._sel_storeCachedResponse_forDataTask_1,
        cachedResponse?._id ?? ffi.nullptr,
        dataTask?._id ?? ffi.nullptr);
  }

  void getCachedResponseForDataTask_completionHandler_(
      NSObject? dataTask, ObjCBlock19 completionHandler) {
    return _lib._objc_msgSend_330(
        _id,
        _lib._sel_getCachedResponseForDataTask_completionHandler_1,
        dataTask?._id ?? ffi.nullptr,
        completionHandler._impl);
  }

  void removeCachedResponseForDataTask_(NSObject? dataTask) {
    return _lib._objc_msgSend_8(
        _id,
        _lib._sel_removeCachedResponseForDataTask_1,
        dataTask?._id ?? ffi.nullptr);
  }

  static NSURLCache new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSURLCache1, _lib._sel_new1);
    return NSURLCache._(_ret, _lib, retain: false, release: true);
  }

  static NSURLCache alloc(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSURLCache1, _lib._sel_alloc1);
    return NSURLCache._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSURLCache1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSURLCache1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSURLCache1, _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSURLCache1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSURLCache1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSURLCache1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSURLCache1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSURLCache1, _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSURLCache1, _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSURLConnection extends NSObject {
  NSURLConnection._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSURLConnection] that points to the same underlying object as [other].
  static NSURLConnection castFrom<T extends _ObjCWrapper>(T other) {
    return NSURLConnection._(other._id, other._lib,
        retain: true, release: true);
  }

  /// Returns a [NSURLConnection] that wraps the given raw object pointer.
  static NSURLConnection castFromPointer(
      AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSURLConnection._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSURLConnection].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSURLConnection1);
  }

  NSURLConnection initWithRequest_delegate_startImmediately_(
      NSObject? request, NSObject delegate, bool startImmediately) {
    final _ret = _lib._objc_msgSend_377(
        _id,
        _lib._sel_initWithRequest_delegate_startImmediately_1,
        request?._id ?? ffi.nullptr,
        delegate._id,
        startImmediately);
    return NSURLConnection._(_ret, _lib, retain: true, release: true);
  }

  NSURLConnection initWithRequest_delegate_(
      NSObject? request, NSObject delegate) {
    final _ret = _lib._objc_msgSend_39(
        _id,
        _lib._sel_initWithRequest_delegate_1,
        request?._id ?? ffi.nullptr,
        delegate._id);
    return NSURLConnection._(_ret, _lib, retain: true, release: true);
  }

  static NSObject connectionWithRequest_delegate_(
      AVFAudio _lib, NSObject? request, NSObject delegate) {
    final _ret = _lib._objc_msgSend_39(
        _lib._class_NSURLConnection1,
        _lib._sel_connectionWithRequest_delegate_1,
        request?._id ?? ffi.nullptr,
        delegate._id);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get originalRequest {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_originalRequest1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get currentRequest {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_currentRequest1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  void start() {
    return _lib._objc_msgSend_1(_id, _lib._sel_start1);
  }

  void cancel() {
    return _lib._objc_msgSend_1(_id, _lib._sel_cancel1);
  }

  void scheduleInRunLoop_forMode_(NSObject? aRunLoop, NSRunLoopMode mode) {
    return _lib._objc_msgSend_19(_id, _lib._sel_scheduleInRunLoop_forMode_1,
        aRunLoop?._id ?? ffi.nullptr, mode);
  }

  void unscheduleFromRunLoop_forMode_(NSObject? aRunLoop, NSRunLoopMode mode) {
    return _lib._objc_msgSend_19(_id, _lib._sel_unscheduleFromRunLoop_forMode_1,
        aRunLoop?._id ?? ffi.nullptr, mode);
  }

  void setDelegateQueue_(NSObject? queue) {
    return _lib._objc_msgSend_8(
        _id, _lib._sel_setDelegateQueue_1, queue?._id ?? ffi.nullptr);
  }

  static bool canHandleRequest_(AVFAudio _lib, NSObject? request) {
    return _lib._objc_msgSend_0(_lib._class_NSURLConnection1,
        _lib._sel_canHandleRequest_1, request?._id ?? ffi.nullptr);
  }

  static NSObject sendSynchronousRequest_returningResponse_error_(
      AVFAudio _lib,
      NSObject? request,
      ffi.Pointer<ffi.Pointer<ObjCObject>> response,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_327(
        _lib._class_NSURLConnection1,
        _lib._sel_sendSynchronousRequest_returningResponse_error_1,
        request?._id ?? ffi.nullptr,
        response,
        error);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static void sendAsynchronousRequest_queue_completionHandler_(
      AVFAudio _lib, NSObject? request, NSObject? queue, ObjCBlock22 handler) {
    return _lib._objc_msgSend_378(
        _lib._class_NSURLConnection1,
        _lib._sel_sendAsynchronousRequest_queue_completionHandler_1,
        request?._id ?? ffi.nullptr,
        queue?._id ?? ffi.nullptr,
        handler._impl);
  }

  static NSURLConnection new1(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSURLConnection1, _lib._sel_new1);
    return NSURLConnection._(_ret, _lib, retain: false, release: true);
  }

  static NSURLConnection alloc(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSURLConnection1, _lib._sel_alloc1);
    return NSURLConnection._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSURLConnection1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSURLConnection1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(_lib._class_NSURLConnection1,
        _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSURLConnection1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSURLConnection1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSURLConnection1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSURLConnection1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSURLConnection1,
        _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSURLConnection1, _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

void _ObjCBlock22_fnPtrTrampoline(
    ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0,
    ffi.Pointer<ObjCObject> arg1,
    ffi.Pointer<ObjCObject> arg2) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ObjCObject> arg0,
                  ffi.Pointer<ObjCObject> arg1,
                  ffi.Pointer<ObjCObject> arg2)>>()
      .asFunction<
          void Function(
              ffi.Pointer<ObjCObject> arg0,
              ffi.Pointer<ObjCObject> arg1,
              ffi.Pointer<ObjCObject> arg2)>()(arg0, arg1, arg2);
}

final _ObjCBlock22_closureRegistry = <int, Function>{};
int _ObjCBlock22_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock22_registerClosure(Function fn) {
  final id = ++_ObjCBlock22_closureRegistryIndex;
  _ObjCBlock22_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock22_closureTrampoline(
    ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0,
    ffi.Pointer<ObjCObject> arg1,
    ffi.Pointer<ObjCObject> arg2) {
  return _ObjCBlock22_closureRegistry[block.ref.target.address]!(
      arg0, arg1, arg2);
}

class ObjCBlock22 {
  final ffi.Pointer<_ObjCBlock> _impl;
  final AVFAudio _lib;
  ObjCBlock22._(this._impl, this._lib);
  ObjCBlock22.fromFunctionPointer(
      this._lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ObjCObject> arg0,
                      ffi.Pointer<ObjCObject> arg1,
                      ffi.Pointer<ObjCObject> arg2)>>
          ptr)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<_ObjCBlock> block,
                            ffi.Pointer<ObjCObject> arg0,
                            ffi.Pointer<ObjCObject> arg1,
                            ffi.Pointer<ObjCObject> arg2)>(
                    _ObjCBlock22_fnPtrTrampoline)
                .cast(),
            ptr.cast());
  ObjCBlock22.fromFunction(
      this._lib,
      void Function(ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1,
              ffi.Pointer<ObjCObject> arg2)
          fn)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<_ObjCBlock> block,
                            ffi.Pointer<ObjCObject> arg0,
                            ffi.Pointer<ObjCObject> arg1,
                            ffi.Pointer<ObjCObject> arg2)>(
                    _ObjCBlock22_closureTrampoline)
                .cast(),
            _ObjCBlock22_registerClosure(fn));
  void call(ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1,
      ffi.Pointer<ObjCObject> arg2) {
    return _impl.ref.invoke
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(
                    ffi.Pointer<_ObjCBlock> block,
                    ffi.Pointer<ObjCObject> arg0,
                    ffi.Pointer<ObjCObject> arg1,
                    ffi.Pointer<ObjCObject> arg2)>>()
        .asFunction<
            void Function(
                ffi.Pointer<_ObjCBlock> block,
                ffi.Pointer<ObjCObject> arg0,
                ffi.Pointer<ObjCObject> arg1,
                ffi.Pointer<ObjCObject> arg2)>()(_impl, arg0, arg1, arg2);
  }

  ffi.Pointer<_ObjCBlock> get pointer => _impl;
}

class NSURLCredential extends NSObject {
  NSURLCredential._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSURLCredential] that points to the same underlying object as [other].
  static NSURLCredential castFrom<T extends _ObjCWrapper>(T other) {
    return NSURLCredential._(other._id, other._lib,
        retain: true, release: true);
  }

  /// Returns a [NSURLCredential] that wraps the given raw object pointer.
  static NSURLCredential castFromPointer(
      AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSURLCredential._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSURLCredential].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSURLCredential1);
  }

  int get persistence {
    return _lib._objc_msgSend_379(_id, _lib._sel_persistence1);
  }

  NSURLCredential initWithUser_password_persistence_(
      NSObject? user, NSObject? password, int persistence) {
    final _ret = _lib._objc_msgSend_380(
        _id,
        _lib._sel_initWithUser_password_persistence_1,
        user?._id ?? ffi.nullptr,
        password?._id ?? ffi.nullptr,
        persistence);
    return NSURLCredential._(_ret, _lib, retain: true, release: true);
  }

  static NSObject credentialWithUser_password_persistence_(
      AVFAudio _lib, NSObject? user, NSObject? password, int persistence) {
    final _ret = _lib._objc_msgSend_380(
        _lib._class_NSURLCredential1,
        _lib._sel_credentialWithUser_password_persistence_1,
        user?._id ?? ffi.nullptr,
        password?._id ?? ffi.nullptr,
        persistence);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get user {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_user1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get password {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_password1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool get hasPassword {
    return _lib._objc_msgSend_9(_id, _lib._sel_hasPassword1);
  }

  NSURLCredential initWithIdentity_certificates_persistence_(
      SecIdentityRef identity, NSObject? certArray, int persistence) {
    final _ret = _lib._objc_msgSend_381(
        _id,
        _lib._sel_initWithIdentity_certificates_persistence_1,
        identity,
        certArray?._id ?? ffi.nullptr,
        persistence);
    return NSURLCredential._(_ret, _lib, retain: true, release: true);
  }

  static NSObject credentialWithIdentity_certificates_persistence_(
      AVFAudio _lib,
      SecIdentityRef identity,
      NSObject? certArray,
      int persistence) {
    final _ret = _lib._objc_msgSend_381(
        _lib._class_NSURLCredential1,
        _lib._sel_credentialWithIdentity_certificates_persistence_1,
        identity,
        certArray?._id ?? ffi.nullptr,
        persistence);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  SecIdentityRef get identity {
    return _lib._objc_msgSend_382(_id, _lib._sel_identity1);
  }

  NSObject? get certificates {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_certificates1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSURLCredential initWithTrust_(SecTrustRef trust) {
    final _ret = _lib._objc_msgSend_383(_id, _lib._sel_initWithTrust_1, trust);
    return NSURLCredential._(_ret, _lib, retain: true, release: true);
  }

  static NSObject credentialForTrust_(AVFAudio _lib, SecTrustRef trust) {
    final _ret = _lib._objc_msgSend_383(
        _lib._class_NSURLCredential1, _lib._sel_credentialForTrust_1, trust);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSURLCredential new1(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSURLCredential1, _lib._sel_new1);
    return NSURLCredential._(_ret, _lib, retain: false, release: true);
  }

  static NSURLCredential alloc(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSURLCredential1, _lib._sel_alloc1);
    return NSURLCredential._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSURLCredential1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSURLCredential1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(_lib._class_NSURLCredential1,
        _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSURLCredential1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSURLCredential1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSURLCredential1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSURLCredential1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSURLCredential1,
        _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSURLCredential1, _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

abstract class NSURLCredentialPersistence {
  static const int NSURLCredentialPersistenceNone = 0;
  static const int NSURLCredentialPersistenceForSession = 1;
  static const int NSURLCredentialPersistencePermanent = 2;
  static const int NSURLCredentialPersistenceSynchronizable = 3;
}

typedef SecIdentityRef = ffi.Pointer<__SecIdentity>;

class __SecIdentity extends ffi.Opaque {}

typedef SecTrustRef = ffi.Pointer<__SecTrust>;

class __SecTrust extends ffi.Opaque {}

class NSURLProtectionSpace extends NSObject {
  NSURLProtectionSpace._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSURLProtectionSpace] that points to the same underlying object as [other].
  static NSURLProtectionSpace castFrom<T extends _ObjCWrapper>(T other) {
    return NSURLProtectionSpace._(other._id, other._lib,
        retain: true, release: true);
  }

  /// Returns a [NSURLProtectionSpace] that wraps the given raw object pointer.
  static NSURLProtectionSpace castFromPointer(
      AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSURLProtectionSpace._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSURLProtectionSpace].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSURLProtectionSpace1);
  }

  NSURLProtectionSpace initWithHost_port_protocol_realm_authenticationMethod_(
      NSObject? host,
      int port,
      NSObject? protocol,
      NSObject? realm,
      NSObject? authenticationMethod) {
    final _ret = _lib._objc_msgSend_384(
        _id,
        _lib._sel_initWithHost_port_protocol_realm_authenticationMethod_1,
        host?._id ?? ffi.nullptr,
        port,
        protocol?._id ?? ffi.nullptr,
        realm?._id ?? ffi.nullptr,
        authenticationMethod?._id ?? ffi.nullptr);
    return NSURLProtectionSpace._(_ret, _lib, retain: true, release: true);
  }

  NSURLProtectionSpace initWithProxyHost_port_type_realm_authenticationMethod_(
      NSObject? host,
      int port,
      NSObject? type,
      NSObject? realm,
      NSObject? authenticationMethod) {
    final _ret = _lib._objc_msgSend_384(
        _id,
        _lib._sel_initWithProxyHost_port_type_realm_authenticationMethod_1,
        host?._id ?? ffi.nullptr,
        port,
        type?._id ?? ffi.nullptr,
        realm?._id ?? ffi.nullptr,
        authenticationMethod?._id ?? ffi.nullptr);
    return NSURLProtectionSpace._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get realm {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_realm1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool get receivesCredentialSecurely {
    return _lib._objc_msgSend_9(_id, _lib._sel_receivesCredentialSecurely1);
  }

  bool get isProxy {
    return _lib._objc_msgSend_9(_id, _lib._sel_isProxy1);
  }

  NSObject? get host {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_host1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  int get port {
    return _lib._objc_msgSend_11(_id, _lib._sel_port1);
  }

  NSObject? get proxyType {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_proxyType1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get protocol {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_protocol1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get authenticationMethod {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_authenticationMethod1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get distinguishedNames {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_distinguishedNames1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  SecTrustRef get serverTrust {
    return _lib._objc_msgSend_385(_id, _lib._sel_serverTrust1);
  }

  static NSURLProtectionSpace new1(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSURLProtectionSpace1, _lib._sel_new1);
    return NSURLProtectionSpace._(_ret, _lib, retain: false, release: true);
  }

  static NSURLProtectionSpace alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSURLProtectionSpace1, _lib._sel_alloc1);
    return NSURLProtectionSpace._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSURLProtectionSpace1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSURLProtectionSpace1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(_lib._class_NSURLProtectionSpace1,
        _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSURLProtectionSpace1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSURLProtectionSpace1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSURLProtectionSpace1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSURLProtectionSpace1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSURLProtectionSpace1,
        _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSURLProtectionSpace1, _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSURLCredentialStorage extends NSObject {
  NSURLCredentialStorage._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSURLCredentialStorage] that points to the same underlying object as [other].
  static NSURLCredentialStorage castFrom<T extends _ObjCWrapper>(T other) {
    return NSURLCredentialStorage._(other._id, other._lib,
        retain: true, release: true);
  }

  /// Returns a [NSURLCredentialStorage] that wraps the given raw object pointer.
  static NSURLCredentialStorage castFromPointer(
      AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSURLCredentialStorage._(other, lib,
        retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSURLCredentialStorage].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSURLCredentialStorage1);
  }

  static NSObject? getSharedCredentialStorage(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSURLCredentialStorage1,
        _lib._sel_sharedCredentialStorage1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject credentialsForProtectionSpace_(NSObject? space) {
    final _ret = _lib._objc_msgSend_13(_id,
        _lib._sel_credentialsForProtectionSpace_1, space?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get allCredentials {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_allCredentials1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  void setCredential_forProtectionSpace_(
      NSObject? credential, NSObject? space) {
    return _lib._objc_msgSend_19(
        _id,
        _lib._sel_setCredential_forProtectionSpace_1,
        credential?._id ?? ffi.nullptr,
        space?._id ?? ffi.nullptr);
  }

  void removeCredential_forProtectionSpace_(
      NSObject? credential, NSObject? space) {
    return _lib._objc_msgSend_19(
        _id,
        _lib._sel_removeCredential_forProtectionSpace_1,
        credential?._id ?? ffi.nullptr,
        space?._id ?? ffi.nullptr);
  }

  void removeCredential_forProtectionSpace_options_(
      NSObject? credential, NSObject? space, NSObject? options) {
    return _lib._objc_msgSend_109(
        _id,
        _lib._sel_removeCredential_forProtectionSpace_options_1,
        credential?._id ?? ffi.nullptr,
        space?._id ?? ffi.nullptr,
        options?._id ?? ffi.nullptr);
  }

  NSObject defaultCredentialForProtectionSpace_(NSObject? space) {
    final _ret = _lib._objc_msgSend_13(
        _id,
        _lib._sel_defaultCredentialForProtectionSpace_1,
        space?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void setDefaultCredential_forProtectionSpace_(
      NSObject? credential, NSObject? space) {
    return _lib._objc_msgSend_19(
        _id,
        _lib._sel_setDefaultCredential_forProtectionSpace_1,
        credential?._id ?? ffi.nullptr,
        space?._id ?? ffi.nullptr);
  }

  void getCredentialsForProtectionSpace_task_completionHandler_(
      NSObject? protectionSpace,
      NSObject? task,
      ObjCBlock19 completionHandler) {
    return _lib._objc_msgSend_386(
        _id,
        _lib._sel_getCredentialsForProtectionSpace_task_completionHandler_1,
        protectionSpace?._id ?? ffi.nullptr,
        task?._id ?? ffi.nullptr,
        completionHandler._impl);
  }

  void setCredential_forProtectionSpace_task_(
      NSObject? credential, NSObject? protectionSpace, NSObject? task) {
    return _lib._objc_msgSend_109(
        _id,
        _lib._sel_setCredential_forProtectionSpace_task_1,
        credential?._id ?? ffi.nullptr,
        protectionSpace?._id ?? ffi.nullptr,
        task?._id ?? ffi.nullptr);
  }

  void removeCredential_forProtectionSpace_options_task_(NSObject? credential,
      NSObject? protectionSpace, NSObject? options, NSObject? task) {
    return _lib._objc_msgSend_387(
        _id,
        _lib._sel_removeCredential_forProtectionSpace_options_task_1,
        credential?._id ?? ffi.nullptr,
        protectionSpace?._id ?? ffi.nullptr,
        options?._id ?? ffi.nullptr,
        task?._id ?? ffi.nullptr);
  }

  void getDefaultCredentialForProtectionSpace_task_completionHandler_(
      NSObject? space, NSObject? task, ObjCBlock19 completionHandler) {
    return _lib._objc_msgSend_386(
        _id,
        _lib._sel_getDefaultCredentialForProtectionSpace_task_completionHandler_1,
        space?._id ?? ffi.nullptr,
        task?._id ?? ffi.nullptr,
        completionHandler._impl);
  }

  void setDefaultCredential_forProtectionSpace_task_(
      NSObject? credential, NSObject? protectionSpace, NSObject? task) {
    return _lib._objc_msgSend_109(
        _id,
        _lib._sel_setDefaultCredential_forProtectionSpace_task_1,
        credential?._id ?? ffi.nullptr,
        protectionSpace?._id ?? ffi.nullptr,
        task?._id ?? ffi.nullptr);
  }

  static NSURLCredentialStorage new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSURLCredentialStorage1, _lib._sel_new1);
    return NSURLCredentialStorage._(_ret, _lib, retain: false, release: true);
  }

  static NSURLCredentialStorage alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSURLCredentialStorage1, _lib._sel_alloc1);
    return NSURLCredentialStorage._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSURLCredentialStorage1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSURLCredentialStorage1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(_lib._class_NSURLCredentialStorage1,
        _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSURLCredentialStorage1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSURLCredentialStorage1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSURLCredentialStorage1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSURLCredentialStorage1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSURLCredentialStorage1,
        _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSURLCredentialStorage1,
        _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSURLProtocol extends NSObject {
  NSURLProtocol._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSURLProtocol] that points to the same underlying object as [other].
  static NSURLProtocol castFrom<T extends _ObjCWrapper>(T other) {
    return NSURLProtocol._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSURLProtocol] that wraps the given raw object pointer.
  static NSURLProtocol castFromPointer(
      AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSURLProtocol._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSURLProtocol].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSURLProtocol1);
  }

  NSURLProtocol initWithRequest_cachedResponse_client_(
      NSObject? request, NSObject? cachedResponse, NSObject? client) {
    final _ret = _lib._objc_msgSend_35(
        _id,
        _lib._sel_initWithRequest_cachedResponse_client_1,
        request?._id ?? ffi.nullptr,
        cachedResponse?._id ?? ffi.nullptr,
        client?._id ?? ffi.nullptr);
    return NSURLProtocol._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get client {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_client1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get request {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_request1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get cachedResponse {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_cachedResponse1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool canInitWithRequest_(AVFAudio _lib, NSObject? request) {
    return _lib._objc_msgSend_0(_lib._class_NSURLProtocol1,
        _lib._sel_canInitWithRequest_1, request?._id ?? ffi.nullptr);
  }

  static NSObject canonicalRequestForRequest_(
      AVFAudio _lib, NSObject? request) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSURLProtocol1,
        _lib._sel_canonicalRequestForRequest_1, request?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool requestIsCacheEquivalent_toRequest_(
      AVFAudio _lib, NSObject? a, NSObject? b) {
    return _lib._objc_msgSend_20(
        _lib._class_NSURLProtocol1,
        _lib._sel_requestIsCacheEquivalent_toRequest_1,
        a?._id ?? ffi.nullptr,
        b?._id ?? ffi.nullptr);
  }

  void startLoading() {
    return _lib._objc_msgSend_1(_id, _lib._sel_startLoading1);
  }

  void stopLoading() {
    return _lib._objc_msgSend_1(_id, _lib._sel_stopLoading1);
  }

  static NSObject propertyForKey_inRequest_(
      AVFAudio _lib, NSObject? key, NSObject? request) {
    final _ret = _lib._objc_msgSend_39(
        _lib._class_NSURLProtocol1,
        _lib._sel_propertyForKey_inRequest_1,
        key?._id ?? ffi.nullptr,
        request?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static void setProperty_forKey_inRequest_(
      AVFAudio _lib, NSObject value, NSObject? key, NSObject? request) {
    return _lib._objc_msgSend_109(
        _lib._class_NSURLProtocol1,
        _lib._sel_setProperty_forKey_inRequest_1,
        value._id,
        key?._id ?? ffi.nullptr,
        request?._id ?? ffi.nullptr);
  }

  static void removePropertyForKey_inRequest_(
      AVFAudio _lib, NSObject? key, NSObject? request) {
    return _lib._objc_msgSend_19(
        _lib._class_NSURLProtocol1,
        _lib._sel_removePropertyForKey_inRequest_1,
        key?._id ?? ffi.nullptr,
        request?._id ?? ffi.nullptr);
  }

  static bool registerClass_(AVFAudio _lib, NSObject protocolClass) {
    return _lib._objc_msgSend_0(_lib._class_NSURLProtocol1,
        _lib._sel_registerClass_1, protocolClass._id);
  }

  static void unregisterClass_(AVFAudio _lib, NSObject protocolClass) {
    return _lib._objc_msgSend_8(_lib._class_NSURLProtocol1,
        _lib._sel_unregisterClass_1, protocolClass._id);
  }

  static bool canInitWithTask_(AVFAudio _lib, NSObject? task) {
    return _lib._objc_msgSend_0(_lib._class_NSURLProtocol1,
        _lib._sel_canInitWithTask_1, task?._id ?? ffi.nullptr);
  }

  NSURLProtocol initWithTask_cachedResponse_client_(
      NSObject? task, NSObject? cachedResponse, NSObject? client) {
    final _ret = _lib._objc_msgSend_35(
        _id,
        _lib._sel_initWithTask_cachedResponse_client_1,
        task?._id ?? ffi.nullptr,
        cachedResponse?._id ?? ffi.nullptr,
        client?._id ?? ffi.nullptr);
    return NSURLProtocol._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get task {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_task1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSURLProtocol new1(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSURLProtocol1, _lib._sel_new1);
    return NSURLProtocol._(_ret, _lib, retain: false, release: true);
  }

  static NSURLProtocol alloc(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSURLProtocol1, _lib._sel_alloc1);
    return NSURLProtocol._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSURLProtocol1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSURLProtocol1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSURLProtocol1, _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSURLProtocol1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSURLProtocol1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSURLProtocol1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSURLProtocol1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSURLProtocol1, _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSURLProtocol1, _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSURLRequest extends NSObject {
  NSURLRequest._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSURLRequest] that points to the same underlying object as [other].
  static NSURLRequest castFrom<T extends _ObjCWrapper>(T other) {
    return NSURLRequest._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSURLRequest] that wraps the given raw object pointer.
  static NSURLRequest castFromPointer(
      AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSURLRequest._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSURLRequest].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSURLRequest1);
  }

  static NSURLRequest requestWithURL_(AVFAudio _lib, NSObject? URL) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSURLRequest1,
        _lib._sel_requestWithURL_1, URL?._id ?? ffi.nullptr);
    return NSURLRequest._(_ret, _lib, retain: true, release: true);
  }

  static bool getSupportsSecureCoding(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSURLRequest1, _lib._sel_supportsSecureCoding1);
  }

  static NSURLRequest requestWithURL_cachePolicy_timeoutInterval_(
      AVFAudio _lib, NSObject? URL, int cachePolicy, double timeoutInterval) {
    final _ret = _lib._objc_msgSend_388(
        _lib._class_NSURLRequest1,
        _lib._sel_requestWithURL_cachePolicy_timeoutInterval_1,
        URL?._id ?? ffi.nullptr,
        cachePolicy,
        timeoutInterval);
    return NSURLRequest._(_ret, _lib, retain: true, release: true);
  }

  NSURLRequest initWithURL_(NSObject? URL) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_initWithURL_1, URL?._id ?? ffi.nullptr);
    return NSURLRequest._(_ret, _lib, retain: true, release: true);
  }

  NSURLRequest initWithURL_cachePolicy_timeoutInterval_(
      NSObject? URL, int cachePolicy, double timeoutInterval) {
    final _ret = _lib._objc_msgSend_388(
        _id,
        _lib._sel_initWithURL_cachePolicy_timeoutInterval_1,
        URL?._id ?? ffi.nullptr,
        cachePolicy,
        timeoutInterval);
    return NSURLRequest._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get URL {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_URL1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  int get cachePolicy {
    return _lib._objc_msgSend_389(_id, _lib._sel_cachePolicy1);
  }

  double get timeoutInterval {
    return _lib._objc_msgSend_79(_id, _lib._sel_timeoutInterval1);
  }

  NSObject? get mainDocumentURL {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_mainDocumentURL1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  int get networkServiceType {
    return _lib._objc_msgSend_390(_id, _lib._sel_networkServiceType1);
  }

  bool get allowsCellularAccess {
    return _lib._objc_msgSend_9(_id, _lib._sel_allowsCellularAccess1);
  }

  bool get allowsExpensiveNetworkAccess {
    return _lib._objc_msgSend_9(_id, _lib._sel_allowsExpensiveNetworkAccess1);
  }

  bool get allowsConstrainedNetworkAccess {
    return _lib._objc_msgSend_9(_id, _lib._sel_allowsConstrainedNetworkAccess1);
  }

  bool get assumesHTTP3Capable {
    return _lib._objc_msgSend_9(_id, _lib._sel_assumesHTTP3Capable1);
  }

  int get attribution {
    return _lib._objc_msgSend_391(_id, _lib._sel_attribution1);
  }

  NSObject? get HTTPMethod {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_HTTPMethod1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get allHTTPHeaderFields {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_allHTTPHeaderFields1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject valueForHTTPHeaderField_(NSObject? field) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_valueForHTTPHeaderField_1, field?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get HTTPBody {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_HTTPBody1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get HTTPBodyStream {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_HTTPBodyStream1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool get HTTPShouldHandleCookies {
    return _lib._objc_msgSend_9(_id, _lib._sel_HTTPShouldHandleCookies1);
  }

  bool get HTTPShouldUsePipelining {
    return _lib._objc_msgSend_9(_id, _lib._sel_HTTPShouldUsePipelining1);
  }

  static NSURLRequest new1(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSURLRequest1, _lib._sel_new1);
    return NSURLRequest._(_ret, _lib, retain: false, release: true);
  }

  static NSURLRequest alloc(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSURLRequest1, _lib._sel_alloc1);
    return NSURLRequest._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSURLRequest1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSURLRequest1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSURLRequest1, _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSURLRequest1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSURLRequest1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSURLRequest1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSURLRequest1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSURLRequest1, _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSURLRequest1, _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

abstract class NSURLRequestCachePolicy {
  static const int NSURLRequestUseProtocolCachePolicy = 0;
  static const int NSURLRequestReloadIgnoringLocalCacheData = 1;
  static const int NSURLRequestReloadIgnoringLocalAndRemoteCacheData = 4;
  static const int NSURLRequestReloadIgnoringCacheData = 1;
  static const int NSURLRequestReturnCacheDataElseLoad = 2;
  static const int NSURLRequestReturnCacheDataDontLoad = 3;
  static const int NSURLRequestReloadRevalidatingCacheData = 5;
}

abstract class NSURLRequestNetworkServiceType {
  static const int NSURLNetworkServiceTypeDefault = 0;
  static const int NSURLNetworkServiceTypeVoIP = 1;
  static const int NSURLNetworkServiceTypeVideo = 2;
  static const int NSURLNetworkServiceTypeBackground = 3;
  static const int NSURLNetworkServiceTypeVoice = 4;
  static const int NSURLNetworkServiceTypeResponsiveData = 6;
  static const int NSURLNetworkServiceTypeAVStreaming = 8;
  static const int NSURLNetworkServiceTypeResponsiveAV = 9;
  static const int NSURLNetworkServiceTypeCallSignaling = 11;
}

abstract class NSURLRequestAttribution {
  static const int NSURLRequestAttributionDeveloper = 0;
  static const int NSURLRequestAttributionUser = 1;
}

class NSMutableURLRequest extends NSURLRequest {
  NSMutableURLRequest._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSMutableURLRequest] that points to the same underlying object as [other].
  static NSMutableURLRequest castFrom<T extends _ObjCWrapper>(T other) {
    return NSMutableURLRequest._(other._id, other._lib,
        retain: true, release: true);
  }

  /// Returns a [NSMutableURLRequest] that wraps the given raw object pointer.
  static NSMutableURLRequest castFromPointer(
      AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSMutableURLRequest._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSMutableURLRequest].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSMutableURLRequest1);
  }

  @override
  NSObject? get URL {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_URL1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set URL(NSObject? value) {
    _lib._objc_msgSend_34(_id, _lib._sel_setURL_1, value?._id ?? ffi.nullptr);
  }

  @override
  int get cachePolicy {
    return _lib._objc_msgSend_389(_id, _lib._sel_cachePolicy1);
  }

  set cachePolicy(int value) {
    _lib._objc_msgSend_392(_id, _lib._sel_setCachePolicy_1, value);
  }

  @override
  double get timeoutInterval {
    return _lib._objc_msgSend_79(_id, _lib._sel_timeoutInterval1);
  }

  set timeoutInterval(double value) {
    _lib._objc_msgSend_393(_id, _lib._sel_setTimeoutInterval_1, value);
  }

  @override
  NSObject? get mainDocumentURL {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_mainDocumentURL1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set mainDocumentURL(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setMainDocumentURL_1, value?._id ?? ffi.nullptr);
  }

  @override
  int get networkServiceType {
    return _lib._objc_msgSend_390(_id, _lib._sel_networkServiceType1);
  }

  set networkServiceType(int value) {
    _lib._objc_msgSend_394(_id, _lib._sel_setNetworkServiceType_1, value);
  }

  @override
  bool get allowsCellularAccess {
    return _lib._objc_msgSend_9(_id, _lib._sel_allowsCellularAccess1);
  }

  set allowsCellularAccess(bool value) {
    _lib._objc_msgSend_267(_id, _lib._sel_setAllowsCellularAccess_1, value);
  }

  @override
  bool get allowsExpensiveNetworkAccess {
    return _lib._objc_msgSend_9(_id, _lib._sel_allowsExpensiveNetworkAccess1);
  }

  set allowsExpensiveNetworkAccess(bool value) {
    _lib._objc_msgSend_267(
        _id, _lib._sel_setAllowsExpensiveNetworkAccess_1, value);
  }

  @override
  bool get allowsConstrainedNetworkAccess {
    return _lib._objc_msgSend_9(_id, _lib._sel_allowsConstrainedNetworkAccess1);
  }

  set allowsConstrainedNetworkAccess(bool value) {
    _lib._objc_msgSend_267(
        _id, _lib._sel_setAllowsConstrainedNetworkAccess_1, value);
  }

  @override
  bool get assumesHTTP3Capable {
    return _lib._objc_msgSend_9(_id, _lib._sel_assumesHTTP3Capable1);
  }

  set assumesHTTP3Capable(bool value) {
    _lib._objc_msgSend_267(_id, _lib._sel_setAssumesHTTP3Capable_1, value);
  }

  @override
  int get attribution {
    return _lib._objc_msgSend_391(_id, _lib._sel_attribution1);
  }

  set attribution(int value) {
    _lib._objc_msgSend_395(_id, _lib._sel_setAttribution_1, value);
  }

  @override
  NSObject? get HTTPMethod {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_HTTPMethod1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set HTTPMethod(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setHTTPMethod_1, value?._id ?? ffi.nullptr);
  }

  @override
  NSObject? get allHTTPHeaderFields {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_allHTTPHeaderFields1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set allHTTPHeaderFields(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setAllHTTPHeaderFields_1, value?._id ?? ffi.nullptr);
  }

  void setValue_forHTTPHeaderField_(NSObject? value, NSObject? field) {
    return _lib._objc_msgSend_19(_id, _lib._sel_setValue_forHTTPHeaderField_1,
        value?._id ?? ffi.nullptr, field?._id ?? ffi.nullptr);
  }

  void addValue_forHTTPHeaderField_(NSObject? value, NSObject? field) {
    return _lib._objc_msgSend_19(_id, _lib._sel_addValue_forHTTPHeaderField_1,
        value?._id ?? ffi.nullptr, field?._id ?? ffi.nullptr);
  }

  @override
  NSObject? get HTTPBody {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_HTTPBody1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set HTTPBody(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setHTTPBody_1, value?._id ?? ffi.nullptr);
  }

  @override
  NSObject? get HTTPBodyStream {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_HTTPBodyStream1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set HTTPBodyStream(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setHTTPBodyStream_1, value?._id ?? ffi.nullptr);
  }

  @override
  bool get HTTPShouldHandleCookies {
    return _lib._objc_msgSend_9(_id, _lib._sel_HTTPShouldHandleCookies1);
  }

  set HTTPShouldHandleCookies(bool value) {
    _lib._objc_msgSend_267(_id, _lib._sel_setHTTPShouldHandleCookies_1, value);
  }

  @override
  bool get HTTPShouldUsePipelining {
    return _lib._objc_msgSend_9(_id, _lib._sel_HTTPShouldUsePipelining1);
  }

  set HTTPShouldUsePipelining(bool value) {
    _lib._objc_msgSend_267(_id, _lib._sel_setHTTPShouldUsePipelining_1, value);
  }

  static NSMutableURLRequest requestWithURL_(AVFAudio _lib, NSObject? URL) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSMutableURLRequest1,
        _lib._sel_requestWithURL_1, URL?._id ?? ffi.nullptr);
    return NSMutableURLRequest._(_ret, _lib, retain: true, release: true);
  }

  static bool getSupportsSecureCoding(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSMutableURLRequest1, _lib._sel_supportsSecureCoding1);
  }

  static NSMutableURLRequest requestWithURL_cachePolicy_timeoutInterval_(
      AVFAudio _lib, NSObject? URL, int cachePolicy, double timeoutInterval) {
    final _ret = _lib._objc_msgSend_388(
        _lib._class_NSMutableURLRequest1,
        _lib._sel_requestWithURL_cachePolicy_timeoutInterval_1,
        URL?._id ?? ffi.nullptr,
        cachePolicy,
        timeoutInterval);
    return NSMutableURLRequest._(_ret, _lib, retain: true, release: true);
  }

  static NSMutableURLRequest new1(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSMutableURLRequest1, _lib._sel_new1);
    return NSMutableURLRequest._(_ret, _lib, retain: false, release: true);
  }

  static NSMutableURLRequest alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSMutableURLRequest1, _lib._sel_alloc1);
    return NSMutableURLRequest._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSMutableURLRequest1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSMutableURLRequest1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(_lib._class_NSMutableURLRequest1,
        _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSMutableURLRequest1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSMutableURLRequest1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSMutableURLRequest1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSMutableURLRequest1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSMutableURLRequest1,
        _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSMutableURLRequest1, _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSXMLParser extends NSObject {
  NSXMLParser._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSXMLParser] that points to the same underlying object as [other].
  static NSXMLParser castFrom<T extends _ObjCWrapper>(T other) {
    return NSXMLParser._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSXMLParser] that wraps the given raw object pointer.
  static NSXMLParser castFromPointer(
      AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSXMLParser._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSXMLParser].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSXMLParser1);
  }

  NSXMLParser initWithContentsOfURL_(NSObject? url) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_initWithContentsOfURL_1, url?._id ?? ffi.nullptr);
    return NSXMLParser._(_ret, _lib, retain: true, release: true);
  }

  NSXMLParser initWithData_(NSObject? data) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_initWithData_1, data?._id ?? ffi.nullptr);
    return NSXMLParser._(_ret, _lib, retain: true, release: true);
  }

  NSXMLParser initWithStream_(NSObject? stream) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_initWithStream_1, stream?._id ?? ffi.nullptr);
    return NSXMLParser._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get delegate {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_delegate1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set delegate(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setDelegate_1, value?._id ?? ffi.nullptr);
  }

  bool get shouldProcessNamespaces {
    return _lib._objc_msgSend_9(_id, _lib._sel_shouldProcessNamespaces1);
  }

  set shouldProcessNamespaces(bool value) {
    _lib._objc_msgSend_267(_id, _lib._sel_setShouldProcessNamespaces_1, value);
  }

  bool get shouldReportNamespacePrefixes {
    return _lib._objc_msgSend_9(_id, _lib._sel_shouldReportNamespacePrefixes1);
  }

  set shouldReportNamespacePrefixes(bool value) {
    _lib._objc_msgSend_267(
        _id, _lib._sel_setShouldReportNamespacePrefixes_1, value);
  }

  int get externalEntityResolvingPolicy {
    return _lib._objc_msgSend_396(
        _id, _lib._sel_externalEntityResolvingPolicy1);
  }

  set externalEntityResolvingPolicy(int value) {
    _lib._objc_msgSend_397(
        _id, _lib._sel_setExternalEntityResolvingPolicy_1, value);
  }

  NSObject? get allowedExternalEntityURLs {
    final _ret =
        _lib._objc_msgSend_2(_id, _lib._sel_allowedExternalEntityURLs1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set allowedExternalEntityURLs(NSObject? value) {
    _lib._objc_msgSend_34(_id, _lib._sel_setAllowedExternalEntityURLs_1,
        value?._id ?? ffi.nullptr);
  }

  bool parse() {
    return _lib._objc_msgSend_9(_id, _lib._sel_parse1);
  }

  void abortParsing() {
    return _lib._objc_msgSend_1(_id, _lib._sel_abortParsing1);
  }

  NSObject? get parserError {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_parserError1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool get shouldResolveExternalEntities {
    return _lib._objc_msgSend_9(_id, _lib._sel_shouldResolveExternalEntities1);
  }

  set shouldResolveExternalEntities(bool value) {
    _lib._objc_msgSend_267(
        _id, _lib._sel_setShouldResolveExternalEntities_1, value);
  }

  NSObject? get publicID {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_publicID1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get systemID {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_systemID1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  int get lineNumber {
    return _lib._objc_msgSend_11(_id, _lib._sel_lineNumber1);
  }

  int get columnNumber {
    return _lib._objc_msgSend_11(_id, _lib._sel_columnNumber1);
  }

  static NSXMLParser new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSXMLParser1, _lib._sel_new1);
    return NSXMLParser._(_ret, _lib, retain: false, release: true);
  }

  static NSXMLParser alloc(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSXMLParser1, _lib._sel_alloc1);
    return NSXMLParser._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSXMLParser1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSXMLParser1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSXMLParser1, _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSXMLParser1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSXMLParser1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSXMLParser1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSXMLParser1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSXMLParser1, _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSXMLParser1, _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

abstract class NSXMLParserExternalEntityResolvingPolicy {
  static const int NSXMLParserResolveExternalEntitiesNever = 0;
  static const int NSXMLParserResolveExternalEntitiesNoNetwork = 1;
  static const int NSXMLParserResolveExternalEntitiesSameOriginOnly = 2;
  static const int NSXMLParserResolveExternalEntitiesAlways = 3;
}

class NSFileWrapper extends NSObject {
  NSFileWrapper._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSFileWrapper] that points to the same underlying object as [other].
  static NSFileWrapper castFrom<T extends _ObjCWrapper>(T other) {
    return NSFileWrapper._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSFileWrapper] that wraps the given raw object pointer.
  static NSFileWrapper castFromPointer(
      AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSFileWrapper._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSFileWrapper].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSFileWrapper1);
  }

  NSFileWrapper initWithURL_options_error_(NSObject? url, int options,
      ffi.Pointer<ffi.Pointer<ObjCObject>> outError) {
    final _ret = _lib._objc_msgSend_398(
        _id,
        _lib._sel_initWithURL_options_error_1,
        url?._id ?? ffi.nullptr,
        options,
        outError);
    return NSFileWrapper._(_ret, _lib, retain: true, release: true);
  }

  NSFileWrapper initDirectoryWithFileWrappers_(
      NSObject? childrenByPreferredName) {
    final _ret = _lib._objc_msgSend_13(
        _id,
        _lib._sel_initDirectoryWithFileWrappers_1,
        childrenByPreferredName?._id ?? ffi.nullptr);
    return NSFileWrapper._(_ret, _lib, retain: true, release: true);
  }

  NSFileWrapper initRegularFileWithContents_(NSObject? contents) {
    final _ret = _lib._objc_msgSend_13(_id,
        _lib._sel_initRegularFileWithContents_1, contents?._id ?? ffi.nullptr);
    return NSFileWrapper._(_ret, _lib, retain: true, release: true);
  }

  NSFileWrapper initSymbolicLinkWithDestinationURL_(NSObject? url) {
    final _ret = _lib._objc_msgSend_13(
        _id,
        _lib._sel_initSymbolicLinkWithDestinationURL_1,
        url?._id ?? ffi.nullptr);
    return NSFileWrapper._(_ret, _lib, retain: true, release: true);
  }

  NSFileWrapper initWithSerializedRepresentation_(
      NSObject? serializeRepresentation) {
    final _ret = _lib._objc_msgSend_13(
        _id,
        _lib._sel_initWithSerializedRepresentation_1,
        serializeRepresentation?._id ?? ffi.nullptr);
    return NSFileWrapper._(_ret, _lib, retain: true, release: true);
  }

  NSFileWrapper initWithCoder_(NSObject? inCoder) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_initWithCoder_1, inCoder?._id ?? ffi.nullptr);
    return NSFileWrapper._(_ret, _lib, retain: true, release: true);
  }

  bool get directory {
    return _lib._objc_msgSend_9(_id, _lib._sel_isDirectory1);
  }

  bool get regularFile {
    return _lib._objc_msgSend_9(_id, _lib._sel_isRegularFile1);
  }

  bool get symbolicLink {
    return _lib._objc_msgSend_9(_id, _lib._sel_isSymbolicLink1);
  }

  NSObject? get preferredFilename {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_preferredFilename1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set preferredFilename(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setPreferredFilename_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get filename {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_filename1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set filename(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setFilename_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get fileAttributes {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_fileAttributes1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set fileAttributes(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setFileAttributes_1, value?._id ?? ffi.nullptr);
  }

  bool matchesContentsOfURL_(NSObject? url) {
    return _lib._objc_msgSend_0(
        _id, _lib._sel_matchesContentsOfURL_1, url?._id ?? ffi.nullptr);
  }

  bool readFromURL_options_error_(NSObject? url, int options,
      ffi.Pointer<ffi.Pointer<ObjCObject>> outError) {
    return _lib._objc_msgSend_399(_id, _lib._sel_readFromURL_options_error_1,
        url?._id ?? ffi.nullptr, options, outError);
  }

  bool writeToURL_options_originalContentsURL_error_(
      NSObject? url,
      int options,
      NSObject? originalContentsURL,
      ffi.Pointer<ffi.Pointer<ObjCObject>> outError) {
    return _lib._objc_msgSend_400(
        _id,
        _lib._sel_writeToURL_options_originalContentsURL_error_1,
        url?._id ?? ffi.nullptr,
        options,
        originalContentsURL?._id ?? ffi.nullptr,
        outError);
  }

  NSObject? get serializedRepresentation {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_serializedRepresentation1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject addFileWrapper_(NSObject? child) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_addFileWrapper_1, child?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject addRegularFileWithContents_preferredFilename_(
      NSObject? data, NSObject? fileName) {
    final _ret = _lib._objc_msgSend_39(
        _id,
        _lib._sel_addRegularFileWithContents_preferredFilename_1,
        data?._id ?? ffi.nullptr,
        fileName?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void removeFileWrapper_(NSObject? child) {
    return _lib._objc_msgSend_8(
        _id, _lib._sel_removeFileWrapper_1, child?._id ?? ffi.nullptr);
  }

  NSObject? get fileWrappers {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_fileWrappers1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject keyForFileWrapper_(NSObject? child) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_keyForFileWrapper_1, child?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get regularFileContents {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_regularFileContents1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get symbolicLinkDestinationURL {
    final _ret =
        _lib._objc_msgSend_2(_id, _lib._sel_symbolicLinkDestinationURL1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject initWithPath_(NSObject? path) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_initWithPath_1, path?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject initSymbolicLinkWithDestination_(NSObject? path) {
    final _ret = _lib._objc_msgSend_13(_id,
        _lib._sel_initSymbolicLinkWithDestination_1, path?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool needsToBeUpdatedFromPath_(NSObject? path) {
    return _lib._objc_msgSend_0(
        _id, _lib._sel_needsToBeUpdatedFromPath_1, path?._id ?? ffi.nullptr);
  }

  bool updateFromPath_(NSObject? path) {
    return _lib._objc_msgSend_0(
        _id, _lib._sel_updateFromPath_1, path?._id ?? ffi.nullptr);
  }

  bool writeToFile_atomically_updateFilenames_(
      NSObject? path, bool atomicFlag, bool updateFilenamesFlag) {
    return _lib._objc_msgSend_401(
        _id,
        _lib._sel_writeToFile_atomically_updateFilenames_1,
        path?._id ?? ffi.nullptr,
        atomicFlag,
        updateFilenamesFlag);
  }

  NSObject addFileWithPath_(NSObject? path) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_addFileWithPath_1, path?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject addSymbolicLinkWithDestination_preferredFilename_(
      NSObject? path, NSObject? filename) {
    final _ret = _lib._objc_msgSend_39(
        _id,
        _lib._sel_addSymbolicLinkWithDestination_preferredFilename_1,
        path?._id ?? ffi.nullptr,
        filename?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject symbolicLinkDestination() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_symbolicLinkDestination1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSFileWrapper new1(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSFileWrapper1, _lib._sel_new1);
    return NSFileWrapper._(_ret, _lib, retain: false, release: true);
  }

  static NSFileWrapper alloc(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSFileWrapper1, _lib._sel_alloc1);
    return NSFileWrapper._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSFileWrapper1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSFileWrapper1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSFileWrapper1, _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSFileWrapper1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSFileWrapper1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSFileWrapper1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSFileWrapper1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSFileWrapper1, _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSFileWrapper1, _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

abstract class NSFileWrapperReadingOptions {
  static const int NSFileWrapperReadingImmediate = 1;
  static const int NSFileWrapperReadingWithoutMapping = 2;
}

abstract class NSFileWrapperWritingOptions {
  static const int NSFileWrapperWritingAtomic = 1;
  static const int NSFileWrapperWritingWithNameUpdating = 2;
}

class NSURLSession extends NSObject {
  NSURLSession._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSURLSession] that points to the same underlying object as [other].
  static NSURLSession castFrom<T extends _ObjCWrapper>(T other) {
    return NSURLSession._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSURLSession] that wraps the given raw object pointer.
  static NSURLSession castFromPointer(
      AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSURLSession._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSURLSession].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSURLSession1);
  }

  static NSObject? getSharedSession(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSURLSession1, _lib._sel_sharedSession1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject sessionWithConfiguration_(
      AVFAudio _lib, NSObject? configuration) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSURLSession1,
        _lib._sel_sessionWithConfiguration_1,
        configuration?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject sessionWithConfiguration_delegate_delegateQueue_(
      AVFAudio _lib,
      NSObject? configuration,
      NSObject? delegate,
      NSObject? queue) {
    final _ret = _lib._objc_msgSend_35(
        _lib._class_NSURLSession1,
        _lib._sel_sessionWithConfiguration_delegate_delegateQueue_1,
        configuration?._id ?? ffi.nullptr,
        delegate?._id ?? ffi.nullptr,
        queue?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get delegateQueue {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_delegateQueue1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get delegate {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_delegate1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get configuration {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_configuration1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get sessionDescription {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_sessionDescription1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set sessionDescription(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setSessionDescription_1, value?._id ?? ffi.nullptr);
  }

  void finishTasksAndInvalidate() {
    return _lib._objc_msgSend_1(_id, _lib._sel_finishTasksAndInvalidate1);
  }

  void invalidateAndCancel() {
    return _lib._objc_msgSend_1(_id, _lib._sel_invalidateAndCancel1);
  }

  void resetWithCompletionHandler_(ObjCBlock18 completionHandler) {
    return _lib._objc_msgSend_292(
        _id, _lib._sel_resetWithCompletionHandler_1, completionHandler._impl);
  }

  void flushWithCompletionHandler_(ObjCBlock18 completionHandler) {
    return _lib._objc_msgSend_292(
        _id, _lib._sel_flushWithCompletionHandler_1, completionHandler._impl);
  }

  void getTasksWithCompletionHandler_(ObjCBlock22 completionHandler) {
    return _lib._objc_msgSend_402(_id,
        _lib._sel_getTasksWithCompletionHandler_1, completionHandler._impl);
  }

  void getAllTasksWithCompletionHandler_(ObjCBlock19 completionHandler) {
    return _lib._objc_msgSend_403(_id,
        _lib._sel_getAllTasksWithCompletionHandler_1, completionHandler._impl);
  }

  NSObject dataTaskWithRequest_(NSObject? request) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_dataTaskWithRequest_1, request?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject dataTaskWithURL_(NSObject? url) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_dataTaskWithURL_1, url?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject uploadTaskWithRequest_fromFile_(
      NSObject? request, NSObject? fileURL) {
    final _ret = _lib._objc_msgSend_39(
        _id,
        _lib._sel_uploadTaskWithRequest_fromFile_1,
        request?._id ?? ffi.nullptr,
        fileURL?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject uploadTaskWithRequest_fromData_(
      NSObject? request, NSObject? bodyData) {
    final _ret = _lib._objc_msgSend_39(
        _id,
        _lib._sel_uploadTaskWithRequest_fromData_1,
        request?._id ?? ffi.nullptr,
        bodyData?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject uploadTaskWithStreamedRequest_(NSObject? request) {
    final _ret = _lib._objc_msgSend_13(_id,
        _lib._sel_uploadTaskWithStreamedRequest_1, request?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject downloadTaskWithRequest_(NSObject? request) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_downloadTaskWithRequest_1, request?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject downloadTaskWithURL_(NSObject? url) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_downloadTaskWithURL_1, url?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject downloadTaskWithResumeData_(NSObject? resumeData) {
    final _ret = _lib._objc_msgSend_13(_id,
        _lib._sel_downloadTaskWithResumeData_1, resumeData?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject streamTaskWithHostName_port_(NSObject? hostname, int port) {
    final _ret = _lib._objc_msgSend_404(
        _id,
        _lib._sel_streamTaskWithHostName_port_1,
        hostname?._id ?? ffi.nullptr,
        port);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject streamTaskWithNetService_(NSObject? service) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_streamTaskWithNetService_1, service?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject webSocketTaskWithURL_(NSObject? url) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_webSocketTaskWithURL_1, url?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject webSocketTaskWithURL_protocols_(NSObject? url, NSObject? protocols) {
    final _ret = _lib._objc_msgSend_39(
        _id,
        _lib._sel_webSocketTaskWithURL_protocols_1,
        url?._id ?? ffi.nullptr,
        protocols?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject webSocketTaskWithRequest_(NSObject? request) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_webSocketTaskWithRequest_1, request?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSURLSession init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSURLSession._(_ret, _lib, retain: true, release: true);
  }

  static NSURLSession new1(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSURLSession1, _lib._sel_new1);
    return NSURLSession._(_ret, _lib, retain: false, release: true);
  }

  NSObject dataTaskWithRequest_completionHandler_(
      NSObject? request, ObjCBlock22 completionHandler) {
    final _ret = _lib._objc_msgSend_405(
        _id,
        _lib._sel_dataTaskWithRequest_completionHandler_1,
        request?._id ?? ffi.nullptr,
        completionHandler._impl);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject dataTaskWithURL_completionHandler_(
      NSObject? url, ObjCBlock22 completionHandler) {
    final _ret = _lib._objc_msgSend_405(
        _id,
        _lib._sel_dataTaskWithURL_completionHandler_1,
        url?._id ?? ffi.nullptr,
        completionHandler._impl);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject uploadTaskWithRequest_fromFile_completionHandler_(
      NSObject? request, NSObject? fileURL, ObjCBlock22 completionHandler) {
    final _ret = _lib._objc_msgSend_406(
        _id,
        _lib._sel_uploadTaskWithRequest_fromFile_completionHandler_1,
        request?._id ?? ffi.nullptr,
        fileURL?._id ?? ffi.nullptr,
        completionHandler._impl);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject uploadTaskWithRequest_fromData_completionHandler_(
      NSObject? request, NSObject? bodyData, ObjCBlock22 completionHandler) {
    final _ret = _lib._objc_msgSend_406(
        _id,
        _lib._sel_uploadTaskWithRequest_fromData_completionHandler_1,
        request?._id ?? ffi.nullptr,
        bodyData?._id ?? ffi.nullptr,
        completionHandler._impl);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject downloadTaskWithRequest_completionHandler_(
      NSObject? request, ObjCBlock22 completionHandler) {
    final _ret = _lib._objc_msgSend_405(
        _id,
        _lib._sel_downloadTaskWithRequest_completionHandler_1,
        request?._id ?? ffi.nullptr,
        completionHandler._impl);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject downloadTaskWithURL_completionHandler_(
      NSObject? url, ObjCBlock22 completionHandler) {
    final _ret = _lib._objc_msgSend_405(
        _id,
        _lib._sel_downloadTaskWithURL_completionHandler_1,
        url?._id ?? ffi.nullptr,
        completionHandler._impl);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject downloadTaskWithResumeData_completionHandler_(
      NSObject? resumeData, ObjCBlock22 completionHandler) {
    final _ret = _lib._objc_msgSend_405(
        _id,
        _lib._sel_downloadTaskWithResumeData_completionHandler_1,
        resumeData?._id ?? ffi.nullptr,
        completionHandler._impl);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSURLSession alloc(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSURLSession1, _lib._sel_alloc1);
    return NSURLSession._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSURLSession1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSURLSession1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSURLSession1, _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSURLSession1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSURLSession1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSURLSession1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSURLSession1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSURLSession1, _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSURLSession1, _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSURLSessionConfiguration extends NSObject {
  NSURLSessionConfiguration._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSURLSessionConfiguration] that points to the same underlying object as [other].
  static NSURLSessionConfiguration castFrom<T extends _ObjCWrapper>(T other) {
    return NSURLSessionConfiguration._(other._id, other._lib,
        retain: true, release: true);
  }

  /// Returns a [NSURLSessionConfiguration] that wraps the given raw object pointer.
  static NSURLSessionConfiguration castFromPointer(
      AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSURLSessionConfiguration._(other, lib,
        retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSURLSessionConfiguration].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSURLSessionConfiguration1);
  }

  static NSObject? getDefaultSessionConfiguration(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSURLSessionConfiguration1,
        _lib._sel_defaultSessionConfiguration1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject? getEphemeralSessionConfiguration(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSURLSessionConfiguration1,
        _lib._sel_ephemeralSessionConfiguration1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject backgroundSessionConfigurationWithIdentifier_(
      AVFAudio _lib, NSObject? identifier) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSURLSessionConfiguration1,
        _lib._sel_backgroundSessionConfigurationWithIdentifier_1,
        identifier?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get identifier {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_identifier1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  int get requestCachePolicy {
    return _lib._objc_msgSend_389(_id, _lib._sel_requestCachePolicy1);
  }

  set requestCachePolicy(int value) {
    _lib._objc_msgSend_392(_id, _lib._sel_setRequestCachePolicy_1, value);
  }

  double get timeoutIntervalForRequest {
    return _lib._objc_msgSend_79(_id, _lib._sel_timeoutIntervalForRequest1);
  }

  set timeoutIntervalForRequest(double value) {
    _lib._objc_msgSend_393(
        _id, _lib._sel_setTimeoutIntervalForRequest_1, value);
  }

  double get timeoutIntervalForResource {
    return _lib._objc_msgSend_79(_id, _lib._sel_timeoutIntervalForResource1);
  }

  set timeoutIntervalForResource(double value) {
    _lib._objc_msgSend_393(
        _id, _lib._sel_setTimeoutIntervalForResource_1, value);
  }

  int get networkServiceType {
    return _lib._objc_msgSend_390(_id, _lib._sel_networkServiceType1);
  }

  set networkServiceType(int value) {
    _lib._objc_msgSend_394(_id, _lib._sel_setNetworkServiceType_1, value);
  }

  bool get allowsCellularAccess {
    return _lib._objc_msgSend_9(_id, _lib._sel_allowsCellularAccess1);
  }

  set allowsCellularAccess(bool value) {
    _lib._objc_msgSend_267(_id, _lib._sel_setAllowsCellularAccess_1, value);
  }

  bool get allowsExpensiveNetworkAccess {
    return _lib._objc_msgSend_9(_id, _lib._sel_allowsExpensiveNetworkAccess1);
  }

  set allowsExpensiveNetworkAccess(bool value) {
    _lib._objc_msgSend_267(
        _id, _lib._sel_setAllowsExpensiveNetworkAccess_1, value);
  }

  bool get allowsConstrainedNetworkAccess {
    return _lib._objc_msgSend_9(_id, _lib._sel_allowsConstrainedNetworkAccess1);
  }

  set allowsConstrainedNetworkAccess(bool value) {
    _lib._objc_msgSend_267(
        _id, _lib._sel_setAllowsConstrainedNetworkAccess_1, value);
  }

  bool get waitsForConnectivity {
    return _lib._objc_msgSend_9(_id, _lib._sel_waitsForConnectivity1);
  }

  set waitsForConnectivity(bool value) {
    _lib._objc_msgSend_267(_id, _lib._sel_setWaitsForConnectivity_1, value);
  }

  bool get discretionary {
    return _lib._objc_msgSend_9(_id, _lib._sel_isDiscretionary1);
  }

  set discretionary(bool value) {
    _lib._objc_msgSend_267(_id, _lib._sel_setDiscretionary_1, value);
  }

  NSObject? get sharedContainerIdentifier {
    final _ret =
        _lib._objc_msgSend_2(_id, _lib._sel_sharedContainerIdentifier1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set sharedContainerIdentifier(NSObject? value) {
    _lib._objc_msgSend_34(_id, _lib._sel_setSharedContainerIdentifier_1,
        value?._id ?? ffi.nullptr);
  }

  bool get sessionSendsLaunchEvents {
    return _lib._objc_msgSend_9(_id, _lib._sel_sessionSendsLaunchEvents1);
  }

  set sessionSendsLaunchEvents(bool value) {
    _lib._objc_msgSend_267(_id, _lib._sel_setSessionSendsLaunchEvents_1, value);
  }

  NSObject? get connectionProxyDictionary {
    final _ret =
        _lib._objc_msgSend_2(_id, _lib._sel_connectionProxyDictionary1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set connectionProxyDictionary(NSObject? value) {
    _lib._objc_msgSend_34(_id, _lib._sel_setConnectionProxyDictionary_1,
        value?._id ?? ffi.nullptr);
  }

  int get TLSMinimumSupportedProtocol {
    return _lib._objc_msgSend_407(_id, _lib._sel_TLSMinimumSupportedProtocol1);
  }

  set TLSMinimumSupportedProtocol(int value) {
    _lib._objc_msgSend_408(
        _id, _lib._sel_setTLSMinimumSupportedProtocol_1, value);
  }

  int get TLSMaximumSupportedProtocol {
    return _lib._objc_msgSend_407(_id, _lib._sel_TLSMaximumSupportedProtocol1);
  }

  set TLSMaximumSupportedProtocol(int value) {
    _lib._objc_msgSend_408(
        _id, _lib._sel_setTLSMaximumSupportedProtocol_1, value);
  }

  int get TLSMinimumSupportedProtocolVersion {
    return _lib._objc_msgSend_409(
        _id, _lib._sel_TLSMinimumSupportedProtocolVersion1);
  }

  set TLSMinimumSupportedProtocolVersion(int value) {
    _lib._objc_msgSend_410(
        _id, _lib._sel_setTLSMinimumSupportedProtocolVersion_1, value);
  }

  int get TLSMaximumSupportedProtocolVersion {
    return _lib._objc_msgSend_409(
        _id, _lib._sel_TLSMaximumSupportedProtocolVersion1);
  }

  set TLSMaximumSupportedProtocolVersion(int value) {
    _lib._objc_msgSend_410(
        _id, _lib._sel_setTLSMaximumSupportedProtocolVersion_1, value);
  }

  bool get HTTPShouldUsePipelining {
    return _lib._objc_msgSend_9(_id, _lib._sel_HTTPShouldUsePipelining1);
  }

  set HTTPShouldUsePipelining(bool value) {
    _lib._objc_msgSend_267(_id, _lib._sel_setHTTPShouldUsePipelining_1, value);
  }

  bool get HTTPShouldSetCookies {
    return _lib._objc_msgSend_9(_id, _lib._sel_HTTPShouldSetCookies1);
  }

  set HTTPShouldSetCookies(bool value) {
    _lib._objc_msgSend_267(_id, _lib._sel_setHTTPShouldSetCookies_1, value);
  }

  int get HTTPCookieAcceptPolicy {
    return _lib._objc_msgSend_328(_id, _lib._sel_HTTPCookieAcceptPolicy1);
  }

  set HTTPCookieAcceptPolicy(int value) {
    _lib._objc_msgSend_329(_id, _lib._sel_setHTTPCookieAcceptPolicy_1, value);
  }

  NSObject? get HTTPAdditionalHeaders {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_HTTPAdditionalHeaders1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set HTTPAdditionalHeaders(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setHTTPAdditionalHeaders_1, value?._id ?? ffi.nullptr);
  }

  int get HTTPMaximumConnectionsPerHost {
    return _lib._objc_msgSend_11(_id, _lib._sel_HTTPMaximumConnectionsPerHost1);
  }

  set HTTPMaximumConnectionsPerHost(int value) {
    _lib._objc_msgSend_344(
        _id, _lib._sel_setHTTPMaximumConnectionsPerHost_1, value);
  }

  NSObject? get HTTPCookieStorage {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_HTTPCookieStorage1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set HTTPCookieStorage(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setHTTPCookieStorage_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get URLCredentialStorage {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_URLCredentialStorage1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set URLCredentialStorage(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setURLCredentialStorage_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get URLCache {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_URLCache1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set URLCache(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setURLCache_1, value?._id ?? ffi.nullptr);
  }

  bool get shouldUseExtendedBackgroundIdleMode {
    return _lib._objc_msgSend_9(
        _id, _lib._sel_shouldUseExtendedBackgroundIdleMode1);
  }

  set shouldUseExtendedBackgroundIdleMode(bool value) {
    _lib._objc_msgSend_267(
        _id, _lib._sel_setShouldUseExtendedBackgroundIdleMode_1, value);
  }

  NSObject? get protocolClasses {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_protocolClasses1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set protocolClasses(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setProtocolClasses_1, value?._id ?? ffi.nullptr);
  }

  int get multipathServiceType {
    return _lib._objc_msgSend_411(_id, _lib._sel_multipathServiceType1);
  }

  set multipathServiceType(int value) {
    _lib._objc_msgSend_412(_id, _lib._sel_setMultipathServiceType_1, value);
  }

  @override
  NSURLSessionConfiguration init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSURLSessionConfiguration._(_ret, _lib, retain: true, release: true);
  }

  static NSURLSessionConfiguration new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSURLSessionConfiguration1, _lib._sel_new1);
    return NSURLSessionConfiguration._(_ret, _lib,
        retain: false, release: true);
  }

  static NSObject backgroundSessionConfiguration_(
      AVFAudio _lib, NSObject? identifier) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSURLSessionConfiguration1,
        _lib._sel_backgroundSessionConfiguration_1,
        identifier?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSURLSessionConfiguration alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSURLSessionConfiguration1, _lib._sel_alloc1);
    return NSURLSessionConfiguration._(_ret, _lib,
        retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSURLSessionConfiguration1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSURLSessionConfiguration1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(_lib._class_NSURLSessionConfiguration1,
        _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSURLSessionConfiguration1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSURLSessionConfiguration1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSURLSessionConfiguration1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSURLSessionConfiguration1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSURLSessionConfiguration1,
        _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSURLSessionConfiguration1,
        _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

abstract class SSLProtocol {
  static const int kSSLProtocolUnknown = 0;
  static const int kTLSProtocol1 = 4;
  static const int kTLSProtocol11 = 7;
  static const int kTLSProtocol12 = 8;
  static const int kDTLSProtocol1 = 9;
  static const int kTLSProtocol13 = 10;
  static const int kDTLSProtocol12 = 11;
  static const int kTLSProtocolMaxSupported = 999;
  static const int kSSLProtocol2 = 1;
  static const int kSSLProtocol3 = 2;
  static const int kSSLProtocol3Only = 3;
  static const int kTLSProtocol1Only = 5;
  static const int kSSLProtocolAll = 6;
}

abstract class tls_protocol_version_t {
  static const int tls_protocol_version_TLSv10 = 769;
  static const int tls_protocol_version_TLSv11 = 770;
  static const int tls_protocol_version_TLSv12 = 771;
  static const int tls_protocol_version_TLSv13 = 772;
  static const int tls_protocol_version_DTLSv10 = -257;
  static const int tls_protocol_version_DTLSv12 = -259;
}

abstract class NSURLSessionMultipathServiceType {
  static const int NSURLSessionMultipathServiceTypeNone = 0;
  static const int NSURLSessionMultipathServiceTypeHandover = 1;
  static const int NSURLSessionMultipathServiceTypeInteractive = 2;
  static const int NSURLSessionMultipathServiceTypeAggregate = 3;
}

class NSProtocolChecker extends NSProxy {
  NSProtocolChecker._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSProtocolChecker] that points to the same underlying object as [other].
  static NSProtocolChecker castFrom<T extends _ObjCWrapper>(T other) {
    return NSProtocolChecker._(other._id, other._lib,
        retain: true, release: true);
  }

  /// Returns a [NSProtocolChecker] that wraps the given raw object pointer.
  static NSProtocolChecker castFromPointer(
      AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSProtocolChecker._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSProtocolChecker].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSProtocolChecker1);
  }

  NSObject? get protocol {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_protocol1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get target {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_target1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSProtocolChecker protocolCheckerWithTarget_protocol_(
      AVFAudio _lib, NSObject? anObject, NSObject? aProtocol) {
    final _ret = _lib._objc_msgSend_39(
        _lib._class_NSProtocolChecker1,
        _lib._sel_protocolCheckerWithTarget_protocol_1,
        anObject?._id ?? ffi.nullptr,
        aProtocol?._id ?? ffi.nullptr);
    return NSProtocolChecker._(_ret, _lib, retain: true, release: true);
  }

  NSProtocolChecker initWithTarget_protocol_(
      NSObject? anObject, NSObject? aProtocol) {
    final _ret = _lib._objc_msgSend_39(_id, _lib._sel_initWithTarget_protocol_1,
        anObject?._id ?? ffi.nullptr, aProtocol?._id ?? ffi.nullptr);
    return NSProtocolChecker._(_ret, _lib, retain: true, release: true);
  }

  static NSObject alloc(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSProtocolChecker1, _lib._sel_alloc1);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  static bool respondsToSelector_(
      AVFAudio _lib, ffi.Pointer<ObjCSel> aSelector) {
    return _lib._objc_msgSend_4(_lib._class_NSProtocolChecker1,
        _lib._sel_respondsToSelector_1, aSelector);
  }
}

class NSProxy extends _ObjCWrapper {
  NSProxy._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSProxy] that points to the same underlying object as [other].
  static NSProxy castFrom<T extends _ObjCWrapper>(T other) {
    return NSProxy._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSProxy] that wraps the given raw object pointer.
  static NSProxy castFromPointer(AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSProxy._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSProxy].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSProxy1);
  }

  static NSObject alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSProxy1, _lib._sel_alloc1);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  static NSObject allocWithZone_(AVFAudio _lib, ffi.Pointer<NSZone> zone) {
    final _ret = _lib._objc_msgSend_3(
        _lib._class_NSProxy1, _lib._sel_allocWithZone_1, zone);
    return NSObject._(_ret, _lib, retain: false, release: true);
  }

  static NSObject class1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSProxy1, _lib._sel_class1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void forwardInvocation_(NSObject? invocation) {
    return _lib._objc_msgSend_8(
        _id, _lib._sel_forwardInvocation_1, invocation?._id ?? ffi.nullptr);
  }

  NSObject methodSignatureForSelector_(ffi.Pointer<ObjCSel> sel) {
    final _ret =
        _lib._objc_msgSend_7(_id, _lib._sel_methodSignatureForSelector_1, sel);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void dealloc() {
    return _lib._objc_msgSend_1(_id, _lib._sel_dealloc1);
  }

  void finalize() {
    return _lib._objc_msgSend_1(_id, _lib._sel_finalize1);
  }

  NSObject? get description {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_description1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get debugDescription {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_debugDescription1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool respondsToSelector_(
      AVFAudio _lib, ffi.Pointer<ObjCSel> aSelector) {
    return _lib._objc_msgSend_4(
        _lib._class_NSProxy1, _lib._sel_respondsToSelector_1, aSelector);
  }

  bool allowsWeakReference() {
    return _lib._objc_msgSend_9(_id, _lib._sel_allowsWeakReference1);
  }

  bool retainWeakReference() {
    return _lib._objc_msgSend_9(_id, _lib._sel_retainWeakReference1);
  }
}

class NSTask extends NSObject {
  NSTask._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSTask] that points to the same underlying object as [other].
  static NSTask castFrom<T extends _ObjCWrapper>(T other) {
    return NSTask._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSTask] that wraps the given raw object pointer.
  static NSTask castFromPointer(AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSTask._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSTask].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSTask1);
  }

  @override
  NSTask init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSTask._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get executableURL {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_executableURL1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set executableURL(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setExecutableURL_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get arguments {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_arguments1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set arguments(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setArguments_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get environment {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_environment1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set environment(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setEnvironment_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get currentDirectoryURL {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_currentDirectoryURL1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set currentDirectoryURL(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setCurrentDirectoryURL_1, value?._id ?? ffi.nullptr);
  }

  NSObject get standardInput {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_standardInput1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  set standardInput(NSObject value) {
    _lib._objc_msgSend_34(_id, _lib._sel_setStandardInput_1, value._id);
  }

  NSObject get standardOutput {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_standardOutput1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  set standardOutput(NSObject value) {
    _lib._objc_msgSend_34(_id, _lib._sel_setStandardOutput_1, value._id);
  }

  NSObject get standardError {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_standardError1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  set standardError(NSObject value) {
    _lib._objc_msgSend_34(_id, _lib._sel_setStandardError_1, value._id);
  }

  bool launchAndReturnError_(ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_195(_id, _lib._sel_launchAndReturnError_1, error);
  }

  void interrupt() {
    return _lib._objc_msgSend_1(_id, _lib._sel_interrupt1);
  }

  void terminate() {
    return _lib._objc_msgSend_1(_id, _lib._sel_terminate1);
  }

  bool suspend() {
    return _lib._objc_msgSend_9(_id, _lib._sel_suspend1);
  }

  bool resume() {
    return _lib._objc_msgSend_9(_id, _lib._sel_resume1);
  }

  int get processIdentifier {
    return _lib._objc_msgSend_75(_id, _lib._sel_processIdentifier1);
  }

  bool get running {
    return _lib._objc_msgSend_9(_id, _lib._sel_isRunning1);
  }

  int get terminationStatus {
    return _lib._objc_msgSend_75(_id, _lib._sel_terminationStatus1);
  }

  int get terminationReason {
    return _lib._objc_msgSend_413(_id, _lib._sel_terminationReason1);
  }

  ObjCBlock19 get terminationHandler {
    final _ret = _lib._objc_msgSend_299(_id, _lib._sel_terminationHandler1);
    return ObjCBlock19._(_ret, _lib);
  }

  set terminationHandler(ObjCBlock19 value) {
    _lib._objc_msgSend_300(_id, _lib._sel_setTerminationHandler_1, value._impl);
  }

  int get qualityOfService {
    return _lib._objc_msgSend_345(_id, _lib._sel_qualityOfService1);
  }

  set qualityOfService(int value) {
    _lib._objc_msgSend_346(_id, _lib._sel_setQualityOfService_1, value);
  }

  static NSObject
      launchedTaskWithExecutableURL_arguments_error_terminationHandler_(
          AVFAudio _lib,
          NSObject? url,
          NSObject? arguments,
          ffi.Pointer<ffi.Pointer<ObjCObject>> error,
          ObjCBlock19 terminationHandler) {
    final _ret = _lib._objc_msgSend_414(
        _lib._class_NSTask1,
        _lib._sel_launchedTaskWithExecutableURL_arguments_error_terminationHandler_1,
        url?._id ?? ffi.nullptr,
        arguments?._id ?? ffi.nullptr,
        error,
        terminationHandler._impl);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void waitUntilExit() {
    return _lib._objc_msgSend_1(_id, _lib._sel_waitUntilExit1);
  }

  NSObject? get launchPath {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_launchPath1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set launchPath(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setLaunchPath_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get currentDirectoryPath {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_currentDirectoryPath1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set currentDirectoryPath(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setCurrentDirectoryPath_1, value?._id ?? ffi.nullptr);
  }

  void launch() {
    return _lib._objc_msgSend_1(_id, _lib._sel_launch1);
  }

  static NSObject launchedTaskWithLaunchPath_arguments_(
      AVFAudio _lib, NSObject? path, NSObject? arguments) {
    final _ret = _lib._objc_msgSend_39(
        _lib._class_NSTask1,
        _lib._sel_launchedTaskWithLaunchPath_arguments_1,
        path?._id ?? ffi.nullptr,
        arguments?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSTask new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSTask1, _lib._sel_new1);
    return NSTask._(_ret, _lib, retain: false, release: true);
  }

  static NSTask alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSTask1, _lib._sel_alloc1);
    return NSTask._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSTask1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSTask1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSTask1, _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSTask1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSTask1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSTask1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSTask1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSTask1, _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSTask1, _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

abstract class NSTaskTerminationReason {
  static const int NSTaskTerminationReasonExit = 1;
  static const int NSTaskTerminationReasonUncaughtSignal = 2;
}

class NSXMLElement extends NSXMLNode {
  NSXMLElement._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSXMLElement] that points to the same underlying object as [other].
  static NSXMLElement castFrom<T extends _ObjCWrapper>(T other) {
    return NSXMLElement._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSXMLElement] that wraps the given raw object pointer.
  static NSXMLElement castFromPointer(
      AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSXMLElement._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSXMLElement].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSXMLElement1);
  }

  NSXMLElement initWithName_(NSObject? name) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_initWithName_1, name?._id ?? ffi.nullptr);
    return NSXMLElement._(_ret, _lib, retain: true, release: true);
  }

  NSXMLElement initWithName_URI_(NSObject? name, NSObject? URI) {
    final _ret = _lib._objc_msgSend_39(_id, _lib._sel_initWithName_URI_1,
        name?._id ?? ffi.nullptr, URI?._id ?? ffi.nullptr);
    return NSXMLElement._(_ret, _lib, retain: true, release: true);
  }

  NSXMLElement initWithName_stringValue_(NSObject? name, NSObject? string) {
    final _ret = _lib._objc_msgSend_39(
        _id,
        _lib._sel_initWithName_stringValue_1,
        name?._id ?? ffi.nullptr,
        string?._id ?? ffi.nullptr);
    return NSXMLElement._(_ret, _lib, retain: true, release: true);
  }

  NSXMLElement initWithXMLString_error_(
      NSObject? string, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_103(_id,
        _lib._sel_initWithXMLString_error_1, string?._id ?? ffi.nullptr, error);
    return NSXMLElement._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSXMLElement initWithKind_options_(int kind, int options) {
    final _ret = _lib._objc_msgSend_416(
        _id, _lib._sel_initWithKind_options_1, kind, options);
    return NSXMLElement._(_ret, _lib, retain: true, release: true);
  }

  NSObject elementsForName_(NSObject? name) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_elementsForName_1, name?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject elementsForLocalName_URI_(NSObject? localName, NSObject? URI) {
    final _ret = _lib._objc_msgSend_39(
        _id,
        _lib._sel_elementsForLocalName_URI_1,
        localName?._id ?? ffi.nullptr,
        URI?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void addAttribute_(NSObject? attribute) {
    return _lib._objc_msgSend_8(
        _id, _lib._sel_addAttribute_1, attribute?._id ?? ffi.nullptr);
  }

  void removeAttributeForName_(NSObject? name) {
    return _lib._objc_msgSend_8(
        _id, _lib._sel_removeAttributeForName_1, name?._id ?? ffi.nullptr);
  }

  NSObject? get attributes {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_attributes1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set attributes(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setAttributes_1, value?._id ?? ffi.nullptr);
  }

  void setAttributesWithDictionary_(NSObject? attributes) {
    return _lib._objc_msgSend_8(_id, _lib._sel_setAttributesWithDictionary_1,
        attributes?._id ?? ffi.nullptr);
  }

  NSObject attributeForName_(NSObject? name) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_attributeForName_1, name?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject attributeForLocalName_URI_(NSObject? localName, NSObject? URI) {
    final _ret = _lib._objc_msgSend_39(
        _id,
        _lib._sel_attributeForLocalName_URI_1,
        localName?._id ?? ffi.nullptr,
        URI?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void addNamespace_(NSObject? aNamespace) {
    return _lib._objc_msgSend_8(
        _id, _lib._sel_addNamespace_1, aNamespace?._id ?? ffi.nullptr);
  }

  void removeNamespaceForPrefix_(NSObject? name) {
    return _lib._objc_msgSend_8(
        _id, _lib._sel_removeNamespaceForPrefix_1, name?._id ?? ffi.nullptr);
  }

  NSObject? get namespaces {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_namespaces1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set namespaces(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setNamespaces_1, value?._id ?? ffi.nullptr);
  }

  NSObject namespaceForPrefix_(NSObject? name) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_namespaceForPrefix_1, name?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject resolveNamespaceForName_(NSObject? name) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_resolveNamespaceForName_1, name?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject resolvePrefixForNamespaceURI_(NSObject? namespaceURI) {
    final _ret = _lib._objc_msgSend_13(
        _id,
        _lib._sel_resolvePrefixForNamespaceURI_1,
        namespaceURI?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  void insertChild_atIndex_(NSObject? child, int index) {
    return _lib._objc_msgSend_110(
        _id, _lib._sel_insertChild_atIndex_1, child?._id ?? ffi.nullptr, index);
  }

  void insertChildren_atIndex_(NSObject? children, int index) {
    return _lib._objc_msgSend_110(_id, _lib._sel_insertChildren_atIndex_1,
        children?._id ?? ffi.nullptr, index);
  }

  void removeChildAtIndex_(int index) {
    return _lib._objc_msgSend_111(_id, _lib._sel_removeChildAtIndex_1, index);
  }

  void setChildren_(NSObject? children) {
    return _lib._objc_msgSend_8(
        _id, _lib._sel_setChildren_1, children?._id ?? ffi.nullptr);
  }

  void addChild_(NSObject? child) {
    return _lib._objc_msgSend_8(
        _id, _lib._sel_addChild_1, child?._id ?? ffi.nullptr);
  }

  void replaceChildAtIndex_withNode_(int index, NSObject? node) {
    return _lib._objc_msgSend_41(_id, _lib._sel_replaceChildAtIndex_withNode_1,
        index, node?._id ?? ffi.nullptr);
  }

  void normalizeAdjacentTextNodesPreservingCDATA_(bool preserve) {
    return _lib._objc_msgSend_419(
        _id, _lib._sel_normalizeAdjacentTextNodesPreservingCDATA_1, preserve);
  }

  void setAttributesAsDictionary_(NSObject? attributes) {
    return _lib._objc_msgSend_8(_id, _lib._sel_setAttributesAsDictionary_1,
        attributes?._id ?? ffi.nullptr);
  }

  static NSObject document(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSXMLElement1, _lib._sel_document1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject documentWithRootElement_(AVFAudio _lib, NSObject? element) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSXMLElement1,
        _lib._sel_documentWithRootElement_1, element?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject elementWithName_(AVFAudio _lib, NSObject? name) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSXMLElement1,
        _lib._sel_elementWithName_1, name?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject elementWithName_URI_(
      AVFAudio _lib, NSObject? name, NSObject? URI) {
    final _ret = _lib._objc_msgSend_39(
        _lib._class_NSXMLElement1,
        _lib._sel_elementWithName_URI_1,
        name?._id ?? ffi.nullptr,
        URI?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject elementWithName_stringValue_(
      AVFAudio _lib, NSObject? name, NSObject? string) {
    final _ret = _lib._objc_msgSend_39(
        _lib._class_NSXMLElement1,
        _lib._sel_elementWithName_stringValue_1,
        name?._id ?? ffi.nullptr,
        string?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject elementWithName_children_attributes_(
      AVFAudio _lib, NSObject? name, NSObject? children, NSObject? attributes) {
    final _ret = _lib._objc_msgSend_35(
        _lib._class_NSXMLElement1,
        _lib._sel_elementWithName_children_attributes_1,
        name?._id ?? ffi.nullptr,
        children?._id ?? ffi.nullptr,
        attributes?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject attributeWithName_stringValue_(
      AVFAudio _lib, NSObject? name, NSObject? stringValue) {
    final _ret = _lib._objc_msgSend_39(
        _lib._class_NSXMLElement1,
        _lib._sel_attributeWithName_stringValue_1,
        name?._id ?? ffi.nullptr,
        stringValue?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject attributeWithName_URI_stringValue_(
      AVFAudio _lib, NSObject? name, NSObject? URI, NSObject? stringValue) {
    final _ret = _lib._objc_msgSend_35(
        _lib._class_NSXMLElement1,
        _lib._sel_attributeWithName_URI_stringValue_1,
        name?._id ?? ffi.nullptr,
        URI?._id ?? ffi.nullptr,
        stringValue?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject namespaceWithName_stringValue_(
      AVFAudio _lib, NSObject? name, NSObject? stringValue) {
    final _ret = _lib._objc_msgSend_39(
        _lib._class_NSXMLElement1,
        _lib._sel_namespaceWithName_stringValue_1,
        name?._id ?? ffi.nullptr,
        stringValue?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject processingInstructionWithName_stringValue_(
      AVFAudio _lib, NSObject? name, NSObject? stringValue) {
    final _ret = _lib._objc_msgSend_39(
        _lib._class_NSXMLElement1,
        _lib._sel_processingInstructionWithName_stringValue_1,
        name?._id ?? ffi.nullptr,
        stringValue?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject commentWithStringValue_(
      AVFAudio _lib, NSObject? stringValue) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSXMLElement1,
        _lib._sel_commentWithStringValue_1, stringValue?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject textWithStringValue_(AVFAudio _lib, NSObject? stringValue) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSXMLElement1,
        _lib._sel_textWithStringValue_1, stringValue?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject DTDNodeWithXMLString_(AVFAudio _lib, NSObject? string) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSXMLElement1,
        _lib._sel_DTDNodeWithXMLString_1, string?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject localNameForName_(AVFAudio _lib, NSObject? name) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSXMLElement1,
        _lib._sel_localNameForName_1, name?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject prefixForName_(AVFAudio _lib, NSObject? name) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSXMLElement1,
        _lib._sel_prefixForName_1, name?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject predefinedNamespaceForPrefix_(AVFAudio _lib, NSObject? name) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSXMLElement1,
        _lib._sel_predefinedNamespaceForPrefix_1, name?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSXMLElement new1(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSXMLElement1, _lib._sel_new1);
    return NSXMLElement._(_ret, _lib, retain: false, release: true);
  }

  static NSXMLElement alloc(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSXMLElement1, _lib._sel_alloc1);
    return NSXMLElement._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSXMLElement1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSXMLElement1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSXMLElement1, _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSXMLElement1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSXMLElement1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSXMLElement1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSXMLElement1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSXMLElement1, _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSXMLElement1, _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSXMLNode extends NSObject {
  NSXMLNode._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSXMLNode] that points to the same underlying object as [other].
  static NSXMLNode castFrom<T extends _ObjCWrapper>(T other) {
    return NSXMLNode._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [NSXMLNode] that wraps the given raw object pointer.
  static NSXMLNode castFromPointer(AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSXMLNode._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSXMLNode].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_NSXMLNode1);
  }

  @override
  NSXMLNode init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return NSXMLNode._(_ret, _lib, retain: true, release: true);
  }

  NSXMLNode initWithKind_(int kind) {
    final _ret = _lib._objc_msgSend_415(_id, _lib._sel_initWithKind_1, kind);
    return NSXMLNode._(_ret, _lib, retain: true, release: true);
  }

  NSXMLNode initWithKind_options_(int kind, int options) {
    final _ret = _lib._objc_msgSend_416(
        _id, _lib._sel_initWithKind_options_1, kind, options);
    return NSXMLNode._(_ret, _lib, retain: true, release: true);
  }

  static NSObject document(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSXMLNode1, _lib._sel_document1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject documentWithRootElement_(AVFAudio _lib, NSObject? element) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSXMLNode1,
        _lib._sel_documentWithRootElement_1, element?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject elementWithName_(AVFAudio _lib, NSObject? name) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSXMLNode1,
        _lib._sel_elementWithName_1, name?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject elementWithName_URI_(
      AVFAudio _lib, NSObject? name, NSObject? URI) {
    final _ret = _lib._objc_msgSend_39(
        _lib._class_NSXMLNode1,
        _lib._sel_elementWithName_URI_1,
        name?._id ?? ffi.nullptr,
        URI?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject elementWithName_stringValue_(
      AVFAudio _lib, NSObject? name, NSObject? string) {
    final _ret = _lib._objc_msgSend_39(
        _lib._class_NSXMLNode1,
        _lib._sel_elementWithName_stringValue_1,
        name?._id ?? ffi.nullptr,
        string?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject elementWithName_children_attributes_(
      AVFAudio _lib, NSObject? name, NSObject? children, NSObject? attributes) {
    final _ret = _lib._objc_msgSend_35(
        _lib._class_NSXMLNode1,
        _lib._sel_elementWithName_children_attributes_1,
        name?._id ?? ffi.nullptr,
        children?._id ?? ffi.nullptr,
        attributes?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject attributeWithName_stringValue_(
      AVFAudio _lib, NSObject? name, NSObject? stringValue) {
    final _ret = _lib._objc_msgSend_39(
        _lib._class_NSXMLNode1,
        _lib._sel_attributeWithName_stringValue_1,
        name?._id ?? ffi.nullptr,
        stringValue?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject attributeWithName_URI_stringValue_(
      AVFAudio _lib, NSObject? name, NSObject? URI, NSObject? stringValue) {
    final _ret = _lib._objc_msgSend_35(
        _lib._class_NSXMLNode1,
        _lib._sel_attributeWithName_URI_stringValue_1,
        name?._id ?? ffi.nullptr,
        URI?._id ?? ffi.nullptr,
        stringValue?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject namespaceWithName_stringValue_(
      AVFAudio _lib, NSObject? name, NSObject? stringValue) {
    final _ret = _lib._objc_msgSend_39(
        _lib._class_NSXMLNode1,
        _lib._sel_namespaceWithName_stringValue_1,
        name?._id ?? ffi.nullptr,
        stringValue?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject processingInstructionWithName_stringValue_(
      AVFAudio _lib, NSObject? name, NSObject? stringValue) {
    final _ret = _lib._objc_msgSend_39(
        _lib._class_NSXMLNode1,
        _lib._sel_processingInstructionWithName_stringValue_1,
        name?._id ?? ffi.nullptr,
        stringValue?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject commentWithStringValue_(
      AVFAudio _lib, NSObject? stringValue) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSXMLNode1,
        _lib._sel_commentWithStringValue_1, stringValue?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject textWithStringValue_(AVFAudio _lib, NSObject? stringValue) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSXMLNode1,
        _lib._sel_textWithStringValue_1, stringValue?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject DTDNodeWithXMLString_(AVFAudio _lib, NSObject? string) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSXMLNode1,
        _lib._sel_DTDNodeWithXMLString_1, string?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  int get kind {
    return _lib._objc_msgSend_417(_id, _lib._sel_kind1);
  }

  NSObject? get name {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_name1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set name(NSObject? value) {
    _lib._objc_msgSend_34(_id, _lib._sel_setName_1, value?._id ?? ffi.nullptr);
  }

  NSObject get objectValue {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_objectValue1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  set objectValue(NSObject value) {
    _lib._objc_msgSend_34(_id, _lib._sel_setObjectValue_1, value._id);
  }

  NSObject? get stringValue {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_stringValue1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set stringValue(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setStringValue_1, value?._id ?? ffi.nullptr);
  }

  void setStringValue_resolvingEntities_(NSObject? string, bool resolve) {
    return _lib._objc_msgSend_309(
        _id,
        _lib._sel_setStringValue_resolvingEntities_1,
        string?._id ?? ffi.nullptr,
        resolve);
  }

  int get index {
    return _lib._objc_msgSend_10(_id, _lib._sel_index1);
  }

  int get level {
    return _lib._objc_msgSend_10(_id, _lib._sel_level1);
  }

  NSObject? get rootDocument {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_rootDocument1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get parent {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_parent1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  int get childCount {
    return _lib._objc_msgSend_10(_id, _lib._sel_childCount1);
  }

  NSObject? get children {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_children1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject childAtIndex_(int index) {
    final _ret = _lib._objc_msgSend_65(_id, _lib._sel_childAtIndex_1, index);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get previousSibling {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_previousSibling1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get nextSibling {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_nextSibling1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get previousNode {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_previousNode1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get nextNode {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_nextNode1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  void detach() {
    return _lib._objc_msgSend_1(_id, _lib._sel_detach1);
  }

  NSObject? get XPath {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_XPath1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get localName {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_localName1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get prefix {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_prefix1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get URI {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_URI1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set URI(NSObject? value) {
    _lib._objc_msgSend_34(_id, _lib._sel_setURI_1, value?._id ?? ffi.nullptr);
  }

  static NSObject localNameForName_(AVFAudio _lib, NSObject? name) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSXMLNode1,
        _lib._sel_localNameForName_1, name?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject prefixForName_(AVFAudio _lib, NSObject? name) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSXMLNode1,
        _lib._sel_prefixForName_1, name?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject predefinedNamespaceForPrefix_(AVFAudio _lib, NSObject? name) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSXMLNode1,
        _lib._sel_predefinedNamespaceForPrefix_1, name?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get description {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_description1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get XMLString {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_XMLString1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject XMLStringWithOptions_(int options) {
    final _ret =
        _lib._objc_msgSend_418(_id, _lib._sel_XMLStringWithOptions_1, options);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject canonicalXMLStringPreservingComments_(bool comments) {
    final _ret = _lib._objc_msgSend_70(
        _id, _lib._sel_canonicalXMLStringPreservingComments_1, comments);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject nodesForXPath_error_(
      NSObject? xpath, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_103(
        _id, _lib._sel_nodesForXPath_error_1, xpath?._id ?? ffi.nullptr, error);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject objectsForXQuery_constants_error_(NSObject? xquery,
      NSObject? constants, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_219(
        _id,
        _lib._sel_objectsForXQuery_constants_error_1,
        xquery?._id ?? ffi.nullptr,
        constants?._id ?? ffi.nullptr,
        error);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject objectsForXQuery_error_(
      NSObject? xquery, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_103(_id, _lib._sel_objectsForXQuery_error_1,
        xquery?._id ?? ffi.nullptr, error);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSXMLNode new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSXMLNode1, _lib._sel_new1);
    return NSXMLNode._(_ret, _lib, retain: false, release: true);
  }

  static NSXMLNode alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSXMLNode1, _lib._sel_alloc1);
    return NSXMLNode._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSXMLNode1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSXMLNode1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSXMLNode1, _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSXMLNode1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSXMLNode1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSXMLNode1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSXMLNode1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSXMLNode1, _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSXMLNode1, _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

abstract class NSXMLNodeKind {
  static const int NSXMLInvalidKind = 0;
  static const int NSXMLDocumentKind = 1;
  static const int NSXMLElementKind = 2;
  static const int NSXMLAttributeKind = 3;
  static const int NSXMLNamespaceKind = 4;
  static const int NSXMLProcessingInstructionKind = 5;
  static const int NSXMLCommentKind = 6;
  static const int NSXMLTextKind = 7;
  static const int NSXMLDTDKind = 8;
  static const int NSXMLEntityDeclarationKind = 9;
  static const int NSXMLAttributeDeclarationKind = 10;
  static const int NSXMLElementDeclarationKind = 11;
  static const int NSXMLNotationDeclarationKind = 12;
}

abstract class NSXMLNodeOptions {
  static const int NSXMLNodeOptionsNone = 0;
  static const int NSXMLNodeIsCDATA = 1;
  static const int NSXMLNodeExpandEmptyElement = 2;
  static const int NSXMLNodeCompactEmptyElement = 4;
  static const int NSXMLNodeUseSingleQuotes = 8;
  static const int NSXMLNodeUseDoubleQuotes = 16;
  static const int NSXMLNodeNeverEscapeContents = 32;
  static const int NSXMLDocumentTidyHTML = 512;
  static const int NSXMLDocumentTidyXML = 1024;
  static const int NSXMLDocumentValidate = 8192;
  static const int NSXMLNodeLoadExternalEntitiesAlways = 16384;
  static const int NSXMLNodeLoadExternalEntitiesSameOriginOnly = 32768;
  static const int NSXMLNodeLoadExternalEntitiesNever = 524288;
  static const int NSXMLDocumentXInclude = 65536;
  static const int NSXMLNodePrettyPrint = 131072;
  static const int NSXMLDocumentIncludeContentTypeDeclaration = 262144;
  static const int NSXMLNodePreserveNamespaceOrder = 1048576;
  static const int NSXMLNodePreserveAttributeOrder = 2097152;
  static const int NSXMLNodePreserveEntities = 4194304;
  static const int NSXMLNodePreservePrefixes = 8388608;
  static const int NSXMLNodePreserveCDATA = 16777216;
  static const int NSXMLNodePreserveWhitespace = 33554432;
  static const int NSXMLNodePreserveDTD = 67108864;
  static const int NSXMLNodePreserveCharacterReferences = 134217728;
  static const int NSXMLNodePromoteSignificantWhitespace = 268435456;
  static const int NSXMLNodePreserveEmptyElements = 6;
  static const int NSXMLNodePreserveQuotes = 24;
  static const int NSXMLNodePreserveAll = 4293918750;
}

class NSScriptClassDescription extends NSClassDescription {
  NSScriptClassDescription._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSScriptClassDescription] that points to the same underlying object as [other].
  static NSScriptClassDescription castFrom<T extends _ObjCWrapper>(T other) {
    return NSScriptClassDescription._(other._id, other._lib,
        retain: true, release: true);
  }

  /// Returns a [NSScriptClassDescription] that wraps the given raw object pointer.
  static NSScriptClassDescription castFromPointer(
      AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSScriptClassDescription._(other, lib,
        retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSScriptClassDescription].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSScriptClassDescription1);
  }

  static NSObject classDescriptionForClass_(AVFAudio _lib, NSObject aClass) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSScriptClassDescription1,
        _lib._sel_classDescriptionForClass_1, aClass._id);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSScriptClassDescription initWithSuiteName_className_dictionary_(
      NSObject? suiteName, NSObject? className, NSObject? classDeclaration) {
    final _ret = _lib._objc_msgSend_35(
        _id,
        _lib._sel_initWithSuiteName_className_dictionary_1,
        suiteName?._id ?? ffi.nullptr,
        className?._id ?? ffi.nullptr,
        classDeclaration?._id ?? ffi.nullptr);
    return NSScriptClassDescription._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get suiteName {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_suiteName1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get className {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_className1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get implementationClassName {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_implementationClassName1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get superclassDescription {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_superclassDescription1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  int get appleEventCode {
    return _lib._objc_msgSend_37(_id, _lib._sel_appleEventCode1);
  }

  bool matchesAppleEventCode_(int appleEventCode) {
    return _lib._objc_msgSend_311(
        _id, _lib._sel_matchesAppleEventCode_1, appleEventCode);
  }

  bool supportsCommand_(NSObject? commandDescription) {
    return _lib._objc_msgSend_0(_id, _lib._sel_supportsCommand_1,
        commandDescription?._id ?? ffi.nullptr);
  }

  ffi.Pointer<ObjCSel> selectorForCommand_(NSObject? commandDescription) {
    return _lib._objc_msgSend_420(_id, _lib._sel_selectorForCommand_1,
        commandDescription?._id ?? ffi.nullptr);
  }

  NSObject typeForKey_(NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_typeForKey_1, key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject classDescriptionForKey_(NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _id, _lib._sel_classDescriptionForKey_1, key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  int appleEventCodeForKey_(NSObject? key) {
    return _lib._objc_msgSend_421(
        _id, _lib._sel_appleEventCodeForKey_1, key?._id ?? ffi.nullptr);
  }

  NSObject keyWithAppleEventCode_(int appleEventCode) {
    final _ret = _lib._objc_msgSend_63(
        _id, _lib._sel_keyWithAppleEventCode_1, appleEventCode);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get defaultSubcontainerAttributeKey {
    final _ret =
        _lib._objc_msgSend_2(_id, _lib._sel_defaultSubcontainerAttributeKey1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool isLocationRequiredToCreateForKey_(NSObject? toManyRelationshipKey) {
    return _lib._objc_msgSend_0(
        _id,
        _lib._sel_isLocationRequiredToCreateForKey_1,
        toManyRelationshipKey?._id ?? ffi.nullptr);
  }

  bool hasPropertyForKey_(NSObject? key) {
    return _lib._objc_msgSend_0(
        _id, _lib._sel_hasPropertyForKey_1, key?._id ?? ffi.nullptr);
  }

  bool hasOrderedToManyRelationshipForKey_(NSObject? key) {
    return _lib._objc_msgSend_0(
        _id,
        _lib._sel_hasOrderedToManyRelationshipForKey_1,
        key?._id ?? ffi.nullptr);
  }

  bool hasReadablePropertyForKey_(NSObject? key) {
    return _lib._objc_msgSend_0(
        _id, _lib._sel_hasReadablePropertyForKey_1, key?._id ?? ffi.nullptr);
  }

  bool hasWritablePropertyForKey_(NSObject? key) {
    return _lib._objc_msgSend_0(
        _id, _lib._sel_hasWritablePropertyForKey_1, key?._id ?? ffi.nullptr);
  }

  bool isReadOnlyKey_(NSObject? key) {
    return _lib._objc_msgSend_0(
        _id, _lib._sel_isReadOnlyKey_1, key?._id ?? ffi.nullptr);
  }

  static void registerClassDescription_forClass_(
      AVFAudio _lib, NSObject? description, NSObject aClass) {
    return _lib._objc_msgSend_19(
        _lib._class_NSScriptClassDescription1,
        _lib._sel_registerClassDescription_forClass_1,
        description?._id ?? ffi.nullptr,
        aClass._id);
  }

  static void invalidateClassDescriptionCache(AVFAudio _lib) {
    return _lib._objc_msgSend_1(_lib._class_NSScriptClassDescription1,
        _lib._sel_invalidateClassDescriptionCache1);
  }

  static NSScriptClassDescription new1(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSScriptClassDescription1, _lib._sel_new1);
    return NSScriptClassDescription._(_ret, _lib, retain: false, release: true);
  }

  static NSScriptClassDescription alloc(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSScriptClassDescription1, _lib._sel_alloc1);
    return NSScriptClassDescription._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSScriptClassDescription1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSScriptClassDescription1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(_lib._class_NSScriptClassDescription1,
        _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSScriptClassDescription1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSScriptClassDescription1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSScriptClassDescription1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSScriptClassDescription1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSScriptClassDescription1,
        _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSScriptClassDescription1,
        _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class NSClassDescription extends NSObject {
  NSClassDescription._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [NSClassDescription] that points to the same underlying object as [other].
  static NSClassDescription castFrom<T extends _ObjCWrapper>(T other) {
    return NSClassDescription._(other._id, other._lib,
        retain: true, release: true);
  }

  /// Returns a [NSClassDescription] that wraps the given raw object pointer.
  static NSClassDescription castFromPointer(
      AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return NSClassDescription._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [NSClassDescription].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_NSClassDescription1);
  }

  static void registerClassDescription_forClass_(
      AVFAudio _lib, NSObject? description, NSObject aClass) {
    return _lib._objc_msgSend_19(
        _lib._class_NSClassDescription1,
        _lib._sel_registerClassDescription_forClass_1,
        description?._id ?? ffi.nullptr,
        aClass._id);
  }

  static void invalidateClassDescriptionCache(AVFAudio _lib) {
    return _lib._objc_msgSend_1(_lib._class_NSClassDescription1,
        _lib._sel_invalidateClassDescriptionCache1);
  }

  static NSObject classDescriptionForClass_(AVFAudio _lib, NSObject aClass) {
    final _ret = _lib._objc_msgSend_13(_lib._class_NSClassDescription1,
        _lib._sel_classDescriptionForClass_1, aClass._id);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSObject? get attributeKeys {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_attributeKeys1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSObject? get toOneRelationshipKeys {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_toOneRelationshipKeys1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSObject? get toManyRelationshipKeys {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_toManyRelationshipKeys1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  @override
  NSObject inverseForRelationshipKey_(NSObject? relationshipKey) {
    final _ret = _lib._objc_msgSend_13(
        _id,
        _lib._sel_inverseForRelationshipKey_1,
        relationshipKey?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSClassDescription new1(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSClassDescription1, _lib._sel_new1);
    return NSClassDescription._(_ret, _lib, retain: false, release: true);
  }

  static NSClassDescription alloc(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_NSClassDescription1, _lib._sel_alloc1);
    return NSClassDescription._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_NSClassDescription1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_NSClassDescription1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(_lib._class_NSClassDescription1,
        _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_NSClassDescription1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_NSClassDescription1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_NSClassDescription1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_NSClassDescription1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(_lib._class_NSClassDescription1,
        _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSClassDescription1, _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

class AVAudioSession extends NSObject {
  AVAudioSession._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [AVAudioSession] that points to the same underlying object as [other].
  static AVAudioSession castFrom<T extends _ObjCWrapper>(T other) {
    return AVAudioSession._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [AVAudioSession] that wraps the given raw object pointer.
  static AVAudioSession castFromPointer(
      AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return AVAudioSession._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [AVAudioSession].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(obj._id, obj._lib._sel_isKindOfClass_1,
        obj._lib._class_AVAudioSession1);
  }

  static NSObject sharedInstance(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_AVAudioSession1, _lib._sel_sharedInstance1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get availableCategories {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_availableCategories1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool setCategory_error_(AVAudioSessionCategory category,
      ffi.Pointer<ffi.Pointer<ObjCObject>> outError) {
    return _lib._objc_msgSend_89(
        _id, _lib._sel_setCategory_error_1, category, outError);
  }

  bool setCategory_withOptions_error_(AVAudioSessionCategory category,
      int options, ffi.Pointer<ffi.Pointer<ObjCObject>> outError) {
    return _lib._objc_msgSend_422(_id,
        _lib._sel_setCategory_withOptions_error_1, category, options, outError);
  }

  bool setCategory_mode_options_error_(
      AVAudioSessionCategory category,
      AVAudioSessionMode mode,
      int options,
      ffi.Pointer<ffi.Pointer<ObjCObject>> outError) {
    return _lib._objc_msgSend_423(
        _id,
        _lib._sel_setCategory_mode_options_error_1,
        category,
        mode,
        options,
        outError);
  }

  bool setCategory_mode_routeSharingPolicy_options_error_(
      AVAudioSessionCategory category,
      AVAudioSessionMode mode,
      int policy,
      int options,
      ffi.Pointer<ffi.Pointer<ObjCObject>> outError) {
    return _lib._objc_msgSend_424(
        _id,
        _lib._sel_setCategory_mode_routeSharingPolicy_options_error_1,
        category,
        mode,
        policy,
        options,
        outError);
  }

  AVAudioSessionCategory get category {
    return _lib._objc_msgSend_2(_id, _lib._sel_category1);
  }

  int get categoryOptions {
    return _lib._objc_msgSend_425(_id, _lib._sel_categoryOptions1);
  }

  int get routeSharingPolicy {
    return _lib._objc_msgSend_426(_id, _lib._sel_routeSharingPolicy1);
  }

  NSObject? get availableModes {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_availableModes1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool setMode_error_(
      AVAudioSessionMode mode, ffi.Pointer<ffi.Pointer<ObjCObject>> outError) {
    return _lib._objc_msgSend_89(
        _id, _lib._sel_setMode_error_1, mode, outError);
  }

  AVAudioSessionMode get mode {
    return _lib._objc_msgSend_2(_id, _lib._sel_mode1);
  }

  bool setAllowHapticsAndSystemSoundsDuringRecording_error_(
      bool inValue, ffi.Pointer<ffi.Pointer<ObjCObject>> outError) {
    return _lib._objc_msgSend_427(
        _id,
        _lib._sel_setAllowHapticsAndSystemSoundsDuringRecording_error_1,
        inValue,
        outError);
  }

  bool get allowHapticsAndSystemSoundsDuringRecording {
    return _lib._objc_msgSend_9(
        _id, _lib._sel_allowHapticsAndSystemSoundsDuringRecording1);
  }

  int get recordPermission {
    return _lib._objc_msgSend_428(_id, _lib._sel_recordPermission1);
  }

  void requestRecordPermission_(ObjCBlock20 response) {
    return _lib._objc_msgSend_429(
        _id, _lib._sel_requestRecordPermission_1, response._impl);
  }

  bool overrideOutputAudioPort_error_(
      int portOverride, ffi.Pointer<ffi.Pointer<ObjCObject>> outError) {
    return _lib._objc_msgSend_430(
        _id, _lib._sel_overrideOutputAudioPort_error_1, portOverride, outError);
  }

  bool setPreferredInput_error_(
      NSObject? inPort, ffi.Pointer<ffi.Pointer<ObjCObject>> outError) {
    return _lib._objc_msgSend_89(_id, _lib._sel_setPreferredInput_error_1,
        inPort?._id ?? ffi.nullptr, outError);
  }

  NSObject? get preferredInput {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_preferredInput1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool setPrefersNoInterruptionsFromSystemAlerts_error_(
      bool inValue, ffi.Pointer<ffi.Pointer<ObjCObject>> outError) {
    return _lib._objc_msgSend_427(
        _id,
        _lib._sel_setPrefersNoInterruptionsFromSystemAlerts_error_1,
        inValue,
        outError);
  }

  bool get prefersNoInterruptionsFromSystemAlerts {
    return _lib._objc_msgSend_9(
        _id, _lib._sel_prefersNoInterruptionsFromSystemAlerts1);
  }

  bool setActive_error_(
      bool active, ffi.Pointer<ffi.Pointer<ObjCObject>> outError) {
    return _lib._objc_msgSend_427(
        _id, _lib._sel_setActive_error_1, active, outError);
  }

  bool setActive_withOptions_error_(
      bool active, int options, ffi.Pointer<ffi.Pointer<ObjCObject>> outError) {
    return _lib._objc_msgSend_431(_id, _lib._sel_setActive_withOptions_error_1,
        active, options, outError);
  }

  void activateWithOptions_completionHandler_(
      int options, ObjCBlock23 handler) {
    return _lib._objc_msgSend_432(
        _id,
        _lib._sel_activateWithOptions_completionHandler_1,
        options,
        handler._impl);
  }

  bool setPreferredSampleRate_error_(
      double sampleRate, ffi.Pointer<ffi.Pointer<ObjCObject>> outError) {
    return _lib._objc_msgSend_433(
        _id, _lib._sel_setPreferredSampleRate_error_1, sampleRate, outError);
  }

  double get preferredSampleRate {
    return _lib._objc_msgSend_79(_id, _lib._sel_preferredSampleRate1);
  }

  bool setPreferredIOBufferDuration_error_(
      double duration, ffi.Pointer<ffi.Pointer<ObjCObject>> outError) {
    return _lib._objc_msgSend_433(_id,
        _lib._sel_setPreferredIOBufferDuration_error_1, duration, outError);
  }

  double get preferredIOBufferDuration {
    return _lib._objc_msgSend_79(_id, _lib._sel_preferredIOBufferDuration1);
  }

  bool setPreferredInputNumberOfChannels_error_(
      int count, ffi.Pointer<ffi.Pointer<ObjCObject>> outError) {
    return _lib._objc_msgSend_434(_id,
        _lib._sel_setPreferredInputNumberOfChannels_error_1, count, outError);
  }

  int get preferredInputNumberOfChannels {
    return _lib._objc_msgSend_11(
        _id, _lib._sel_preferredInputNumberOfChannels1);
  }

  bool setPreferredOutputNumberOfChannels_error_(
      int count, ffi.Pointer<ffi.Pointer<ObjCObject>> outError) {
    return _lib._objc_msgSend_434(_id,
        _lib._sel_setPreferredOutputNumberOfChannels_error_1, count, outError);
  }

  int get preferredOutputNumberOfChannels {
    return _lib._objc_msgSend_11(
        _id, _lib._sel_preferredOutputNumberOfChannels1);
  }

  bool setPreferredInputOrientation_error_(
      int orientation, ffi.Pointer<ffi.Pointer<ObjCObject>> outError) {
    return _lib._objc_msgSend_435(_id,
        _lib._sel_setPreferredInputOrientation_error_1, orientation, outError);
  }

  int get preferredInputOrientation {
    return _lib._objc_msgSend_436(_id, _lib._sel_preferredInputOrientation1);
  }

  int get inputOrientation {
    return _lib._objc_msgSend_436(_id, _lib._sel_inputOrientation1);
  }

  int get maximumInputNumberOfChannels {
    return _lib._objc_msgSend_11(_id, _lib._sel_maximumInputNumberOfChannels1);
  }

  int get maximumOutputNumberOfChannels {
    return _lib._objc_msgSend_11(_id, _lib._sel_maximumOutputNumberOfChannels1);
  }

  bool setInputGain_error_(
      double gain, ffi.Pointer<ffi.Pointer<ObjCObject>> outError) {
    return _lib._objc_msgSend_437(
        _id, _lib._sel_setInputGain_error_1, gain, outError);
  }

  double get inputGain {
    return _lib._objc_msgSend_78(_id, _lib._sel_inputGain1);
  }

  bool get inputGainSettable {
    return _lib._objc_msgSend_9(_id, _lib._sel_isInputGainSettable1);
  }

  bool get inputAvailable {
    return _lib._objc_msgSend_9(_id, _lib._sel_isInputAvailable1);
  }

  NSObject? get inputDataSources {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_inputDataSources1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get inputDataSource {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_inputDataSource1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool setInputDataSource_error_(
      NSObject? dataSource, ffi.Pointer<ffi.Pointer<ObjCObject>> outError) {
    return _lib._objc_msgSend_89(_id, _lib._sel_setInputDataSource_error_1,
        dataSource?._id ?? ffi.nullptr, outError);
  }

  NSObject? get outputDataSources {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_outputDataSources1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get outputDataSource {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_outputDataSource1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool setOutputDataSource_error_(
      NSObject? dataSource, ffi.Pointer<ffi.Pointer<ObjCObject>> outError) {
    return _lib._objc_msgSend_89(_id, _lib._sel_setOutputDataSource_error_1,
        dataSource?._id ?? ffi.nullptr, outError);
  }

  double get sampleRate {
    return _lib._objc_msgSend_79(_id, _lib._sel_sampleRate1);
  }

  int get inputNumberOfChannels {
    return _lib._objc_msgSend_11(_id, _lib._sel_inputNumberOfChannels1);
  }

  int get outputNumberOfChannels {
    return _lib._objc_msgSend_11(_id, _lib._sel_outputNumberOfChannels1);
  }

  double get inputLatency {
    return _lib._objc_msgSend_79(_id, _lib._sel_inputLatency1);
  }

  double get outputLatency {
    return _lib._objc_msgSend_79(_id, _lib._sel_outputLatency1);
  }

  double get IOBufferDuration {
    return _lib._objc_msgSend_79(_id, _lib._sel_IOBufferDuration1);
  }

  bool get otherAudioPlaying {
    return _lib._objc_msgSend_9(_id, _lib._sel_isOtherAudioPlaying1);
  }

  bool get secondaryAudioShouldBeSilencedHint {
    return _lib._objc_msgSend_9(
        _id, _lib._sel_secondaryAudioShouldBeSilencedHint1);
  }

  double get outputVolume {
    return _lib._objc_msgSend_78(_id, _lib._sel_outputVolume1);
  }

  int get promptStyle {
    return _lib._objc_msgSend_438(_id, _lib._sel_promptStyle1);
  }

  NSObject? get availableInputs {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_availableInputs1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get currentRoute {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_currentRoute1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool setAggregatedIOPreference_error_(
      int inIOType, ffi.Pointer<ffi.Pointer<ObjCObject>> outError) {
    return _lib._objc_msgSend_439(
        _id, _lib._sel_setAggregatedIOPreference_error_1, inIOType, outError);
  }

  bool setSupportsMultichannelContent_error_(
      bool inValue, ffi.Pointer<ffi.Pointer<ObjCObject>> outError) {
    return _lib._objc_msgSend_427(_id,
        _lib._sel_setSupportsMultichannelContent_error_1, inValue, outError);
  }

  bool get supportsMultichannelContent {
    return _lib._objc_msgSend_9(_id, _lib._sel_supportsMultichannelContent1);
  }

  NSObject? get delegate {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_delegate1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set delegate(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setDelegate_1, value?._id ?? ffi.nullptr);
  }

  @override
  AVAudioSession init() {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_init1);
    return AVAudioSession._(_ret, _lib, retain: true, release: true);
  }

  bool setActive_withFlags_error_(
      bool active, int flags, ffi.Pointer<ffi.Pointer<ObjCObject>> outError) {
    return _lib._objc_msgSend_440(
        _id, _lib._sel_setActive_withFlags_error_1, active, flags, outError);
  }

  bool get inputIsAvailable {
    return _lib._objc_msgSend_9(_id, _lib._sel_inputIsAvailable1);
  }

  double get currentHardwareSampleRate {
    return _lib._objc_msgSend_79(_id, _lib._sel_currentHardwareSampleRate1);
  }

  int get currentHardwareInputNumberOfChannels {
    return _lib._objc_msgSend_11(
        _id, _lib._sel_currentHardwareInputNumberOfChannels1);
  }

  int get currentHardwareOutputNumberOfChannels {
    return _lib._objc_msgSend_11(
        _id, _lib._sel_currentHardwareOutputNumberOfChannels1);
  }

  bool setPreferredHardwareSampleRate_error_(
      double sampleRate, ffi.Pointer<ffi.Pointer<ObjCObject>> outError) {
    return _lib._objc_msgSend_433(_id,
        _lib._sel_setPreferredHardwareSampleRate_error_1, sampleRate, outError);
  }

  double get preferredHardwareSampleRate {
    return _lib._objc_msgSend_79(_id, _lib._sel_preferredHardwareSampleRate1);
  }

  static AVAudioSession new1(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_AVAudioSession1, _lib._sel_new1);
    return AVAudioSession._(_ret, _lib, retain: false, release: true);
  }

  static AVAudioSession alloc(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_AVAudioSession1, _lib._sel_alloc1);
    return AVAudioSession._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_AVAudioSession1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_AVAudioSession1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(_lib._class_AVAudioSession1,
        _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_AVAudioSession1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_AVAudioSession1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_AVAudioSession1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_AVAudioSession1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_AVAudioSession1, _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_AVAudioSession1, _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}

typedef AVAudioSessionCategory = ffi.Pointer<ObjCObject>;

abstract class AVAudioSessionCategoryOptions {
  static const int AVAudioSessionCategoryOptionMixWithOthers = 1;
  static const int AVAudioSessionCategoryOptionDuckOthers = 2;
  static const int AVAudioSessionCategoryOptionAllowBluetooth = 4;
  static const int AVAudioSessionCategoryOptionDefaultToSpeaker = 8;
  static const int
      AVAudioSessionCategoryOptionInterruptSpokenAudioAndMixWithOthers = 17;
  static const int AVAudioSessionCategoryOptionAllowBluetoothA2DP = 32;
  static const int AVAudioSessionCategoryOptionAllowAirPlay = 64;
  static const int
      AVAudioSessionCategoryOptionOverrideMutedMicrophoneInterruption = 128;
}

typedef AVAudioSessionMode = ffi.Pointer<ObjCObject>;

abstract class AVAudioSessionRouteSharingPolicy {
  static const int AVAudioSessionRouteSharingPolicyDefault = 0;
  static const int AVAudioSessionRouteSharingPolicyLongFormAudio = 1;
  static const int AVAudioSessionRouteSharingPolicyLongForm = 1;
  static const int AVAudioSessionRouteSharingPolicyIndependent = 2;
  static const int AVAudioSessionRouteSharingPolicyLongFormVideo = 3;
}

abstract class AVAudioSessionRecordPermission {
  static const int AVAudioSessionRecordPermissionUndetermined = 1970168948;
  static const int AVAudioSessionRecordPermissionDenied = 1684369017;
  static const int AVAudioSessionRecordPermissionGranted = 1735552628;
}

abstract class AVAudioSessionPortOverride {
  static const int AVAudioSessionPortOverrideNone = 0;
  static const int AVAudioSessionPortOverrideSpeaker = 1936747378;
}

abstract class AVAudioSessionSetActiveOptions {
  static const int AVAudioSessionSetActiveOptionNotifyOthersOnDeactivation = 1;
}

abstract class AVAudioSessionActivationOptions {
  static const int AVAudioSessionActivationOptionNone = 0;
}

void _ObjCBlock23_fnPtrTrampoline(
    ffi.Pointer<_ObjCBlock> block, bool arg0, ffi.Pointer<ObjCObject> arg1) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Bool arg0, ffi.Pointer<ObjCObject> arg1)>>()
      .asFunction<
          void Function(bool arg0, ffi.Pointer<ObjCObject> arg1)>()(arg0, arg1);
}

final _ObjCBlock23_closureRegistry = <int, Function>{};
int _ObjCBlock23_closureRegistryIndex = 0;
ffi.Pointer<ffi.Void> _ObjCBlock23_registerClosure(Function fn) {
  final id = ++_ObjCBlock23_closureRegistryIndex;
  _ObjCBlock23_closureRegistry[id] = fn;
  return ffi.Pointer<ffi.Void>.fromAddress(id);
}

void _ObjCBlock23_closureTrampoline(
    ffi.Pointer<_ObjCBlock> block, bool arg0, ffi.Pointer<ObjCObject> arg1) {
  return _ObjCBlock23_closureRegistry[block.ref.target.address]!(arg0, arg1);
}

class ObjCBlock23 {
  final ffi.Pointer<_ObjCBlock> _impl;
  final AVFAudio _lib;
  ObjCBlock23._(this._impl, this._lib);
  ObjCBlock23.fromFunctionPointer(
      this._lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Bool arg0, ffi.Pointer<ObjCObject> arg1)>>
          ptr)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<_ObjCBlock> block,
                            ffi.Bool arg0, ffi.Pointer<ObjCObject> arg1)>(
                    _ObjCBlock23_fnPtrTrampoline)
                .cast(),
            ptr.cast());
  ObjCBlock23.fromFunction(
      this._lib, void Function(bool arg0, ffi.Pointer<ObjCObject> arg1) fn)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<_ObjCBlock> block,
                            ffi.Bool arg0, ffi.Pointer<ObjCObject> arg1)>(
                    _ObjCBlock23_closureTrampoline)
                .cast(),
            _ObjCBlock23_registerClosure(fn));
  void call(bool arg0, ffi.Pointer<ObjCObject> arg1) {
    return _impl.ref.invoke
        .cast<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<_ObjCBlock> block, ffi.Bool arg0,
                    ffi.Pointer<ObjCObject> arg1)>>()
        .asFunction<
            void Function(ffi.Pointer<_ObjCBlock> block, bool arg0,
                ffi.Pointer<ObjCObject> arg1)>()(_impl, arg0, arg1);
  }

  ffi.Pointer<_ObjCBlock> get pointer => _impl;
}

abstract class AVAudioStereoOrientation {
  static const int AVAudioStereoOrientationNone = 0;
  static const int AVAudioStereoOrientationPortrait = 1;
  static const int AVAudioStereoOrientationPortraitUpsideDown = 2;
  static const int AVAudioStereoOrientationLandscapeRight = 3;
  static const int AVAudioStereoOrientationLandscapeLeft = 4;
}

abstract class AVAudioSessionPromptStyle {
  static const int AVAudioSessionPromptStyleNone = 1852796517;
  static const int AVAudioSessionPromptStyleShort = 1936224884;
  static const int AVAudioSessionPromptStyleNormal = 1852992876;
}

abstract class AVAudioSessionIOType {
  static const int AVAudioSessionIOTypeNotSpecified = 0;
  static const int AVAudioSessionIOTypeAggregated = 1;
}

class AVAudioPlayer extends NSObject {
  AVAudioPlayer._(ffi.Pointer<ObjCObject> id, AVFAudio lib,
      {bool retain = false, bool release = false})
      : super._(id, lib, retain: retain, release: release);

  /// Returns a [AVAudioPlayer] that points to the same underlying object as [other].
  static AVAudioPlayer castFrom<T extends _ObjCWrapper>(T other) {
    return AVAudioPlayer._(other._id, other._lib, retain: true, release: true);
  }

  /// Returns a [AVAudioPlayer] that wraps the given raw object pointer.
  static AVAudioPlayer castFromPointer(
      AVFAudio lib, ffi.Pointer<ObjCObject> other,
      {bool retain = false, bool release = false}) {
    return AVAudioPlayer._(other, lib, retain: retain, release: release);
  }

  /// Returns whether [obj] is an instance of [AVAudioPlayer].
  static bool isInstance(_ObjCWrapper obj) {
    return obj._lib._objc_msgSend_0(
        obj._id, obj._lib._sel_isKindOfClass_1, obj._lib._class_AVAudioPlayer1);
  }

  AVAudioPlayer initWithContentsOfURL_error_(
      NSObject? url, ffi.Pointer<ffi.Pointer<ObjCObject>> outError) {
    final _ret = _lib._objc_msgSend_103(
        _id,
        _lib._sel_initWithContentsOfURL_error_1,
        url?._id ?? ffi.nullptr,
        outError);
    return AVAudioPlayer._(_ret, _lib, retain: true, release: true);
  }

  AVAudioPlayer initWithData_error_(
      NSObject? data, ffi.Pointer<ffi.Pointer<ObjCObject>> outError) {
    final _ret = _lib._objc_msgSend_103(_id, _lib._sel_initWithData_error_1,
        data?._id ?? ffi.nullptr, outError);
    return AVAudioPlayer._(_ret, _lib, retain: true, release: true);
  }

  AVAudioPlayer initWithContentsOfURL_fileTypeHint_error_(NSObject? url,
      NSObject? utiString, ffi.Pointer<ffi.Pointer<ObjCObject>> outError) {
    final _ret = _lib._objc_msgSend_219(
        _id,
        _lib._sel_initWithContentsOfURL_fileTypeHint_error_1,
        url?._id ?? ffi.nullptr,
        utiString?._id ?? ffi.nullptr,
        outError);
    return AVAudioPlayer._(_ret, _lib, retain: true, release: true);
  }

  AVAudioPlayer initWithData_fileTypeHint_error_(NSObject? data,
      NSObject? utiString, ffi.Pointer<ffi.Pointer<ObjCObject>> outError) {
    final _ret = _lib._objc_msgSend_219(
        _id,
        _lib._sel_initWithData_fileTypeHint_error_1,
        data?._id ?? ffi.nullptr,
        utiString?._id ?? ffi.nullptr,
        outError);
    return AVAudioPlayer._(_ret, _lib, retain: true, release: true);
  }

  bool prepareToPlay() {
    return _lib._objc_msgSend_9(_id, _lib._sel_prepareToPlay1);
  }

  bool play() {
    return _lib._objc_msgSend_9(_id, _lib._sel_play1);
  }

  bool playAtTime_(double time) {
    return _lib._objc_msgSend_441(_id, _lib._sel_playAtTime_1, time);
  }

  void pause() {
    return _lib._objc_msgSend_1(_id, _lib._sel_pause1);
  }

  void stop() {
    return _lib._objc_msgSend_1(_id, _lib._sel_stop1);
  }

  bool get playing {
    return _lib._objc_msgSend_9(_id, _lib._sel_isPlaying1);
  }

  int get numberOfChannels {
    return _lib._objc_msgSend_10(_id, _lib._sel_numberOfChannels1);
  }

  double get duration {
    return _lib._objc_msgSend_79(_id, _lib._sel_duration1);
  }

  NSObject? get currentDevice {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_currentDevice1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set currentDevice(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setCurrentDevice_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get delegate {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_delegate1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set delegate(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setDelegate_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get url {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_url1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get data {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_data1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  double get pan {
    return _lib._objc_msgSend_78(_id, _lib._sel_pan1);
  }

  set pan(double value) {
    _lib._objc_msgSend_442(_id, _lib._sel_setPan_1, value);
  }

  double get volume {
    return _lib._objc_msgSend_78(_id, _lib._sel_volume1);
  }

  set volume(double value) {
    _lib._objc_msgSend_442(_id, _lib._sel_setVolume_1, value);
  }

  void setVolume_fadeDuration_(double volume, double duration) {
    return _lib._objc_msgSend_443(
        _id, _lib._sel_setVolume_fadeDuration_1, volume, duration);
  }

  bool get enableRate {
    return _lib._objc_msgSend_9(_id, _lib._sel_enableRate1);
  }

  set enableRate(bool value) {
    _lib._objc_msgSend_267(_id, _lib._sel_setEnableRate_1, value);
  }

  double get rate {
    return _lib._objc_msgSend_78(_id, _lib._sel_rate1);
  }

  set rate(double value) {
    _lib._objc_msgSend_442(_id, _lib._sel_setRate_1, value);
  }

  double get currentTime {
    return _lib._objc_msgSend_79(_id, _lib._sel_currentTime1);
  }

  set currentTime(double value) {
    _lib._objc_msgSend_393(_id, _lib._sel_setCurrentTime_1, value);
  }

  double get deviceCurrentTime {
    return _lib._objc_msgSend_79(_id, _lib._sel_deviceCurrentTime1);
  }

  int get numberOfLoops {
    return _lib._objc_msgSend_11(_id, _lib._sel_numberOfLoops1);
  }

  set numberOfLoops(int value) {
    _lib._objc_msgSend_344(_id, _lib._sel_setNumberOfLoops_1, value);
  }

  NSObject? get settings {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_settings1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  NSObject? get format {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_format1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  bool get meteringEnabled {
    return _lib._objc_msgSend_9(_id, _lib._sel_isMeteringEnabled1);
  }

  set meteringEnabled(bool value) {
    _lib._objc_msgSend_267(_id, _lib._sel_setMeteringEnabled_1, value);
  }

  void updateMeters() {
    return _lib._objc_msgSend_1(_id, _lib._sel_updateMeters1);
  }

  double peakPowerForChannel_(int channelNumber) {
    return _lib._objc_msgSend_444(
        _id, _lib._sel_peakPowerForChannel_1, channelNumber);
  }

  double averagePowerForChannel_(int channelNumber) {
    return _lib._objc_msgSend_444(
        _id, _lib._sel_averagePowerForChannel_1, channelNumber);
  }

  NSObject? get channelAssignments {
    final _ret = _lib._objc_msgSend_2(_id, _lib._sel_channelAssignments1);
    return _ret.address == 0
        ? null
        : NSObject._(_ret, _lib, retain: true, release: true);
  }

  set channelAssignments(NSObject? value) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_setChannelAssignments_1, value?._id ?? ffi.nullptr);
  }

  static AVAudioPlayer new1(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_AVAudioPlayer1, _lib._sel_new1);
    return AVAudioPlayer._(_ret, _lib, retain: false, release: true);
  }

  static AVAudioPlayer alloc(AVFAudio _lib) {
    final _ret =
        _lib._objc_msgSend_2(_lib._class_AVAudioPlayer1, _lib._sel_alloc1);
    return AVAudioPlayer._(_ret, _lib, retain: false, release: true);
  }

  static void cancelPreviousPerformRequestsWithTarget_selector_object_(
      AVFAudio _lib,
      NSObject aTarget,
      ffi.Pointer<ObjCSel> aSelector,
      NSObject anArgument) {
    return _lib._objc_msgSend_18(
        _lib._class_AVAudioPlayer1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_selector_object_1,
        aTarget._id,
        aSelector,
        anArgument._id);
  }

  static void cancelPreviousPerformRequestsWithTarget_(
      AVFAudio _lib, NSObject aTarget) {
    return _lib._objc_msgSend_8(_lib._class_AVAudioPlayer1,
        _lib._sel_cancelPreviousPerformRequestsWithTarget_1, aTarget._id);
  }

  static bool getAccessInstanceVariablesDirectly(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_AVAudioPlayer1, _lib._sel_accessInstanceVariablesDirectly1);
  }

  static bool useStoredAccessor(AVFAudio _lib) {
    return _lib._objc_msgSend_9(
        _lib._class_AVAudioPlayer1, _lib._sel_useStoredAccessor1);
  }

  static NSObject keyPathsForValuesAffectingValueForKey_(
      AVFAudio _lib, NSObject? key) {
    final _ret = _lib._objc_msgSend_13(
        _lib._class_AVAudioPlayer1,
        _lib._sel_keyPathsForValuesAffectingValueForKey_1,
        key?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static bool automaticallyNotifiesObserversForKey_(
      AVFAudio _lib, NSObject? key) {
    return _lib._objc_msgSend_0(
        _lib._class_AVAudioPlayer1,
        _lib._sel_automaticallyNotifiesObserversForKey_1,
        key?._id ?? ffi.nullptr);
  }

  static void setKeys_triggerChangeNotificationsForDependentKey_(
      AVFAudio _lib, NSObject? keys, NSObject? dependentKey) {
    return _lib._objc_msgSend_19(
        _lib._class_AVAudioPlayer1,
        _lib._sel_setKeys_triggerChangeNotificationsForDependentKey_1,
        keys?._id ?? ffi.nullptr,
        dependentKey?._id ?? ffi.nullptr);
  }

  static NSObject classFallbacksForKeyedArchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_AVAudioPlayer1, _lib._sel_classFallbacksForKeyedArchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }

  static NSObject classForKeyedUnarchiver(AVFAudio _lib) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_AVAudioPlayer1, _lib._sel_classForKeyedUnarchiver1);
    return NSObject._(_ret, _lib, retain: true, release: true);
  }
}
