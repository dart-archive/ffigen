// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

class Bindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Bindings(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Bindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// Just a test function
  /// heres another line
  int noParam() {
    return _noParam();
  }

  late final _noParam_ptr = _lookup<ffi.NativeFunction<_c_noParam>>('noParam');
  late final _dart_noParam _noParam = _noParam_ptr.asFunction<_dart_noParam>();

  int withPrimitiveParam(
    int a,
    int b,
  ) {
    return _withPrimitiveParam(
      a,
      b,
    );
  }

  late final _withPrimitiveParam_ptr =
      _lookup<ffi.NativeFunction<_c_withPrimitiveParam>>('withPrimitiveParam');
  late final _dart_withPrimitiveParam _withPrimitiveParam =
      _withPrimitiveParam_ptr.asFunction<_dart_withPrimitiveParam>();

  ffi.Pointer<ffi.Double> withPointerParam(
    ffi.Pointer<ffi.Int32> a,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> b,
  ) {
    return _withPointerParam(
      a,
      b,
    );
  }

  late final _withPointerParam_ptr =
      _lookup<ffi.NativeFunction<_c_withPointerParam>>('withPointerParam');
  late final _dart_withPointerParam _withPointerParam =
      _withPointerParam_ptr.asFunction<_dart_withPointerParam>();
}

typedef _c_noParam = ffi.Int32 Function();

typedef _dart_noParam = int Function();

typedef _c_withPrimitiveParam = ffi.Uint8 Function(
  ffi.Int32 a,
  ffi.Uint8 b,
);

typedef _dart_withPrimitiveParam = int Function(
  int a,
  int b,
);

typedef _c_withPointerParam = ffi.Pointer<ffi.Double> Function(
  ffi.Pointer<ffi.Int32> a,
  ffi.Pointer<ffi.Pointer<ffi.Uint8>> b,
);

typedef _dart_withPointerParam = ffi.Pointer<ffi.Double> Function(
  ffi.Pointer<ffi.Int32> a,
  ffi.Pointer<ffi.Pointer<ffi.Uint8>> b,
);
