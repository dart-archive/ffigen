// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;
import 'package:ffi/ffi.dart' as pkg_ffi;

/// Opaque Dependencies Test
class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int __darwin_check_fd_set_overflow(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return ___darwin_check_fd_set_overflow(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___darwin_check_fd_set_overflowPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(pkg_ffi.Int, ffi.Pointer<ffi.Void>,
              pkg_ffi.Int)>>('__darwin_check_fd_set_overflow');
  late final ___darwin_check_fd_set_overflow =
      ___darwin_check_fd_set_overflowPtr
          .asFunction<int Function(int, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<pkg_ffi.Char> sel_getName(
    ffi.Pointer<ObjCObject> sel,
  ) {
    return _sel_getName(
      sel,
    );
  }

  late final _sel_getNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              ffi.Pointer<ObjCObject>)>>('sel_getName');
  late final _sel_getName = _sel_getNamePtr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> sel_registerName(
    ffi.Pointer<pkg_ffi.Char> str,
  ) {
    return _sel_registerName(
      str,
    );
  }

  late final _sel_registerNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<pkg_ffi.Char>)>>('sel_registerName');
  late final _sel_registerName = _sel_registerNamePtr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<pkg_ffi.Char>)>();

  ffi.Pointer<pkg_ffi.Char> object_getClassName(
    ffi.Pointer<ObjCObject> obj,
  ) {
    return _object_getClassName(
      obj,
    );
  }

  late final _object_getClassNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              ffi.Pointer<ObjCObject>)>>('object_getClassName');
  late final _object_getClassName = _object_getClassNamePtr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ffi.Void> object_getIndexedIvars(
    ffi.Pointer<ObjCObject> obj,
  ) {
    return _object_getIndexedIvars(
      obj,
    );
  }

  late final _object_getIndexedIvarsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ObjCObject>)>>('object_getIndexedIvars');
  late final _object_getIndexedIvars = _object_getIndexedIvarsPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ObjCObject>)>();

  int sel_isMapped(
    ffi.Pointer<ObjCObject> sel,
  ) {
    return _sel_isMapped(
      sel,
    );
  }

  late final _sel_isMappedPtr =
      _lookup<ffi.NativeFunction<BOOL Function(ffi.Pointer<ObjCObject>)>>(
          'sel_isMapped');
  late final _sel_isMapped =
      _sel_isMappedPtr.asFunction<int Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> sel_getUid(
    ffi.Pointer<pkg_ffi.Char> str,
  ) {
    return _sel_getUid(
      str,
    );
  }

  late final _sel_getUidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<pkg_ffi.Char>)>>('sel_getUid');
  late final _sel_getUid = _sel_getUidPtr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<pkg_ffi.Char>)>();

  ffi.Pointer<ObjCObject> objc_retainedObject(
    objc_objectptr_t obj,
  ) {
    return _objc_retainedObject(
      obj,
    );
  }

  late final _objc_retainedObjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              objc_objectptr_t)>>('objc_retainedObject');
  late final _objc_retainedObject = _objc_retainedObjectPtr
      .asFunction<ffi.Pointer<ObjCObject> Function(objc_objectptr_t)>();

  ffi.Pointer<ObjCObject> objc_unretainedObject(
    objc_objectptr_t obj,
  ) {
    return _objc_unretainedObject(
      obj,
    );
  }

  late final _objc_unretainedObjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              objc_objectptr_t)>>('objc_unretainedObject');
  late final _objc_unretainedObject = _objc_unretainedObjectPtr
      .asFunction<ffi.Pointer<ObjCObject> Function(objc_objectptr_t)>();

  objc_objectptr_t objc_unretainedPointer(
    ffi.Pointer<ObjCObject> obj,
  ) {
    return _objc_unretainedPointer(
      obj,
    );
  }

  late final _objc_unretainedPointerPtr = _lookup<
      ffi.NativeFunction<
          objc_objectptr_t Function(
              ffi.Pointer<ObjCObject>)>>('objc_unretainedPointer');
  late final _objc_unretainedPointer = _objc_unretainedPointerPtr
      .asFunction<objc_objectptr_t Function(ffi.Pointer<ObjCObject>)>();
}

class __mbstate_t extends ffi.Union {
  @ffi.Array.multi([128])
  external ffi.Array<pkg_ffi.Char> __mbstate8;

  @pkg_ffi.LongLong()
  external int _mbstateL;
}

class ObjCObject extends ffi.Opaque {}

typedef BOOL = pkg_ffi.SignedChar;
typedef objc_objectptr_t = ffi.Pointer<ffi.Void>;

class Foo extends ffi.Struct {
  @BOOL()
  external int someBool;

  external ffi.Pointer<ObjCObject> anId;

  external ffi.Pointer<ObjCObject> selector;

  external ffi.Pointer<ObjCObject> object;

  external ffi.Pointer<ObjCObject> clazz;

  external ffi.Pointer<ObjCObject> blockThatReturnsAnInt;
}

const int true1 = 1;

const int false1 = 0;
