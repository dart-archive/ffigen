// ignore_for_file: camel_case_types, non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

@ffi.Native<ffi.Bool Function(ffi.Bool)>(
    symbol: 'Function1Bool', assetId: 'native_test')
external bool Function1Bool(
  bool x,
);

@ffi.Native<ffi.Uint8 Function(ffi.Uint8)>(
    symbol: 'Function1Uint8', assetId: 'native_test')
external int Function1Uint8(
  int x,
);

@ffi.Native<ffi.Uint16 Function(ffi.Uint16)>(
    symbol: 'Function1Uint16', assetId: 'native_test')
external int Function1Uint16(
  int x,
);

@ffi.Native<ffi.Uint32 Function(ffi.Uint32)>(
    symbol: 'Function1Uint32', assetId: 'native_test')
external int Function1Uint32(
  int x,
);

@ffi.Native<ffi.Uint64 Function(ffi.Uint64)>(
    symbol: 'Function1Uint64', assetId: 'native_test')
external int Function1Uint64(
  int x,
);

@ffi.Native<ffi.Int8 Function(ffi.Int8)>(
    symbol: 'Function1Int8', assetId: 'native_test')
external int Function1Int8(
  int x,
);

@ffi.Native<ffi.Int16 Function(ffi.Int16)>(
    symbol: 'Function1Int16', assetId: 'native_test')
external int Function1Int16(
  int x,
);

@ffi.Native<ffi.Int32 Function(ffi.Int32)>(
    symbol: 'Function1Int32', assetId: 'native_test')
external int Function1Int32(
  int x,
);

@ffi.Native<ffi.Int64 Function(ffi.Int64)>(
    symbol: 'Function1Int64', assetId: 'native_test')
external int Function1Int64(
  int x,
);

@ffi.Native<ffi.IntPtr Function(ffi.IntPtr)>(
    symbol: 'Function1IntPtr', assetId: 'native_test')
external int Function1IntPtr(
  int x,
);

@ffi.Native<ffi.UintPtr Function(ffi.UintPtr)>(
    symbol: 'Function1UintPtr', assetId: 'native_test')
external int Function1UintPtr(
  int x,
);

@ffi.Native<ffi.Float Function(ffi.Float)>(
    symbol: 'Function1Float', assetId: 'native_test')
external double Function1Float(
  double x,
);

@ffi.Native<ffi.Double Function(ffi.Double)>(
    symbol: 'Function1Double', assetId: 'native_test')
external double Function1Double(
  double x,
);

@ffi.Native<ffi.Pointer<Struct1> Function()>(
    symbol: 'getStruct1', assetId: 'native_test')
external ffi.Pointer<Struct1> getStruct1();

@ffi.Native<Struct3 Function(ffi.Int, ffi.Int, ffi.Int)>(
    symbol: 'Function1StructReturnByValue', assetId: 'native_test')
external Struct3 Function1StructReturnByValue(
  int a,
  int b,
  int c,
);

@ffi.Native<ffi.Int Function(Struct3)>(
    symbol: 'Function1StructPassByValue', assetId: 'native_test')
external int Function1StructPassByValue(
  Struct3 sum_a_b_c,
);

final class Struct1 extends ffi.Struct {
  @ffi.Int8()
  external int a;

  @ffi.Array.multi([3, 1, 2])
  external ffi.Array<ffi.Array<ffi.Array<ffi.Int32>>> data;
}

final class Struct3 extends ffi.Struct {
  @ffi.Int()
  external int a;

  @ffi.Int()
  external int b;

  @ffi.Int()
  external int c;
}
